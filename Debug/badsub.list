
badsub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800c754  0800c754  0000d754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd6c  0800cd6c  0000e184  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd6c  0800cd6c  0000dd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd74  0800cd74  0000e184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd74  0800cd74  0000dd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd78  0800cd78  0000dd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800cd7c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  20000184  0800cf00  0000e184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a8  0800cf00  0000e2a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014191  00000000  00000000  0000e1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f61  00000000  00000000  00022345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000262a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d65  00000000  00000000  00027498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b95d  00000000  00000000  000281fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a90b  00000000  00000000  00043b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd4c  00000000  00000000  0005e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb1b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005518  00000000  00000000  000eb1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c73c 	.word	0x0800c73c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800c73c 	.word	0x0800c73c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <myprintf>:
FATFS FatFs;
FIL fil;
int fs_mounted = 0;
BYTE work[_MAX_SS];

void myprintf(const char *fmt, ...){
 80005a0:	b40f      	push	{r0, r1, r2, r3}
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b6:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <myprintf+0x34>)
 80005b8:	f00b f87e 	bl	800b6b8 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <myprintf+0x34>)
 80005be:	f7ff fe19 	bl	80001f4 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	607b      	str	r3, [r7, #4]
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d0:	b004      	add	sp, #16
 80005d2:	4770      	bx	lr
 80005d4:	200005d4 	.word	0x200005d4

080005d8 <format_fileSystem>:

FRESULT format_fileSystem(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
    FRESULT res;
    sd_cs_low();
 80005de:	f000 f855 	bl	800068c <sd_cs_low>

    res = f_mkfs("", FM_FAT32, 0, work, sizeof(work));
 80005e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <format_fileSystem+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <format_fileSystem+0x4c>)
 80005f0:	f009 fc54 	bl	8009e9c <f_mkfs>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <format_fileSystem+0x38>
        printf("Formatting failed. Error: %d\n", res);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4619      	mov	r1, r3
 8000602:	4809      	ldr	r0, [pc, #36]	@ (8000628 <format_fileSystem+0x50>)
 8000604:	f00a ff46 	bl	800b494 <iprintf>
        sd_cs_high();
 8000608:	f000 f84c 	bl	80006a4 <sd_cs_high>
        return res;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	e002      	b.n	8000616 <format_fileSystem+0x3e>
    }

    sd_cs_high();
 8000610:	f000 f848 	bl	80006a4 <sd_cs_high>
    return FR_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200003d4 	.word	0x200003d4
 8000624:	0800c754 	.word	0x0800c754
 8000628:	0800c758 	.word	0x0800c758

0800062c <check_and_mount_filesystem>:

FRESULT check_and_mount_filesystem(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
    FRESULT res;
    res = mount_fileSystem();
 8000632:	f000 f843 	bl	80006bc <mount_fileSystem>
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d01b      	beq.n	8000678 <check_and_mount_filesystem+0x4c>
        res = format_fileSystem();
 8000640:	f7ff ffca 	bl	80005d8 <format_fileSystem>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
        if (res != FR_OK) {
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <check_and_mount_filesystem+0x30>
            printf("Error during formatting. Error: %d\n", res);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	@ (8000684 <check_and_mount_filesystem+0x58>)
 8000654:	f00a ff1e 	bl	800b494 <iprintf>
            return res;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	e00e      	b.n	800067a <check_and_mount_filesystem+0x4e>
        }
        res = mount_fileSystem();
 800065c:	f000 f82e 	bl	80006bc <mount_fileSystem>
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
        if (res != FR_OK) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <check_and_mount_filesystem+0x4c>
            printf("Failed to mount filesystem after formatting. Error: %d\n", res);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <check_and_mount_filesystem+0x5c>)
 8000670:	f00a ff10 	bl	800b494 <iprintf>
            return res;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	e000      	b.n	800067a <check_and_mount_filesystem+0x4e>
        }
    }

    return FR_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	0800c778 	.word	0x0800c778
 8000688:	0800c79c 	.word	0x0800c79c

0800068c <sd_cs_low>:


void sd_cs_low(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <sd_cs_low+0x14>)
 8000696:	f001 fa19 	bl	8001acc <HAL_GPIO_WritePin>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020400 	.word	0x40020400

080006a4 <sd_cs_high>:

void sd_cs_high(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4802      	ldr	r0, [pc, #8]	@ (80006b8 <sd_cs_high+0x14>)
 80006ae:	f001 fa0d 	bl	8001acc <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40020400 	.word	0x40020400

080006bc <mount_fileSystem>:

FRESULT mount_fileSystem(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09c      	sub	sp, #112	@ 0x70
 80006c0:	af02      	add	r7, sp, #8
    if (fs_mounted) {
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <mount_fileSystem+0xd4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d004      	beq.n	80006d4 <mount_fileSystem+0x18>
        myprintf("Filesystem already mounted.\r\n");
 80006ca:	4832      	ldr	r0, [pc, #200]	@ (8000794 <mount_fileSystem+0xd8>)
 80006cc:	f7ff ff68 	bl	80005a0 <myprintf>
        return FR_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e059      	b.n	8000788 <mount_fileSystem+0xcc>
    }

    sd_cs_low();
 80006d4:	f7ff ffda 	bl	800068c <sd_cs_low>

    FRESULT fres = f_mount(&FatFs, "", 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	492f      	ldr	r1, [pc, #188]	@ (8000798 <mount_fileSystem+0xdc>)
 80006dc:	482f      	ldr	r0, [pc, #188]	@ (800079c <mount_fileSystem+0xe0>)
 80006de:	f008 fff5 	bl	80096cc <f_mount>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (fres != FR_OK) {
 80006e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d042      	beq.n	8000776 <mount_fileSystem+0xba>
        myprintf("f_mount error (%i)\r\n", fres);
 80006f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80006f4:	4619      	mov	r1, r3
 80006f6:	482a      	ldr	r0, [pc, #168]	@ (80007a0 <mount_fileSystem+0xe4>)
 80006f8:	f7ff ff52 	bl	80005a0 <myprintf>

        if (fres == FR_NO_FILESYSTEM) {
 80006fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000700:	2b0d      	cmp	r3, #13
 8000702:	d134      	bne.n	800076e <mount_fileSystem+0xb2>
            myprintf("No valid filesystem found. Attempting to format the SD card.\r\n");
 8000704:	4827      	ldr	r0, [pc, #156]	@ (80007a4 <mount_fileSystem+0xe8>)
 8000706:	f7ff ff4b 	bl	80005a0 <myprintf>
            BYTE work[100];
            fres = f_mkfs("", FM_FAT, 0, work, sizeof(work));
 800070a:	463b      	mov	r3, r7
 800070c:	2264      	movs	r2, #100	@ 0x64
 800070e:	9200      	str	r2, [sp, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	2101      	movs	r1, #1
 8000714:	4820      	ldr	r0, [pc, #128]	@ (8000798 <mount_fileSystem+0xdc>)
 8000716:	f009 fbc1 	bl	8009e9c <f_mkfs>
 800071a:	4603      	mov	r3, r0
 800071c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (fres == FR_OK) {
 8000720:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000724:	2b00      	cmp	r3, #0
 8000726:	d11c      	bne.n	8000762 <mount_fileSystem+0xa6>
                myprintf("Filesystem created successfully. Remounting...\r\n");
 8000728:	481f      	ldr	r0, [pc, #124]	@ (80007a8 <mount_fileSystem+0xec>)
 800072a:	f7ff ff39 	bl	80005a0 <myprintf>
                fres = f_mount(&FatFs, "", 1);
 800072e:	2201      	movs	r2, #1
 8000730:	4919      	ldr	r1, [pc, #100]	@ (8000798 <mount_fileSystem+0xdc>)
 8000732:	481a      	ldr	r0, [pc, #104]	@ (800079c <mount_fileSystem+0xe0>)
 8000734:	f008 ffca 	bl	80096cc <f_mount>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                if (fres == FR_OK) {
 800073e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000742:	2b00      	cmp	r3, #0
 8000744:	d106      	bne.n	8000754 <mount_fileSystem+0x98>
                    myprintf("Filesystem mounted successfully.\r\n");
 8000746:	4819      	ldr	r0, [pc, #100]	@ (80007ac <mount_fileSystem+0xf0>)
 8000748:	f7ff ff2a 	bl	80005a0 <myprintf>
                    fs_mounted = 1;
 800074c:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <mount_fileSystem+0xd4>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e00c      	b.n	800076e <mount_fileSystem+0xb2>
                } else {
                    myprintf("Remounting failed. Error (%i)\r\n", fres);
 8000754:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000758:	4619      	mov	r1, r3
 800075a:	4815      	ldr	r0, [pc, #84]	@ (80007b0 <mount_fileSystem+0xf4>)
 800075c:	f7ff ff20 	bl	80005a0 <myprintf>
 8000760:	e005      	b.n	800076e <mount_fileSystem+0xb2>
                }
            } else {
                myprintf("Formatting failed. Error (%i)\r\n", fres);
 8000762:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000766:	4619      	mov	r1, r3
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <mount_fileSystem+0xf8>)
 800076a:	f7ff ff19 	bl	80005a0 <myprintf>
            }
        }
        sd_cs_high();
 800076e:	f7ff ff99 	bl	80006a4 <sd_cs_high>
        while (1);
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <mount_fileSystem+0xb6>
    } else {
        fs_mounted = 1;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <mount_fileSystem+0xd4>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
        myprintf("Filesystem mounted successfully.\r\n");
 800077c:	480b      	ldr	r0, [pc, #44]	@ (80007ac <mount_fileSystem+0xf0>)
 800077e:	f7ff ff0f 	bl	80005a0 <myprintf>
    }

    sd_cs_high();
 8000782:	f7ff ff8f 	bl	80006a4 <sd_cs_high>

    return FR_OK;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3768      	adds	r7, #104	@ 0x68
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200003d0 	.word	0x200003d0
 8000794:	0800c7d4 	.word	0x0800c7d4
 8000798:	0800c754 	.word	0x0800c754
 800079c:	200001a0 	.word	0x200001a0
 80007a0:	0800c7f4 	.word	0x0800c7f4
 80007a4:	0800c80c 	.word	0x0800c80c
 80007a8:	0800c84c 	.word	0x0800c84c
 80007ac:	0800c880 	.word	0x0800c880
 80007b0:	0800c8a4 	.word	0x0800c8a4
 80007b4:	0800c8c4 	.word	0x0800c8c4

080007b8 <unmount_fileSystem>:

FRESULT unmount_fileSystem(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
    if (!fs_mounted) {
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <unmount_fileSystem+0x5c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <unmount_fileSystem+0x18>
        myprintf("Filesystem not mounted, nothing to unmount.\r\n");
 80007c6:	4814      	ldr	r0, [pc, #80]	@ (8000818 <unmount_fileSystem+0x60>)
 80007c8:	f7ff feea 	bl	80005a0 <myprintf>
        return FR_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e01d      	b.n	800080c <unmount_fileSystem+0x54>
    }

    sd_cs_low();
 80007d0:	f7ff ff5c 	bl	800068c <sd_cs_low>

    FRESULT fres = f_mount(NULL, "", 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	4911      	ldr	r1, [pc, #68]	@ (800081c <unmount_fileSystem+0x64>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f008 ff77 	bl	80096cc <f_mount>
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    if (fres != FR_OK) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d008      	beq.n	80007fa <unmount_fileSystem+0x42>
        myprintf("f_mount(NULL) error (%i)\r\n", fres);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <unmount_fileSystem+0x68>)
 80007ee:	f7ff fed7 	bl	80005a0 <myprintf>
        sd_cs_high();
 80007f2:	f7ff ff57 	bl	80006a4 <sd_cs_high>
        return fres;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	e008      	b.n	800080c <unmount_fileSystem+0x54>
    }

    fs_mounted = 0;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <unmount_fileSystem+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
    myprintf("Filesystem unmounted successfully.\r\n");
 8000800:	4808      	ldr	r0, [pc, #32]	@ (8000824 <unmount_fileSystem+0x6c>)
 8000802:	f7ff fecd 	bl	80005a0 <myprintf>

    sd_cs_high();
 8000806:	f7ff ff4d 	bl	80006a4 <sd_cs_high>

    return FR_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200003d0 	.word	0x200003d0
 8000818:	0800c8e4 	.word	0x0800c8e4
 800081c:	0800c754 	.word	0x0800c754
 8000820:	0800c914 	.word	0x0800c914
 8000824:	0800c930 	.word	0x0800c930

08000828 <get_modifier_flag>:
int usbInit = 0;
char *menuUsb[2] = {"Attack", "Select File"};
int selectedFileUSB = 0;
int menuInitializedUSB = 0;

uint8_t get_modifier_flag(const char *mod) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    if (strcmp(mod, "CTRL") == 0) return 0x01;
 8000830:	4914      	ldr	r1, [pc, #80]	@ (8000884 <get_modifier_flag+0x5c>)
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff fcd4 	bl	80001e0 <strcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <get_modifier_flag+0x1a>
 800083e:	2301      	movs	r3, #1
 8000840:	e01b      	b.n	800087a <get_modifier_flag+0x52>
    if (strcmp(mod, "SHIFT") == 0) return 0x02;
 8000842:	4911      	ldr	r1, [pc, #68]	@ (8000888 <get_modifier_flag+0x60>)
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fccb 	bl	80001e0 <strcmp>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <get_modifier_flag+0x2c>
 8000850:	2302      	movs	r3, #2
 8000852:	e012      	b.n	800087a <get_modifier_flag+0x52>
    if (strcmp(mod, "ALT") == 0) return 0x04;
 8000854:	490d      	ldr	r1, [pc, #52]	@ (800088c <get_modifier_flag+0x64>)
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fcc2 	bl	80001e0 <strcmp>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <get_modifier_flag+0x3e>
 8000862:	2304      	movs	r3, #4
 8000864:	e009      	b.n	800087a <get_modifier_flag+0x52>
    if (strcmp(mod, "GUI") == 0) return 0x08;
 8000866:	490a      	ldr	r1, [pc, #40]	@ (8000890 <get_modifier_flag+0x68>)
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fcb9 	bl	80001e0 <strcmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <get_modifier_flag+0x50>
 8000874:	2308      	movs	r3, #8
 8000876:	e000      	b.n	800087a <get_modifier_flag+0x52>
    return 0x00;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	0800c96c 	.word	0x0800c96c
 8000888:	0800c974 	.word	0x0800c974
 800088c:	0800c97c 	.word	0x0800c97c
 8000890:	0800c980 	.word	0x0800c980

08000894 <parse_and_execute>:

int usbAttack = 0;
int btn_state_usb = 0;

void parse_and_execute(char *line) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    char *newline = strchr(line, '\n');
 800089c:	210a      	movs	r1, #10
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f00a ffb4 	bl	800b80c <strchr>
 80008a4:	6238      	str	r0, [r7, #32]
    if (newline) *newline = '\0';
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <parse_and_execute+0x1e>
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]

    if (strncmp(line, "DELAY ", 6) == 0) {
 80008b2:	2206      	movs	r2, #6
 80008b4:	4954      	ldr	r1, [pc, #336]	@ (8000a08 <parse_and_execute+0x174>)
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f00a ffd1 	bl	800b85e <strncmp>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10a      	bne.n	80008d8 <parse_and_execute+0x44>
        int delay_ms = atoi(line + 6);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3306      	adds	r3, #6
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a fbdc 	bl	800b084 <atoi>
 80008cc:	6178      	str	r0, [r7, #20]
        HAL_Delay(delay_ms);
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fe41 	bl	8001558 <HAL_Delay>
            send_key_with_modifier(modifier | keycode.MODIFIER, keycode.KEYCODE1);
        } else {
            printf("Неизвестная команда: %s\n", line);
        }
    }
}
 80008d6:	e093      	b.n	8000a00 <parse_and_execute+0x16c>
    } else if (strncmp(line, "HOLD ", 5) == 0) {
 80008d8:	2205      	movs	r2, #5
 80008da:	494c      	ldr	r1, [pc, #304]	@ (8000a0c <parse_and_execute+0x178>)
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f00a ffbe 	bl	800b85e <strncmp>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <parse_and_execute+0x62>
        const char *but = line + 5;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3305      	adds	r3, #5
 80008ec:	61bb      	str	r3, [r7, #24]
        hold_key(but);
 80008ee:	69b8      	ldr	r0, [r7, #24]
 80008f0:	f000 f99c 	bl	8000c2c <hold_key>
}
 80008f4:	e084      	b.n	8000a00 <parse_and_execute+0x16c>
    } else if (strncmp(line, "RELEASE ", 8) == 0) {
 80008f6:	2208      	movs	r2, #8
 80008f8:	4945      	ldr	r1, [pc, #276]	@ (8000a10 <parse_and_execute+0x17c>)
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f00a ffaf 	bl	800b85e <strncmp>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <parse_and_execute+0x78>
        release_key();
 8000906:	f000 f9ab 	bl	8000c60 <release_key>
}
 800090a:	e079      	b.n	8000a00 <parse_and_execute+0x16c>
    } else if (strncmp(line, "STRING ", 7) == 0) {
 800090c:	2207      	movs	r2, #7
 800090e:	4941      	ldr	r1, [pc, #260]	@ (8000a14 <parse_and_execute+0x180>)
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f00a ffa4 	bl	800b85e <strncmp>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d106      	bne.n	800092a <parse_and_execute+0x96>
        const char *text = line + 7;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3307      	adds	r3, #7
 8000920:	61fb      	str	r3, [r7, #28]
        send_command(text);
 8000922:	69f8      	ldr	r0, [r7, #28]
 8000924:	f000 f9dc 	bl	8000ce0 <send_command>
}
 8000928:	e06a      	b.n	8000a00 <parse_and_execute+0x16c>
    } else if (strncmp(line, "ENTER", 5) == 0) {
 800092a:	2205      	movs	r2, #5
 800092c:	493a      	ldr	r1, [pc, #232]	@ (8000a18 <parse_and_execute+0x184>)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f00a ff95 	bl	800b85e <strncmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <parse_and_execute+0xae>
        send_key(0x28);
 800093a:	2028      	movs	r0, #40	@ 0x28
 800093c:	f000 f952 	bl	8000be4 <send_key>
}
 8000940:	e05e      	b.n	8000a00 <parse_and_execute+0x16c>
    } else if (strncmp(line, "CMD", 3) == 0) {
 8000942:	2203      	movs	r2, #3
 8000944:	4935      	ldr	r1, [pc, #212]	@ (8000a1c <parse_and_execute+0x188>)
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f00a ff89 	bl	800b85e <strncmp>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <parse_and_execute+0xc4>
        open_cmd();
 8000952:	f000 fab3 	bl	8000ebc <open_cmd>
}
 8000956:	e053      	b.n	8000a00 <parse_and_execute+0x16c>
        char *token = strtok(line, " ");
 8000958:	4931      	ldr	r1, [pc, #196]	@ (8000a20 <parse_and_execute+0x18c>)
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f00a ff92 	bl	800b884 <strtok>
 8000960:	62f8      	str	r0, [r7, #44]	@ 0x2c
        uint8_t modifier = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        char *key = NULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (token) {
 800096c:	e02d      	b.n	80009ca <parse_and_execute+0x136>
            if (strcmp(token, "CTRL") == 0 || strcmp(token, "SHIFT") == 0 || strcmp(token, "ALT") == 0 || strcmp(token, "GUI") == 0) {
 800096e:	492d      	ldr	r1, [pc, #180]	@ (8000a24 <parse_and_execute+0x190>)
 8000970:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000972:	f7ff fc35 	bl	80001e0 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d014      	beq.n	80009a6 <parse_and_execute+0x112>
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <parse_and_execute+0x194>)
 800097e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000980:	f7ff fc2e 	bl	80001e0 <strcmp>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00d      	beq.n	80009a6 <parse_and_execute+0x112>
 800098a:	4928      	ldr	r1, [pc, #160]	@ (8000a2c <parse_and_execute+0x198>)
 800098c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800098e:	f7ff fc27 	bl	80001e0 <strcmp>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d006      	beq.n	80009a6 <parse_and_execute+0x112>
 8000998:	4925      	ldr	r1, [pc, #148]	@ (8000a30 <parse_and_execute+0x19c>)
 800099a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800099c:	f7ff fc20 	bl	80001e0 <strcmp>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10a      	bne.n	80009bc <parse_and_execute+0x128>
                modifier |= get_modifier_flag(token);
 80009a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80009a8:	f7ff ff3e 	bl	8000828 <get_modifier_flag>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80009b4:	4313      	orrs	r3, r2
 80009b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80009ba:	e001      	b.n	80009c0 <parse_and_execute+0x12c>
                key = token;
 80009bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
            token = strtok(NULL, " ");
 80009c0:	4917      	ldr	r1, [pc, #92]	@ (8000a20 <parse_and_execute+0x18c>)
 80009c2:	2000      	movs	r0, #0
 80009c4:	f00a ff5e 	bl	800b884 <strtok>
 80009c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        while (token) {
 80009ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1ce      	bne.n	800096e <parse_and_execute+0xda>
        if (key != NULL) {
 80009d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d010      	beq.n	80009f8 <parse_and_execute+0x164>
        	keyboardReportDes keycode = get_hid_code(key);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f9a5 	bl	8000d2c <get_hid_code>
            send_key_with_modifier(modifier | keycode.MODIFIER, keycode.KEYCODE1);
 80009e2:	7b3a      	ldrb	r2, [r7, #12]
 80009e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	7bba      	ldrb	r2, [r7, #14]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f949 	bl	8000c88 <send_key_with_modifier>
}
 80009f6:	e003      	b.n	8000a00 <parse_and_execute+0x16c>
            printf("Неизвестная команда: %s\n", line);
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <parse_and_execute+0x1a0>)
 80009fc:	f00a fd4a 	bl	800b494 <iprintf>
}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	@ 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	0800c984 	.word	0x0800c984
 8000a0c:	0800c98c 	.word	0x0800c98c
 8000a10:	0800c994 	.word	0x0800c994
 8000a14:	0800c9a0 	.word	0x0800c9a0
 8000a18:	0800c9a8 	.word	0x0800c9a8
 8000a1c:	0800c9b0 	.word	0x0800c9b0
 8000a20:	0800c9b4 	.word	0x0800c9b4
 8000a24:	0800c96c 	.word	0x0800c96c
 8000a28:	0800c974 	.word	0x0800c974
 8000a2c:	0800c97c 	.word	0x0800c97c
 8000a30:	0800c980 	.word	0x0800c980
 8000a34:	0800c9b8 	.word	0x0800c9b8

08000a38 <execute_script>:


void execute_script() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	f5ad 6d93 	sub.w	sp, sp, #1176	@ 0x498
 8000a3e:	af00      	add	r7, sp, #0
    FIL file;
    FRESULT res;
    char line[128];

    sd_cs_low();
 8000a40:	f7ff fe24 	bl	800068c <sd_cs_low>
    mount_fileSystem();
 8000a44:	f7ff fe3a 	bl	80006bc <mount_fileSystem>

	char fileName[64];
	snprintf(fileName, sizeof(fileName), "USB.txt");
 8000a48:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000a4c:	4a61      	ldr	r2, [pc, #388]	@ (8000bd4 <execute_script+0x19c>)
 8000a4e:	2140      	movs	r1, #64	@ 0x40
 8000a50:	4618      	mov	r0, r3
 8000a52:	f00a fd8f 	bl	800b574 <sniprintf>

    res = f_open(&file, fileName, FA_READ);
 8000a56:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8000a5a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 fe79 	bl	8009758 <f_open>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
    if (res != FR_OK) {
 8000a6c:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 8098 	beq.w	8000ba6 <execute_script+0x16e>
        printf("Не удалось открыть файл: %d\n", res);
 8000a76:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4856      	ldr	r0, [pc, #344]	@ (8000bd8 <execute_script+0x1a0>)
 8000a7e:	f00a fd09 	bl	800b494 <iprintf>
 8000a82:	e0a3      	b.n	8000bcc <execute_script+0x194>
        return;
    }

    while (f_gets(line, sizeof(line), &file)) {

        if (strncmp(line, "LOOP ", 5) == 0) {
 8000a84:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4954      	ldr	r1, [pc, #336]	@ (8000bdc <execute_script+0x1a4>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00a fee6 	bl	800b85e <strncmp>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f040 8081 	bne.w	8000b9c <execute_script+0x164>
            int loop_count = atoi(line + 5);  // �?спользуем 5, не 6 (без пробела в конце условия)
 8000a9a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000a9e:	3305      	adds	r3, #5
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00a faef 	bl	800b084 <atoi>
 8000aa6:	f8c7 0480 	str.w	r0, [r7, #1152]	@ 0x480
            char *loop_commands[100];
            int command_count = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

            while (f_gets(line, sizeof(line), &file)) {
 8000ab0:	e021      	b.n	8000af6 <execute_script+0xbe>
                if (strncmp(line, "ENDLOOP", 7) == 0) break;
 8000ab2:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	4949      	ldr	r1, [pc, #292]	@ (8000be0 <execute_script+0x1a8>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fecf 	bl	800b85e <strncmp>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d023      	beq.n	8000b0e <execute_script+0xd6>

                loop_commands[command_count] = strdup(line);
 8000ac6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00a feac 	bl	800b828 <strdup>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000ad8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8000adc:	f8d7 2494 	ldr.w	r2, [r7, #1172]	@ 0x494
 8000ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                command_count++;
 8000ae4:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8000ae8:	3301      	adds	r3, #1
 8000aea:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
                if (command_count >= 100) break;
 8000aee:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8000af2:	2b63      	cmp	r3, #99	@ 0x63
 8000af4:	dc0d      	bgt.n	8000b12 <execute_script+0xda>
            while (f_gets(line, sizeof(line), &file)) {
 8000af6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000afa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000afe:	2180      	movs	r1, #128	@ 0x80
 8000b00:	4618      	mov	r0, r3
 8000b02:	f009 fdf7 	bl	800a6f4 <f_gets>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1d2      	bne.n	8000ab2 <execute_script+0x7a>
 8000b0c:	e002      	b.n	8000b14 <execute_script+0xdc>
                if (strncmp(line, "ENDLOOP", 7) == 0) break;
 8000b0e:	bf00      	nop
 8000b10:	e000      	b.n	8000b14 <execute_script+0xdc>
                if (command_count >= 100) break;
 8000b12:	bf00      	nop
            }

            for (int i = 0; i < loop_count; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 8000b1a:	e01e      	b.n	8000b5a <execute_script+0x122>
                for (int j = 0; j < command_count; j++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 8000b22:	e00f      	b.n	8000b44 <execute_script+0x10c>
                    parse_and_execute(loop_commands[j]);
 8000b24:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000b28:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8000b2c:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8000b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fead 	bl	8000894 <parse_and_execute>
                for (int j = 0; j < command_count; j++) {
 8000b3a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 8000b3e:	3301      	adds	r3, #1
 8000b40:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 8000b44:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 8000b48:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbe9      	blt.n	8000b24 <execute_script+0xec>
            for (int i = 0; i < loop_count; i++) {
 8000b50:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 8000b54:	3301      	adds	r3, #1
 8000b56:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 8000b5a:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 8000b5e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbda      	blt.n	8000b1c <execute_script+0xe4>
                }
            }

            for (int j = 0; j < command_count; j++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8000b6c:	e00f      	b.n	8000b8e <execute_script+0x156>
                free(loop_commands[j]);
 8000b6e:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000b72:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8000b76:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00a fa8c 	bl	800b09c <free>
            for (int j = 0; j < command_count; j++) {
 8000b84:	f8d7 3488 	ldr.w	r3, [r7, #1160]	@ 0x488
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8000b8e:	f8d7 2488 	ldr.w	r2, [r7, #1160]	@ 0x488
 8000b92:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dbe9      	blt.n	8000b6e <execute_script+0x136>
 8000b9a:	e004      	b.n	8000ba6 <execute_script+0x16e>
            }

        } else {
            parse_and_execute(line);
 8000b9c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe77 	bl	8000894 <parse_and_execute>
    while (f_gets(line, sizeof(line), &file)) {
 8000ba6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000baa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f009 fd9f 	bl	800a6f4 <f_gets>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f47f af63 	bne.w	8000a84 <execute_script+0x4c>
        }
    }


    f_close(&file);
 8000bbe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f009 f93f 	bl	8009e46 <f_close>
    sd_cs_high();
 8000bc8:	f7ff fd6c 	bl	80006a4 <sd_cs_high>
}
 8000bcc:	f507 6793 	add.w	r7, r7, #1176	@ 0x498
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	0800c9e4 	.word	0x0800c9e4
 8000bd8:	0800c9ec 	.word	0x0800c9ec
 8000bdc:	0800ca20 	.word	0x0800ca20
 8000be0:	0800ca28 	.word	0x0800ca28

08000be4 <send_key>:
#include "keyboardik.h"
#include "usbd_hid.h"

keyboardReportDes HIDkeyBoard = {0, 0, 0, 0, 0, 0, 0, 0};

void send_key(uint8_t key) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    HIDkeyBoard.KEYCODE1 = key;
 8000bee:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <send_key+0x40>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	7093      	strb	r3, [r2, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	490b      	ldr	r1, [pc, #44]	@ (8000c24 <send_key+0x40>)
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <send_key+0x44>)
 8000bfa:	f005 fc8b 	bl	8006514 <USBD_HID_SendReport>
    HAL_Delay(50);
 8000bfe:	2032      	movs	r0, #50	@ 0x32
 8000c00:	f000 fcaa 	bl	8001558 <HAL_Delay>

    HIDkeyBoard.KEYCODE1 = 0x00;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <send_key+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	709a      	strb	r2, [r3, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	4905      	ldr	r1, [pc, #20]	@ (8000c24 <send_key+0x40>)
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <send_key+0x44>)
 8000c10:	f005 fc80 	bl	8006514 <USBD_HID_SendReport>
    HAL_Delay(50);
 8000c14:	2032      	movs	r0, #50	@ 0x32
 8000c16:	f000 fc9f 	bl	8001558 <HAL_Delay>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200006d4 	.word	0x200006d4
 8000c28:	20000788 	.word	0x20000788

08000c2c <hold_key>:

void hold_key(const char *key) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	keyboardReportDes but = get_hid_code(key);
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f876 	bl	8000d2c <get_hid_code>
    USBD_HID_SendReport(&hUsbDeviceFS, &but, sizeof(but));
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2208      	movs	r2, #8
 8000c46:	4619      	mov	r1, r3
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <hold_key+0x30>)
 8000c4a:	f005 fc63 	bl	8006514 <USBD_HID_SendReport>
    HAL_Delay(50);
 8000c4e:	2032      	movs	r0, #50	@ 0x32
 8000c50:	f000 fc82 	bl	8001558 <HAL_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000788 	.word	0x20000788

08000c60 <release_key>:

void release_key() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    HIDkeyBoard.KEYCODE1 = 0x00;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <release_key+0x20>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	709a      	strb	r2, [r3, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	4904      	ldr	r1, [pc, #16]	@ (8000c80 <release_key+0x20>)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <release_key+0x24>)
 8000c70:	f005 fc50 	bl	8006514 <USBD_HID_SendReport>
    HAL_Delay(50);
 8000c74:	2032      	movs	r0, #50	@ 0x32
 8000c76:	f000 fc6f 	bl	8001558 <HAL_Delay>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200006d4 	.word	0x200006d4
 8000c84:	20000788 	.word	0x20000788

08000c88 <send_key_with_modifier>:

void send_key_with_modifier(uint8_t modifier, uint8_t key) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
    HIDkeyBoard.MODIFIER = modifier;
 8000c98:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <send_key_with_modifier+0x50>)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	7013      	strb	r3, [r2, #0]
    HIDkeyBoard.KEYCODE1 = key;
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <send_key_with_modifier+0x50>)
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	7093      	strb	r3, [r2, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <send_key_with_modifier+0x50>)
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <send_key_with_modifier+0x54>)
 8000caa:	f005 fc33 	bl	8006514 <USBD_HID_SendReport>
    HAL_Delay(50);
 8000cae:	2032      	movs	r0, #50	@ 0x32
 8000cb0:	f000 fc52 	bl	8001558 <HAL_Delay>

    HIDkeyBoard.MODIFIER = 0x00;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <send_key_with_modifier+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    HIDkeyBoard.KEYCODE1 = 0x00;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <send_key_with_modifier+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	709a      	strb	r2, [r3, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &HIDkeyBoard, sizeof(HIDkeyBoard));
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	4905      	ldr	r1, [pc, #20]	@ (8000cd8 <send_key_with_modifier+0x50>)
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <send_key_with_modifier+0x54>)
 8000cc6:	f005 fc25 	bl	8006514 <USBD_HID_SendReport>
    HAL_Delay(50);
 8000cca:	2032      	movs	r0, #50	@ 0x32
 8000ccc:	f000 fc44 	bl	8001558 <HAL_Delay>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200006d4 	.word	0x200006d4
 8000cdc:	20000788 	.word	0x20000788

08000ce0 <send_command>:

void send_command(const char* command) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    char ch_str[2] = {0, 0};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	82bb      	strh	r3, [r7, #20]

    while (*command) {
 8000cec:	e015      	b.n	8000d1a <send_command+0x3a>
        ch_str[0] = *command++;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	753b      	strb	r3, [r7, #20]
        keyboardReportDes k = get_hid_code(ch_str);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	f107 0214 	add.w	r2, r7, #20
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f812 	bl	8000d2c <get_hid_code>

        if (k.KEYCODE1) {
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <send_command+0x3a>
            send_key_with_modifier(k.MODIFIER, k.KEYCODE1);
 8000d0e:	7b3b      	ldrb	r3, [r7, #12]
 8000d10:	7bba      	ldrb	r2, [r7, #14]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ffb7 	bl	8000c88 <send_key_with_modifier>
    while (*command) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1e5      	bne.n	8000cee <send_command+0xe>
        }
    }
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <get_hid_code>:

keyboardReportDes get_hid_code(char *ch) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	keyboardReportDes key = {0, 0, 0, 0, 0, 0, 0, 0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]

	if (strlen(ch) == 1) {
 8000d40:	6838      	ldr	r0, [r7, #0]
 8000d42:	f7ff fa57 	bl	80001f4 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	f040 80a0 	bne.w	8000e8e <get_hid_code+0x162>
		char c = ch[0];
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	75fb      	strb	r3, [r7, #23]
		if (c >= 'a' && c <= 'z') {
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	2b60      	cmp	r3, #96	@ 0x60
 8000d58:	d907      	bls.n	8000d6a <get_hid_code+0x3e>
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	2b7a      	cmp	r3, #122	@ 0x7a
 8000d5e:	d804      	bhi.n	8000d6a <get_hid_code+0x3e>
			key.KEYCODE1 = 0x04 + (c - 'a');
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	3b5d      	subs	r3, #93	@ 0x5d
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	73bb      	strb	r3, [r7, #14]
 8000d68:	e09a      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c >= 'A' && c <= 'Z') {
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	2b40      	cmp	r3, #64	@ 0x40
 8000d6e:	d909      	bls.n	8000d84 <get_hid_code+0x58>
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	2b5a      	cmp	r3, #90	@ 0x5a
 8000d74:	d806      	bhi.n	8000d84 <get_hid_code+0x58>
			key.KEYCODE1 = 0x04 + (c - 'A');
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	3b3d      	subs	r3, #61	@ 0x3d
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	73bb      	strb	r3, [r7, #14]
			key.MODIFIER = 0x02;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	733b      	strb	r3, [r7, #12]
 8000d82:	e08d      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c >= '1' && c <= '9') {
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	2b30      	cmp	r3, #48	@ 0x30
 8000d88:	d907      	bls.n	8000d9a <get_hid_code+0x6e>
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b39      	cmp	r3, #57	@ 0x39
 8000d8e:	d804      	bhi.n	8000d9a <get_hid_code+0x6e>
			key.KEYCODE1 = 0x1E + (c - '1');
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	3b13      	subs	r3, #19
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	e082      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '0') {
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	2b30      	cmp	r3, #48	@ 0x30
 8000d9e:	d102      	bne.n	8000da6 <get_hid_code+0x7a>
			key.KEYCODE1 = 0x27;
 8000da0:	2327      	movs	r3, #39	@ 0x27
 8000da2:	73bb      	strb	r3, [r7, #14]
 8000da4:	e07c      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '\n') {
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
 8000da8:	2b0a      	cmp	r3, #10
 8000daa:	d102      	bne.n	8000db2 <get_hid_code+0x86>
			key.KEYCODE1 = 0x28;
 8000dac:	2328      	movs	r3, #40	@ 0x28
 8000dae:	73bb      	strb	r3, [r7, #14]
 8000db0:	e076      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == ' ') {
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	d102      	bne.n	8000dbe <get_hid_code+0x92>
			key.KEYCODE1 = 0x2C;
 8000db8:	232c      	movs	r3, #44	@ 0x2c
 8000dba:	73bb      	strb	r3, [r7, #14]
 8000dbc:	e070      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '=') {
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	2b3d      	cmp	r3, #61	@ 0x3d
 8000dc2:	d102      	bne.n	8000dca <get_hid_code+0x9e>
			key.KEYCODE1 = 0x2E;
 8000dc4:	232e      	movs	r3, #46	@ 0x2e
 8000dc6:	73bb      	strb	r3, [r7, #14]
 8000dc8:	e06a      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '/') {
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dce:	d102      	bne.n	8000dd6 <get_hid_code+0xaa>
			key.KEYCODE1 = 0x38;
 8000dd0:	2338      	movs	r3, #56	@ 0x38
 8000dd2:	73bb      	strb	r3, [r7, #14]
 8000dd4:	e064      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '.') {
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dda:	d102      	bne.n	8000de2 <get_hid_code+0xb6>
			key.KEYCODE1 = 0x37;
 8000ddc:	2337      	movs	r3, #55	@ 0x37
 8000dde:	73bb      	strb	r3, [r7, #14]
 8000de0:	e05e      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '\'') {
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	2b27      	cmp	r3, #39	@ 0x27
 8000de6:	d102      	bne.n	8000dee <get_hid_code+0xc2>
			key.KEYCODE1 = 0x34;
 8000de8:	2334      	movs	r3, #52	@ 0x34
 8000dea:	73bb      	strb	r3, [r7, #14]
 8000dec:	e058      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '!') {
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	2b21      	cmp	r3, #33	@ 0x21
 8000df2:	d104      	bne.n	8000dfe <get_hid_code+0xd2>
			key.KEYCODE1 = 0x1E; key.MODIFIER = 0x02;
 8000df4:	231e      	movs	r3, #30
 8000df6:	73bb      	strb	r3, [r7, #14]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	733b      	strb	r3, [r7, #12]
 8000dfc:	e050      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '@') {
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	2b40      	cmp	r3, #64	@ 0x40
 8000e02:	d104      	bne.n	8000e0e <get_hid_code+0xe2>
			key.KEYCODE1 = 0x1F; key.MODIFIER = 0x02;
 8000e04:	231f      	movs	r3, #31
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	2302      	movs	r3, #2
 8000e0a:	733b      	strb	r3, [r7, #12]
 8000e0c:	e048      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '#') {
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	2b23      	cmp	r3, #35	@ 0x23
 8000e12:	d104      	bne.n	8000e1e <get_hid_code+0xf2>
			key.KEYCODE1 = 0x20; key.MODIFIER = 0x02;
 8000e14:	2320      	movs	r3, #32
 8000e16:	73bb      	strb	r3, [r7, #14]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	733b      	strb	r3, [r7, #12]
 8000e1c:	e040      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '$') {
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b24      	cmp	r3, #36	@ 0x24
 8000e22:	d104      	bne.n	8000e2e <get_hid_code+0x102>
			key.KEYCODE1 = 0x21; key.MODIFIER = 0x02;
 8000e24:	2321      	movs	r3, #33	@ 0x21
 8000e26:	73bb      	strb	r3, [r7, #14]
 8000e28:	2302      	movs	r3, #2
 8000e2a:	733b      	strb	r3, [r7, #12]
 8000e2c:	e038      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '%') {
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b25      	cmp	r3, #37	@ 0x25
 8000e32:	d104      	bne.n	8000e3e <get_hid_code+0x112>
			key.KEYCODE1 = 0x22; key.MODIFIER = 0x02;
 8000e34:	2322      	movs	r3, #34	@ 0x22
 8000e36:	73bb      	strb	r3, [r7, #14]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	733b      	strb	r3, [r7, #12]
 8000e3c:	e030      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '^') {
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	2b5e      	cmp	r3, #94	@ 0x5e
 8000e42:	d104      	bne.n	8000e4e <get_hid_code+0x122>
			key.KEYCODE1 = 0x23; key.MODIFIER = 0x02;
 8000e44:	2323      	movs	r3, #35	@ 0x23
 8000e46:	73bb      	strb	r3, [r7, #14]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	733b      	strb	r3, [r7, #12]
 8000e4c:	e028      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '&') {
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	2b26      	cmp	r3, #38	@ 0x26
 8000e52:	d104      	bne.n	8000e5e <get_hid_code+0x132>
			key.KEYCODE1 = 0x24; key.MODIFIER = 0x02;
 8000e54:	2324      	movs	r3, #36	@ 0x24
 8000e56:	73bb      	strb	r3, [r7, #14]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	e020      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '*') {
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e62:	d104      	bne.n	8000e6e <get_hid_code+0x142>
			key.KEYCODE1 = 0x25; key.MODIFIER = 0x02;
 8000e64:	2325      	movs	r3, #37	@ 0x25
 8000e66:	73bb      	strb	r3, [r7, #14]
 8000e68:	2302      	movs	r3, #2
 8000e6a:	733b      	strb	r3, [r7, #12]
 8000e6c:	e018      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == '(') {
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	2b28      	cmp	r3, #40	@ 0x28
 8000e72:	d104      	bne.n	8000e7e <get_hid_code+0x152>
			key.KEYCODE1 = 0x26; key.MODIFIER = 0x02;
 8000e74:	2326      	movs	r3, #38	@ 0x26
 8000e76:	73bb      	strb	r3, [r7, #14]
 8000e78:	2302      	movs	r3, #2
 8000e7a:	733b      	strb	r3, [r7, #12]
 8000e7c:	e010      	b.n	8000ea0 <get_hid_code+0x174>
		} else if (c == ')') {
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	2b29      	cmp	r3, #41	@ 0x29
 8000e82:	d10d      	bne.n	8000ea0 <get_hid_code+0x174>
			key.KEYCODE1 = 0x27; key.MODIFIER = 0x02;
 8000e84:	2327      	movs	r3, #39	@ 0x27
 8000e86:	73bb      	strb	r3, [r7, #14]
 8000e88:	2302      	movs	r3, #2
 8000e8a:	733b      	strb	r3, [r7, #12]
 8000e8c:	e008      	b.n	8000ea0 <get_hid_code+0x174>
		}
	} else if (strcmp(ch, "esc") == 0) {
 8000e8e:	490a      	ldr	r1, [pc, #40]	@ (8000eb8 <get_hid_code+0x18c>)
 8000e90:	6838      	ldr	r0, [r7, #0]
 8000e92:	f7ff f9a5 	bl	80001e0 <strcmp>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <get_hid_code+0x174>
		key.KEYCODE1 = 0x29;
 8000e9c:	2329      	movs	r3, #41	@ 0x29
 8000e9e:	73bb      	strb	r3, [r7, #14]
	}

	return key;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	cb03      	ldmia	r3!, {r0, r1}
 8000eaa:	6010      	str	r0, [r2, #0]
 8000eac:	6051      	str	r1, [r2, #4]
}
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800ca30 	.word	0x0800ca30

08000ebc <open_cmd>:


void open_cmd() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    send_key_with_modifier(0x08, 0x15);
 8000ec0:	2115      	movs	r1, #21
 8000ec2:	2008      	movs	r0, #8
 8000ec4:	f7ff fee0 	bl	8000c88 <send_key_with_modifier>
    HAL_Delay(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ecc:	f000 fb44 	bl	8001558 <HAL_Delay>

    send_key(0x06);
 8000ed0:	2006      	movs	r0, #6
 8000ed2:	f7ff fe87 	bl	8000be4 <send_key>
    send_key(0x10);
 8000ed6:	2010      	movs	r0, #16
 8000ed8:	f7ff fe84 	bl	8000be4 <send_key>
    send_key(0x07);
 8000edc:	2007      	movs	r0, #7
 8000ede:	f7ff fe81 	bl	8000be4 <send_key>
    send_key(0x28);
 8000ee2:	2028      	movs	r0, #40	@ 0x28
 8000ee4:	f7ff fe7e 	bl	8000be4 <send_key>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f000 fabf 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f81d 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 f8b9 	bl	8001070 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000efe:	f000 f881 	bl	8001004 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000f02:	f004 fc07 	bl	8005714 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000f06:	f009 fc8f 	bl	800a828 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  FRESULT res;
    sd_cs_low();
 8000f0a:	f7ff fbbf 	bl	800068c <sd_cs_low>
	res = check_and_mount_filesystem();
 8000f0e:	f7ff fb8d 	bl	800062c <check_and_mount_filesystem>
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	if (res != FR_OK) {
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <main+0x36>
		printf("Filesystem mount failed.\n");
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <main+0x44>)
 8000f1e:	f00a fb21 	bl	800b564 <puts>
	}

	unmount_fileSystem();
 8000f22:	f7ff fc49 	bl	80007b8 <unmount_fileSystem>
	sd_cs_high();
 8000f26:	f7ff fbbd 	bl	80006a4 <sd_cs_high>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	execute_script();
 8000f2a:	f7ff fd85 	bl	8000a38 <execute_script>
 8000f2e:	e7fc      	b.n	8000f2a <main+0x3e>
 8000f30:	0800ca34 	.word	0x0800ca34

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	@ 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	@ 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00a fc5a 	bl	800b7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <SystemClock_Config+0xc8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	4a26      	ldr	r2, [pc, #152]	@ (8000ffc <SystemClock_Config+0xc8>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <SystemClock_Config+0xc8>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <SystemClock_Config+0xcc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a20      	ldr	r2, [pc, #128]	@ (8001000 <SystemClock_Config+0xcc>)
 8000f7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <SystemClock_Config+0xcc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000fa4:	230d      	movs	r3, #13
 8000fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fa8:	2348      	movs	r3, #72	@ 0x48
 8000faa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 ffdb 	bl	8002f74 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc4:	f000 f8a4 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fa3d 	bl	8003464 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ff0:	f000 f88e 	bl	8001110 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3750      	adds	r7, #80	@ 0x50
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <MX_SPI1_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	@ (800106c <MX_SPI1_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <MX_SPI1_Init+0x64>)
 8001056:	f002 fbbd 	bl	80037d4 <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 f856 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200006dc 	.word	0x200006dc
 800106c:	40013000 	.word	0x40013000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <MX_GPIO_Init+0x98>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <MX_GPIO_Init+0x98>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <MX_GPIO_Init+0x98>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <MX_GPIO_Init+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a17      	ldr	r2, [pc, #92]	@ (8001108 <MX_GPIO_Init+0x98>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_GPIO_Init+0x98>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_GPIO_Init+0x98>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <MX_GPIO_Init+0x98>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_GPIO_Init+0x98>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2101      	movs	r1, #1
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <MX_GPIO_Init+0x9c>)
 80010e0:	f000 fcf4 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_GPIO_Init+0x9c>)
 80010fc:	f000 fb62 	bl	80017c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <HAL_MspInit+0x4c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_MspInit+0x4c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <HAL_SPI_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 8001198:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23e0      	movs	r3, #224	@ 0xe0
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011e2:	f000 faef 	bl	80017c4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	@ 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f961 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <OTG_FS_IRQHandler+0x10>)
 8001262:	f000 fd90 	bl	8001d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000c64 	.word	0x20000c64

08001270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return 1;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_kill>:

int _kill(int pid, int sig)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128a:	f00a fbad 	bl	800b9e8 <__errno>
 800128e:	4603      	mov	r3, r0
 8001290:	2216      	movs	r2, #22
 8001292:	601a      	str	r2, [r3, #0]
  return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_exit>:

void _exit (int status)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffe7 	bl	8001280 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b2:	bf00      	nop
 80012b4:	e7fd      	b.n	80012b2 <_exit+0x12>

080012b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e00a      	b.n	80012de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c8:	f3af 8000 	nop.w
 80012cc:	4601      	mov	r1, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60ba      	str	r2, [r7, #8]
 80012d4:	b2ca      	uxtb	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbf0      	blt.n	80012c8 <_read+0x12>
  }

  return len;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e009      	b.n	8001316 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf1      	blt.n	8001302 <_write+0x12>
  }
  return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_close>:

int _close(int file)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001350:	605a      	str	r2, [r3, #4]
  return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_isatty>:

int _isatty(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f00a fb12 	bl	800b9e8 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20020000 	.word	0x20020000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	20000734 	.word	0x20000734
 80013f8:	200012a8 	.word	0x200012a8

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001458 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001424:	f7ff ffea 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	@ (800146c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f00a fad1 	bl	800b9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fd4b 	bl	8000eec <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001464:	0800cd7c 	.word	0x0800cd7c
  ldr r2, =_sbss
 8001468:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800146c:	200012a8 	.word	0x200012a8

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f94f 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fe38 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f967 	bl	80017aa <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f92f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	20000738 	.word	0x20000738

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000738 	.word	0x20000738

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	@ (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e159      	b.n	8001a94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8148 	bne.w	8001a8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d005      	beq.n	8001816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	2b02      	cmp	r3, #2
 8001814:	d130      	bne.n	8001878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 0201 	and.w	r2, r3, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d017      	beq.n	80018b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a2 	beq.w	8001a8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b57      	ldr	r3, [pc, #348]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a56      	ldr	r2, [pc, #344]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b54      	ldr	r3, [pc, #336]	@ (8001aac <HAL_GPIO_Init+0x2e8>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001966:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a49      	ldr	r2, [pc, #292]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0x202>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a48      	ldr	r2, [pc, #288]	@ (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x1fe>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a47      	ldr	r2, [pc, #284]	@ (8001abc <HAL_GPIO_Init+0x2f8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x1fa>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a46      	ldr	r2, [pc, #280]	@ (8001ac0 <HAL_GPIO_Init+0x2fc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x1f6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a45      	ldr	r2, [pc, #276]	@ (8001ac4 <HAL_GPIO_Init+0x300>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x1f2>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e008      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c6:	2300      	movs	r3, #0
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4093      	lsls	r3, r2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d8:	4935      	ldr	r1, [pc, #212]	@ (8001ab0 <HAL_GPIO_Init+0x2ec>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a88:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	f67f aea2 	bls.w	80017e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af02      	add	r7, sp, #8
 8001b04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e101      	b.n	8001d14 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f008 ffb2 	bl	800aa94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2203      	movs	r2, #3
 8001b34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b3e:	d102      	bne.n	8001b46 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fbab 	bl	80042a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7c1a      	ldrb	r2, [r3, #16]
 8001b58:	f88d 2000 	strb.w	r2, [sp]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b60:	f002 fa8a 	bl	8004078 <USB_CoreInit>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0ce      	b.n	8001d14 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fba3 	bl	80042c8 <USB_SetCurrentMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0bf      	b.n	8001d14 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e04a      	b.n	8001c30 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3315      	adds	r3, #21
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	b298      	uxth	r0, r3
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	332e      	adds	r3, #46	@ 0x2e
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	3318      	adds	r3, #24
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	331c      	adds	r3, #28
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3320      	adds	r3, #32
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	3324      	adds	r3, #36	@ 0x24
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3af      	bcc.n	8001b9a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e044      	b.n	8001cca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	791b      	ldrb	r3, [r3, #4]
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3b5      	bcc.n	8001c40 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7c1a      	ldrb	r2, [r3, #16]
 8001cdc:	f88d 2000 	strb.w	r2, [sp]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce4:	f002 fb3c 	bl	8004360 <USB_DevInit>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00c      	b.n	8001d14 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fb86 	bl	800541e <USB_DevDisconnect>

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_PCD_Start+0x1c>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e022      	b.n	8001d7e <HAL_PCD_Start+0x62>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fa8d 	bl	8004284 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb34 	bl	80053dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b08d      	sub	sp, #52	@ 0x34
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fbf2 	bl	8005586 <USB_GetMode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 848c 	bne.w	80026c2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fb56 	bl	8005460 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8482 	beq.w	80026c0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fb43 	bl	8005460 <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d107      	bne.n	8001df4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f002 0202 	and.w	r2, r2, #2
 8001df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fb31 	bl	8005460 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d161      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0210 	bic.w	r2, r2, #16
 8001e16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	0c5b      	lsrs	r3, r3, #17
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d124      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d035      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	6a38      	ldr	r0, [r7, #32]
 8001e64:	f003 f968 	bl	8005138 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e74:	441a      	add	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e86:	441a      	add	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	e016      	b.n	8001ebc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	0c5b      	lsrs	r3, r3, #17
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d110      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6a38      	ldr	r0, [r7, #32]
 8001ea6:	f003 f947 	bl	8005138 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb6:	441a      	add	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0210 	orr.w	r2, r2, #16
 8001eca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fac5 	bl	8005460 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001edc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001ee0:	f040 80a7 	bne.w	8002032 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 faca 	bl	8005486 <USB_ReadDevAllOutEpInterrupt>
 8001ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001ef4:	e099      	b.n	800202a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 808e 	beq.w	800201e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 faee 	bl	80054ee <USB_ReadDevOutEPInterrupt>
 8001f12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fe8c 	bl	8002c50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2308      	movs	r3, #8
 8001f52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 ff62 	bl	8002e20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f72:	461a      	mov	r2, r3
 8001f74:	2310      	movs	r3, #16
 8001f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d030      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8a:	2b80      	cmp	r3, #128	@ 0x80
 8001f8c:	d109      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fa0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	78db      	ldrb	r3, [r3, #3]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f008 fe5d 	bl	800ac8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002016:	461a      	mov	r2, r3
 8002018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800201c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800202a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	f47f af62 	bne.w	8001ef6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fa12 	bl	8005460 <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002042:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002046:	f040 80db 	bne.w	8002200 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fa33 	bl	80054ba <USB_ReadDevAllInEpInterrupt>
 8002054:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800205a:	e0cd      	b.n	80021f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80c2 	beq.w	80021ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f003 fa59 	bl	800552a <USB_ReadDevInEPInterrupt>
 8002078:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d057      	beq.n	8002134 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	2201      	movs	r2, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	69f9      	ldr	r1, [r7, #28]
 80020a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020a4:	4013      	ands	r3, r2
 80020a6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020b4:	461a      	mov	r2, r3
 80020b6:	2301      	movs	r3, #1
 80020b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d132      	bne.n	8002128 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3320      	adds	r3, #32
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4403      	add	r3, r0
 80020e2:	331c      	adds	r3, #28
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4419      	add	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4403      	add	r3, r0
 80020f6:	3320      	adds	r3, #32
 80020f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d113      	bne.n	8002128 <HAL_PCD_IRQHandler+0x3a2>
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3324      	adds	r3, #36	@ 0x24
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002120:	461a      	mov	r2, r3
 8002122:	2101      	movs	r1, #1
 8002124:	f003 fa60 	bl	80055e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f008 fd31 	bl	800ab96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800214a:	461a      	mov	r2, r3
 800214c:	2308      	movs	r3, #8
 800214e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002166:	461a      	mov	r2, r3
 8002168:	2310      	movs	r3, #16
 800216a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002182:	461a      	mov	r2, r3
 8002184:	2340      	movs	r3, #64	@ 0x40
 8002186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d023      	beq.n	80021da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002192:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002194:	6a38      	ldr	r0, [r7, #32]
 8002196:	f002 fa47 	bl	8004628 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800219a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3310      	adds	r3, #16
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	78db      	ldrb	r3, [r3, #3]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f008 fd74 	bl	800acb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021d4:	461a      	mov	r2, r3
 80021d6:	2302      	movs	r3, #2
 80021d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fca5 	bl	8002b36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	3301      	adds	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80021f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f af2e 	bne.w	800205c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f92b 	bl	8005460 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002214:	d122      	bne.n	800225c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800223c:	2100      	movs	r1, #0
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fe8c 	bl	8002f5c <HAL_PCDEx_LPM_Callback>
 8002244:	e002      	b.n	800224c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f008 fd12 	bl	800ac70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800225a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 f8fd 	bl	8005460 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002270:	d112      	bne.n	8002298 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f008 fcce 	bl	800ac24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002296:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 f8df 	bl	8005460 <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ac:	f040 80b7 	bne.w	800241e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2110      	movs	r1, #16
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 f9ac 	bl	8004628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022d4:	e046      	b.n	8002364 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022e2:	461a      	mov	r2, r3
 80022e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80022e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002304:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800231c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800232e:	0151      	lsls	r1, r2, #5
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	440a      	add	r2, r1
 8002334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002338:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800233c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800233e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234e:	0151      	lsls	r1, r2, #5
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	440a      	add	r2, r1
 8002354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002358:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800235c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	3301      	adds	r3, #1
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	791b      	ldrb	r3, [r3, #4]
 8002368:	461a      	mov	r2, r3
 800236a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236c:	4293      	cmp	r3, r2
 800236e:	d3b2      	bcc.n	80022d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800237e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002382:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7bdb      	ldrb	r3, [r3, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d016      	beq.n	80023ba <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800239c:	f043 030b 	orr.w	r3, r3, #11
 80023a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023b2:	f043 030b 	orr.w	r3, r3, #11
 80023b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b8:	e015      	b.n	80023e6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023cc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80023d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023e0:	f043 030b 	orr.w	r3, r3, #11
 80023e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80023f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002408:	461a      	mov	r2, r3
 800240a:	f003 f8ed 	bl	80055e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800241c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 f81c 	bl	8005460 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002432:	d123      	bne.n	800247c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 f8b2 	bl	80055a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f969 	bl	800471a <USB_GetDevSpeed>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681c      	ldr	r4, [r3, #0]
 8002454:	f001 f9b2 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8002458:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800245e:	461a      	mov	r2, r3
 8002460:	4620      	mov	r0, r4
 8002462:	f001 fe6d 	bl	8004140 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f008 fbbd 	bl	800abe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800247a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f002 ffed 	bl	8005460 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b08      	cmp	r3, #8
 800248e:	d10a      	bne.n	80024a6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f008 fb9a 	bl	800abca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f002 0208 	and.w	r2, r2, #8
 80024a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 ffd8 	bl	8005460 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b6:	2b80      	cmp	r3, #128	@ 0x80
 80024b8:	d123      	bne.n	8002502 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c6:	2301      	movs	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ca:	e014      	b.n	80024f6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 faf2 	bl	8002ad4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	3301      	adds	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	4293      	cmp	r3, r2
 8002500:	d3e4      	bcc.n	80024cc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 ffaa 	bl	8005460 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002516:	d13c      	bne.n	8002592 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
 800251c:	e02b      	b.n	8002576 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3318      	adds	r3, #24
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d115      	bne.n	8002570 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002544:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	da12      	bge.n	8002570 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3317      	adds	r3, #23
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fab2 	bl	8002ad4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	3301      	adds	r3, #1
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	4293      	cmp	r3, r2
 8002580:	d3cd      	bcc.n	800251e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 ff62 	bl	8005460 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a6:	d156      	bne.n	8002656 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025a8:	2301      	movs	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ac:	e045      	b.n	800263a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d12e      	bne.n	8002634 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da2b      	bge.n	8002634 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	0c1a      	lsrs	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80025e6:	4053      	eors	r3, r2
 80025e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d121      	bne.n	8002634 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800262c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002630:	6053      	str	r3, [r2, #4]
            break;
 8002632:	e008      	b.n	8002646 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	3301      	adds	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	4293      	cmp	r3, r2
 8002644:	d3b3      	bcc.n	80025ae <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 ff00 	bl	8005460 <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266a:	d10a      	bne.n	8002682 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f008 fb31 	bl	800acd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 feea 	bl	8005460 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d115      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f008 fb21 	bl	800acf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e000      	b.n	80026c2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80026c0:	bf00      	nop
    }
  }
}
 80026c2:	3734      	adds	r7, #52	@ 0x34
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}

080026c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_PCD_SetAddress+0x1a>
 80026de:	2302      	movs	r3, #2
 80026e0:	e012      	b.n	8002708 <HAL_PCD_SetAddress+0x40>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fe49 	bl	8005390 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	70fb      	strb	r3, [r7, #3]
 8002722:	460b      	mov	r3, r1
 8002724:	803b      	strh	r3, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800272e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002732:	2b00      	cmp	r3, #0
 8002734:	da0f      	bge.n	8002756 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	3310      	adds	r3, #16
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	705a      	strb	r2, [r3, #1]
 8002754:	e00f      	b.n	8002776 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	3304      	adds	r3, #4
 800276e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002782:	883b      	ldrh	r3, [r7, #0]
 8002784:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	78ba      	ldrb	r2, [r7, #2]
 8002790:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027a4:	78bb      	ldrb	r3, [r7, #2]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d102      	bne.n	80027b0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_PCD_EP_Open+0xae>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e00e      	b.n	80027dc <HAL_PCD_EP_Open+0xcc>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68f9      	ldr	r1, [r7, #12]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 ffc9 	bl	8004764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80027da:	7afb      	ldrb	r3, [r7, #11]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da0f      	bge.n	8002818 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	3310      	adds	r3, #16
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	705a      	strb	r2, [r3, #1]
 8002816:	e00f      	b.n	8002838 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_PCD_EP_Close+0x6e>
 800284e:	2302      	movs	r3, #2
 8002850:	e00e      	b.n	8002870 <HAL_PCD_EP_Close+0x8c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 f807 	bl	8004874 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	460b      	mov	r3, r1
 8002886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2200      	movs	r2, #0
 80028b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	799b      	ldrb	r3, [r3, #6]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	799b      	ldrb	r3, [r3, #6]
 80028dc:	461a      	mov	r2, r3
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	f002 f8a4 	bl	8004a2c <USB_EPStartXfer>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	460b      	mov	r3, r1
 80028fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	3310      	adds	r3, #16
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2201      	movs	r2, #1
 800292c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	b2da      	uxtb	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	799b      	ldrb	r3, [r3, #6]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	799b      	ldrb	r3, [r3, #6]
 8002950:	461a      	mov	r2, r3
 8002952:	6979      	ldr	r1, [r7, #20]
 8002954:	f002 f86a 	bl	8004a2c <USB_EPStartXfer>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	7912      	ldrb	r2, [r2, #4]
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e04f      	b.n	8002a20 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002984:	2b00      	cmp	r3, #0
 8002986:	da0f      	bge.n	80029a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 020f 	and.w	r2, r3, #15
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3310      	adds	r3, #16
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	705a      	strb	r2, [r3, #1]
 80029a6:	e00d      	b.n	80029c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	3304      	adds	r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_PCD_EP_SetStall+0x82>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e01d      	b.n	8002a20 <HAL_PCD_EP_SetStall+0xbe>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f002 fbf8 	bl	80051e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7999      	ldrb	r1, [r3, #6]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a10:	461a      	mov	r2, r3
 8002a12:	f002 fde9 	bl	80055e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	7912      	ldrb	r2, [r2, #4]
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e042      	b.n	8002acc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	da0f      	bge.n	8002a6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	705a      	strb	r2, [r3, #1]
 8002a6c:	e00f      	b.n	8002a8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 020f 	and.w	r2, r3, #15
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_PCD_EP_ClrStall+0x86>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e00e      	b.n	8002acc <HAL_PCD_EP_ClrStall+0xa4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fc01 	bl	80052c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da0c      	bge.n	8002b02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3310      	adds	r3, #16
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e00c      	b.n	8002b1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 020f 	and.w	r2, r3, #15
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 fa20 	bl	8004f68 <USB_EPStopXfer>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b08a      	sub	sp, #40	@ 0x28
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	3310      	adds	r3, #16
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d901      	bls.n	8002b6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06b      	b.n	8002c46 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d902      	bls.n	8002b8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3303      	adds	r3, #3
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b92:	e02a      	b.n	8002bea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d902      	bls.n	8002bb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68d9      	ldr	r1, [r3, #12]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f002 fa75 	bl	80050bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	441a      	add	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d809      	bhi.n	8002c14 <PCD_WriteEmptyTxFifo+0xde>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d203      	bcs.n	8002c14 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1bf      	bne.n	8002b94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d811      	bhi.n	8002c44 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	2201      	movs	r2, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	6939      	ldr	r1, [r7, #16]
 8002c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c40:	4013      	ands	r3, r2
 8002c42:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	333c      	adds	r3, #60	@ 0x3c
 8002c68:	3304      	adds	r3, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	799b      	ldrb	r3, [r3, #6]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d17b      	bne.n	8002d7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4a61      	ldr	r2, [pc, #388]	@ (8002e18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	f240 80b9 	bls.w	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80b3 	beq.w	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cb8:	6093      	str	r3, [r2, #8]
 8002cba:	e0a7      	b.n	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	6093      	str	r3, [r2, #8]
 8002cd8:	e098      	b.n	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 8093 	bne.w	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d90f      	bls.n	8002d0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0a:	6093      	str	r3, [r2, #8]
 8002d0c:	e07e      	b.n	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	1ad2      	subs	r2, r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d114      	bne.n	8002d70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	f002 fc44 	bl	80055e8 <USB_EP0_OutStart>
 8002d60:	e006      	b.n	8002d70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	441a      	add	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f007 fef2 	bl	800ab60 <HAL_PCD_DataOutStageCallback>
 8002d7c:	e046      	b.n	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4a26      	ldr	r2, [pc, #152]	@ (8002e1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d124      	bne.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	e032      	b.n	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f007 fec9 	bl	800ab60 <HAL_PCD_DataOutStageCallback>
 8002dce:	e01d      	b.n	8002e0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d114      	bne.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	f002 fbf4 	bl	80055e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f007 feaa 	bl	800ab60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	4f54300a 	.word	0x4f54300a
 8002e1c:	4f54310a 	.word	0x4f54310a

08002e20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	333c      	adds	r3, #60	@ 0x3c
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a15      	ldr	r2, [pc, #84]	@ (8002ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d90e      	bls.n	8002e74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f007 fe61 	bl	800ab3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d90c      	bls.n	8002e9c <PCD_EP_OutSetupPacket_int+0x7c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	799b      	ldrb	r3, [r3, #6]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d108      	bne.n	8002e9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e94:	461a      	mov	r2, r3
 8002e96:	2101      	movs	r1, #1
 8002e98:	f002 fba6 	bl	80055e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	4f54300a 	.word	0x4f54300a

08002eac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002eca:	883b      	ldrh	r3, [r7, #0]
 8002ecc:	0419      	lsls	r1, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ed8:	e028      	b.n	8002f2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e00d      	b.n	8002f0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	3340      	adds	r3, #64	@ 0x40
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4413      	add	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	3301      	adds	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3ec      	bcc.n	8002eee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f14:	883b      	ldrh	r3, [r7, #0]
 8002f16:	0418      	lsls	r0, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4302      	orrs	r2, r0
 8002f24:	3340      	adds	r3, #64	@ 0x40
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e267      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d075      	beq.n	800307e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f92:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b85      	ldr	r3, [pc, #532]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4b82      	ldr	r3, [pc, #520]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05b      	beq.n	800307c <HAL_RCC_OscConfig+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d157      	bne.n	800307c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e242      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x74>
 8002fda:	4b76      	ldr	r3, [pc, #472]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a75      	ldr	r2, [pc, #468]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x98>
 8002ff2:	4b70      	ldr	r3, [pc, #448]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6f      	ldr	r2, [pc, #444]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6c      	ldr	r2, [pc, #432]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 800300c:	4b69      	ldr	r3, [pc, #420]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a68      	ldr	r2, [pc, #416]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b66      	ldr	r3, [pc, #408]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a65      	ldr	r2, [pc, #404]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe fa88 	bl	8001540 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe fa84 	bl	8001540 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	@ 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e207      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b5b      	ldr	r3, [pc, #364]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xc0>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fa74 	bl	8001540 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fa70 	bl	8001540 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	@ 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1f3      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b51      	ldr	r3, [pc, #324]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0xe8>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800308a:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b47      	ldr	r3, [pc, #284]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b44      	ldr	r3, [pc, #272]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d116      	bne.n	80030dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	4b41      	ldr	r3, [pc, #260]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x152>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1c7      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c6:	4b3b      	ldr	r3, [pc, #236]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4937      	ldr	r1, [pc, #220]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	e03a      	b.n	8003152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	4b34      	ldr	r3, [pc, #208]	@ (80031b8 <HAL_RCC_OscConfig+0x244>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fa29 	bl	8001540 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f2:	f7fe fa25 	bl	8001540 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1a8      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	4b2b      	ldr	r3, [pc, #172]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4925      	ldr	r1, [pc, #148]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	e015      	b.n	8003152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCC_OscConfig+0x244>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fa08 	bl	8001540 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003134:	f7fe fa04 	bl	8001540 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e187      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d036      	beq.n	80031cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003166:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <HAL_RCC_OscConfig+0x248>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fe f9e8 	bl	8001540 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003174:	f7fe f9e4 	bl	8001540 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e167      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_RCC_OscConfig+0x240>)
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x200>
 8003192:	e01b      	b.n	80031cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_RCC_OscConfig+0x248>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe f9d1 	bl	8001540 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a0:	e00e      	b.n	80031c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fe f9cd 	bl	8001540 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d907      	bls.n	80031c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e150      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	42470000 	.word	0x42470000
 80031bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	4b88      	ldr	r3, [pc, #544]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ea      	bne.n	80031a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8097 	beq.w	8003308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031de:	4b81      	ldr	r3, [pc, #516]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b7d      	ldr	r3, [pc, #500]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	4a7c      	ldr	r2, [pc, #496]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fa:	4b7a      	ldr	r3, [pc, #488]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b77      	ldr	r3, [pc, #476]	@ (80033e8 <HAL_RCC_OscConfig+0x474>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d118      	bne.n	8003248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b74      	ldr	r3, [pc, #464]	@ (80033e8 <HAL_RCC_OscConfig+0x474>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a73      	ldr	r2, [pc, #460]	@ (80033e8 <HAL_RCC_OscConfig+0x474>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe f98d 	bl	8001540 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322a:	f7fe f989 	bl	8001540 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e10c      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	4b6a      	ldr	r3, [pc, #424]	@ (80033e8 <HAL_RCC_OscConfig+0x474>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x2ea>
 8003250:	4b64      	ldr	r3, [pc, #400]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003254:	4a63      	ldr	r2, [pc, #396]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	@ 0x70
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x324>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x30c>
 8003266:	4b5f      	ldr	r3, [pc, #380]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	4a5e      	ldr	r2, [pc, #376]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6713      	str	r3, [r2, #112]	@ 0x70
 8003272:	4b5c      	ldr	r3, [pc, #368]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	4a5b      	ldr	r2, [pc, #364]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	@ 0x70
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0x324>
 8003280:	4b58      	ldr	r3, [pc, #352]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003284:	4a57      	ldr	r2, [pc, #348]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	@ 0x70
 800328c:	4b55      	ldr	r3, [pc, #340]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003290:	4a54      	ldr	r2, [pc, #336]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003292:	f023 0304 	bic.w	r3, r3, #4
 8003296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d015      	beq.n	80032cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe f94e 	bl	8001540 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe f94a 	bl	8001540 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e0cb      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	4b49      	ldr	r3, [pc, #292]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ee      	beq.n	80032a8 <HAL_RCC_OscConfig+0x334>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032cc:	f7fe f938 	bl	8001540 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fe f934 	bl	8001540 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0b5      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ee      	bne.n	80032d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	4a38      	ldr	r2, [pc, #224]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a1 	beq.w	8003454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003312:	4b34      	ldr	r3, [pc, #208]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d05c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d141      	bne.n	80033aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <HAL_RCC_OscConfig+0x478>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe f908 	bl	8001540 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe f904 	bl	8001540 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e087      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	3b01      	subs	r3, #1
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	491b      	ldr	r1, [pc, #108]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <HAL_RCC_OscConfig+0x478>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe f8dd 	bl	8001540 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fe f8d9 	bl	8001540 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e05c      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x416>
 80033a8:	e054      	b.n	8003454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <HAL_RCC_OscConfig+0x478>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe f8c6 	bl	8001540 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe f8c2 	bl	8001540 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e045      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_OscConfig+0x470>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x444>
 80033d6:	e03d      	b.n	8003454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e038      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <HAL_RCC_OscConfig+0x4ec>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d028      	beq.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d121      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d11a      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003428:	4293      	cmp	r3, r2
 800342a:	d111      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	3b01      	subs	r3, #1
 800343a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d107      	bne.n	8003450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800

08003464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0cc      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b68      	ldr	r3, [pc, #416]	@ (800361c <HAL_RCC_ClockConfig+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d90c      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b65      	ldr	r3, [pc, #404]	@ (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	@ (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a58      	ldr	r2, [pc, #352]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a52      	ldr	r2, [pc, #328]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d044      	beq.n	8003584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d119      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d003      	beq.n	8003522 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351e:	2b03      	cmp	r3, #3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	4b3f      	ldr	r3, [pc, #252]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e067      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003542:	4b37      	ldr	r3, [pc, #220]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4934      	ldr	r1, [pc, #208]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003554:	f7fd fff4 	bl	8001540 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fd fff0 	bl	8001540 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e04f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 020c 	and.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d1eb      	bne.n	800355c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d20c      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b22      	ldr	r3, [pc, #136]	@ (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d6:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd ff54 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00
 8003620:	40023800 	.word	0x40023800
 8003624:	0800cadc 	.word	0x0800cadc
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b090      	sub	sp, #64	@ 0x40
 8003636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003648:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d00d      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 8003654:	2b08      	cmp	r3, #8
 8003656:	f200 80a1 	bhi.w	800379c <HAL_RCC_GetSysClockFreq+0x16c>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 800365e:	2b04      	cmp	r3, #4
 8003660:	d003      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x3a>
 8003662:	e09b      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b53      	ldr	r3, [pc, #332]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003666:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003668:	e09b      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b53      	ldr	r3, [pc, #332]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800366c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800366e:	e098      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367a:	4b4d      	ldr	r3, [pc, #308]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d028      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	2200      	movs	r2, #0
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	627a      	str	r2, [r7, #36]	@ 0x24
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003698:	2100      	movs	r1, #0
 800369a:	4b47      	ldr	r3, [pc, #284]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800369c:	fb03 f201 	mul.w	r2, r3, r1
 80036a0:	2300      	movs	r3, #0
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	4a43      	ldr	r2, [pc, #268]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036aa:	fba0 1202 	umull	r1, r2, r0, r2
 80036ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b0:	460a      	mov	r2, r1
 80036b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b6:	4413      	add	r3, r2
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	2200      	movs	r2, #0
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80036ca:	f7fc fdf1 	bl	80002b0 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4613      	mov	r3, r2
 80036d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036d6:	e053      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d8:	4b35      	ldr	r3, [pc, #212]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	2200      	movs	r2, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	617a      	str	r2, [r7, #20]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036ea:	f04f 0b00 	mov.w	fp, #0
 80036ee:	4652      	mov	r2, sl
 80036f0:	465b      	mov	r3, fp
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	0159      	lsls	r1, r3, #5
 80036fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003700:	0150      	lsls	r0, r2, #5
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	ebb2 080a 	subs.w	r8, r2, sl
 800370a:	eb63 090b 	sbc.w	r9, r3, fp
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800371a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800371e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003722:	ebb2 0408 	subs.w	r4, r2, r8
 8003726:	eb63 0509 	sbc.w	r5, r3, r9
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	00eb      	lsls	r3, r5, #3
 8003734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003738:	00e2      	lsls	r2, r4, #3
 800373a:	4614      	mov	r4, r2
 800373c:	461d      	mov	r5, r3
 800373e:	eb14 030a 	adds.w	r3, r4, sl
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	eb45 030b 	adc.w	r3, r5, fp
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003756:	4629      	mov	r1, r5
 8003758:	028b      	lsls	r3, r1, #10
 800375a:	4621      	mov	r1, r4
 800375c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003760:	4621      	mov	r1, r4
 8003762:	028a      	lsls	r2, r1, #10
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	2200      	movs	r2, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003774:	f7fc fd9c 	bl	80002b0 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4613      	mov	r3, r2
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	3301      	adds	r3, #1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800379a:	e002      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800379e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3740      	adds	r7, #64	@ 0x40
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	018cba80 	.word	0x018cba80

080037bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07b      	b.n	80038de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f6:	d009      	beq.n	800380c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
 80037fe:	e005      	b.n	800380c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fca0 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	ea42 0103 	orr.w	r1, r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0104 	and.w	r1, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	f003 0210 	and.w	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038f6:	f7fd fe23 	bl	8001540 <HAL_GetTick>
 80038fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d001      	beq.n	8003910 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	e12a      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_Transmit+0x36>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e122      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_SPI_Transmit+0x48>
 800392a:	2302      	movs	r3, #2
 800392c:	e11b      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2203      	movs	r2, #3
 800393a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397c:	d10f      	bne.n	800399e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800399c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d007      	beq.n	80039bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c4:	d152      	bne.n	8003a6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0xee>
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d145      	bne.n	8003a60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	881a      	ldrh	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f8:	e032      	b.n	8003a60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d112      	bne.n	8003a2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a2c:	e018      	b.n	8003a60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a2e:	f7fd fd87 	bl	8001540 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d803      	bhi.n	8003a46 <HAL_SPI_Transmit+0x160>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_Transmit+0x166>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e082      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1c7      	bne.n	80039fa <HAL_SPI_Transmit+0x114>
 8003a6a:	e053      	b.n	8003b14 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_Transmit+0x194>
 8003a74:	8b7b      	ldrh	r3, [r7, #26]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d147      	bne.n	8003b0a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aa0:	e033      	b.n	8003b0a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d113      	bne.n	8003ad8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ad6:	e018      	b.n	8003b0a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad8:	f7fd fd32 	bl	8001540 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d803      	bhi.n	8003af0 <HAL_SPI_Transmit+0x20a>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Transmit+0x210>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e02d      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1c6      	bne.n	8003aa2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	6839      	ldr	r1, [r7, #0]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fa59 	bl	8003fd0 <SPI_EndRxTxTransaction>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08a      	sub	sp, #40	@ 0x28
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b80:	f7fd fcde 	bl	8001540 <HAL_GetTick>
 8003b84:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b8c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b98:	7ffb      	ldrb	r3, [r7, #31]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x4a>
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ba4:	d106      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x46>
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d001      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e17f      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x5c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x5c>
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e174      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x6e>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e16d      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d003      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2205      	movs	r2, #5
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	887a      	ldrh	r2, [r7, #2]
 8003c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b40      	cmp	r3, #64	@ 0x40
 8003c3a:	d007      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c54:	d17e      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_SPI_TransmitReceive+0xf6>
 8003c5e:	8afb      	ldrh	r3, [r7, #22]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d16c      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c88:	e059      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d11b      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x162>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x162>
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d113      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d119      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x1a4>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d014      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d12:	f7fd fc15 	bl	8001540 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d80d      	bhi.n	8003d3e <HAL_SPI_TransmitReceive+0x1d0>
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d009      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0bc      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1a0      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x11c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d19b      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x11c>
 8003d52:	e082      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x1f4>
 8003d5c:	8afb      	ldrh	r3, [r7, #22]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d171      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d88:	e05d      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11c      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x264>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x264>
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d114      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d119      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x2a6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d014      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e10:	2301      	movs	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e14:	f7fd fb94 	bl	8001540 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d803      	bhi.n	8003e2c <HAL_SPI_TransmitReceive+0x2be>
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x2c4>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e038      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d19c      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x21c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d197      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f8b6 	bl	8003fd0 <SPI_EndRxTxTransaction>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e01d      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3728      	adds	r7, #40	@ 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ed0:	f7fd fb36 	bl	8001540 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ee0:	f7fd fb2e 	bl	8001540 <HAL_GetTick>
 8003ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ee6:	4b39      	ldr	r3, [pc, #228]	@ (8003fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	015b      	lsls	r3, r3, #5
 8003eec:	0d1b      	lsrs	r3, r3, #20
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ef6:	e055      	b.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d051      	beq.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f00:	f7fd fb1e 	bl	8001540 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d902      	bls.n	8003f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d13d      	bne.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f2e:	d111      	bne.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f38:	d004      	beq.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f42:	d107      	bne.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5c:	d10f      	bne.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e018      	b.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	e002      	b.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d19a      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff ff6a 	bl	8003ec0 <SPI_WaitFlagStateUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	f043 0220 	orr.w	r2, r3, #32
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e032      	b.n	8004068 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004002:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <SPI_EndRxTxTransaction+0xa0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1b      	ldr	r2, [pc, #108]	@ (8004074 <SPI_EndRxTxTransaction+0xa4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0d5b      	lsrs	r3, r3, #21
 800400e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004020:	d112      	bne.n	8004048 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	2180      	movs	r1, #128	@ 0x80
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff ff47 	bl	8003ec0 <SPI_WaitFlagStateUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d016      	beq.n	8004066 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e00f      	b.n	8004068 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3b01      	subs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405e:	2b80      	cmp	r3, #128	@ 0x80
 8004060:	d0f2      	beq.n	8004048 <SPI_EndRxTxTransaction+0x78>
 8004062:	e000      	b.n	8004066 <SPI_EndRxTxTransaction+0x96>
        break;
 8004064:	bf00      	nop
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000000 	.word	0x20000000
 8004074:	165e9f81 	.word	0x165e9f81

08004078 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004078:	b084      	sub	sp, #16
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	f107 001c 	add.w	r0, r7, #28
 8004086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800408a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800408e:	2b01      	cmp	r3, #1
 8004090:	d123      	bne.n	80040da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80040a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f001 fae8 	bl	80056a4 <USB_CoreReset>
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e01b      	b.n	8004112 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 fadc 	bl	80056a4 <USB_CoreReset>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
 8004104:	e005      	b.n	8004112 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004112:	7fbb      	ldrb	r3, [r7, #30]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10b      	bne.n	8004130 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f043 0206 	orr.w	r2, r3, #6
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413c:	b004      	add	sp, #16
 800413e:	4770      	bx	lr

08004140 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d165      	bne.n	8004220 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a41      	ldr	r2, [pc, #260]	@ (800425c <USB_SetTurnaroundTime+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d906      	bls.n	800416a <USB_SetTurnaroundTime+0x2a>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a40      	ldr	r2, [pc, #256]	@ (8004260 <USB_SetTurnaroundTime+0x120>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d202      	bcs.n	800416a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004164:	230f      	movs	r3, #15
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e062      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a3c      	ldr	r2, [pc, #240]	@ (8004260 <USB_SetTurnaroundTime+0x120>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d306      	bcc.n	8004180 <USB_SetTurnaroundTime+0x40>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4a3b      	ldr	r2, [pc, #236]	@ (8004264 <USB_SetTurnaroundTime+0x124>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d202      	bcs.n	8004180 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800417a:	230e      	movs	r3, #14
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e057      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a38      	ldr	r2, [pc, #224]	@ (8004264 <USB_SetTurnaroundTime+0x124>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d306      	bcc.n	8004196 <USB_SetTurnaroundTime+0x56>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a37      	ldr	r2, [pc, #220]	@ (8004268 <USB_SetTurnaroundTime+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d202      	bcs.n	8004196 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004190:	230d      	movs	r3, #13
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e04c      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <USB_SetTurnaroundTime+0x128>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d306      	bcc.n	80041ac <USB_SetTurnaroundTime+0x6c>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a32      	ldr	r2, [pc, #200]	@ (800426c <USB_SetTurnaroundTime+0x12c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d802      	bhi.n	80041ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041a6:	230c      	movs	r3, #12
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e041      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a2f      	ldr	r2, [pc, #188]	@ (800426c <USB_SetTurnaroundTime+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d906      	bls.n	80041c2 <USB_SetTurnaroundTime+0x82>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004270 <USB_SetTurnaroundTime+0x130>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d802      	bhi.n	80041c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041bc:	230b      	movs	r3, #11
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e036      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <USB_SetTurnaroundTime+0x130>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d906      	bls.n	80041d8 <USB_SetTurnaroundTime+0x98>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a29      	ldr	r2, [pc, #164]	@ (8004274 <USB_SetTurnaroundTime+0x134>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041d2:	230a      	movs	r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e02b      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a26      	ldr	r2, [pc, #152]	@ (8004274 <USB_SetTurnaroundTime+0x134>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d906      	bls.n	80041ee <USB_SetTurnaroundTime+0xae>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a25      	ldr	r2, [pc, #148]	@ (8004278 <USB_SetTurnaroundTime+0x138>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d202      	bcs.n	80041ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041e8:	2309      	movs	r3, #9
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e020      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4a21      	ldr	r2, [pc, #132]	@ (8004278 <USB_SetTurnaroundTime+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d306      	bcc.n	8004204 <USB_SetTurnaroundTime+0xc4>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a20      	ldr	r2, [pc, #128]	@ (800427c <USB_SetTurnaroundTime+0x13c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d802      	bhi.n	8004204 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041fe:	2308      	movs	r3, #8
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e015      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <USB_SetTurnaroundTime+0x13c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d906      	bls.n	800421a <USB_SetTurnaroundTime+0xda>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a1c      	ldr	r2, [pc, #112]	@ (8004280 <USB_SetTurnaroundTime+0x140>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d202      	bcs.n	800421a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004214:	2307      	movs	r3, #7
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e00a      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800421a:	2306      	movs	r3, #6
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e007      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004226:	2309      	movs	r3, #9
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e001      	b.n	8004230 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800422c:	2309      	movs	r3, #9
 800422e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	00d8acbf 	.word	0x00d8acbf
 8004260:	00e4e1c0 	.word	0x00e4e1c0
 8004264:	00f42400 	.word	0x00f42400
 8004268:	01067380 	.word	0x01067380
 800426c:	011a499f 	.word	0x011a499f
 8004270:	01312cff 	.word	0x01312cff
 8004274:	014ca43f 	.word	0x014ca43f
 8004278:	016e3600 	.word	0x016e3600
 800427c:	01a6ab1f 	.word	0x01a6ab1f
 8004280:	01e84800 	.word	0x01e84800

08004284 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d115      	bne.n	8004316 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042f6:	200a      	movs	r0, #10
 80042f8:	f7fd f92e 	bl	8001558 <HAL_Delay>
      ms += 10U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	330a      	adds	r3, #10
 8004300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f93f 	bl	8005586 <USB_GetMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d01e      	beq.n	800434c <USB_SetCurrentMode+0x84>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2bc7      	cmp	r3, #199	@ 0xc7
 8004312:	d9f0      	bls.n	80042f6 <USB_SetCurrentMode+0x2e>
 8004314:	e01a      	b.n	800434c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004328:	200a      	movs	r0, #10
 800432a:	f7fd f915 	bl	8001558 <HAL_Delay>
      ms += 10U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	330a      	adds	r3, #10
 8004332:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 f926 	bl	8005586 <USB_GetMode>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <USB_SetCurrentMode+0x84>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2bc7      	cmp	r3, #199	@ 0xc7
 8004344:	d9f0      	bls.n	8004328 <USB_SetCurrentMode+0x60>
 8004346:	e001      	b.n	800434c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e005      	b.n	8004358 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004350:	d101      	bne.n	8004356 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004360:	b084      	sub	sp, #16
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800436e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e009      	b.n	8004394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3340      	adds	r3, #64	@ 0x40
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0e      	cmp	r3, #14
 8004398:	d9f2      	bls.n	8004380 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800439a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11c      	bne.n	80043dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80043da:	e00b      	b.n	80043f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004400:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004410:	2100      	movs	r1, #0
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f968 	bl	80046e8 <USB_SetDevSpeed>
 8004418:	e008      	b.n	800442c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800441a:	2101      	movs	r1, #1
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f963 	bl	80046e8 <USB_SetDevSpeed>
 8004422:	e003      	b.n	800442c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004424:	2103      	movs	r1, #3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f95e 	bl	80046e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800442c:	2110      	movs	r1, #16
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8fa 	bl	8004628 <USB_FlushTxFifo>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f924 	bl	800468c <USB_FlushRxFifo>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004454:	461a      	mov	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446c:	461a      	mov	r2, r3
 800446e:	2300      	movs	r3, #0
 8004470:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e043      	b.n	8004500 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800448a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800448e:	d118      	bne.n	80044c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a2:	461a      	mov	r2, r3
 80044a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e013      	b.n	80044d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b8:	461a      	mov	r2, r3
 80044ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e008      	b.n	80044d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ce:	461a      	mov	r2, r3
 80044d0:	2300      	movs	r3, #0
 80044d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e0:	461a      	mov	r2, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f2:	461a      	mov	r2, r3
 80044f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3301      	adds	r3, #1
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004504:	461a      	mov	r2, r3
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4293      	cmp	r3, r2
 800450a:	d3b5      	bcc.n	8004478 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	e043      	b.n	800459a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004528:	d118      	bne.n	800455c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e013      	b.n	800456e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e008      	b.n	800456e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004568:	461a      	mov	r2, r3
 800456a:	2300      	movs	r3, #0
 800456c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458c:	461a      	mov	r2, r3
 800458e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004592:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	3301      	adds	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800459e:	461a      	mov	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d3b5      	bcc.n	8004512 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80045c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f043 0210 	orr.w	r2, r3, #16
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <USB_DevInit+0x2c4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f043 0208 	orr.w	r2, r3, #8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr
 8004624:	803c3800 	.word	0x803c3800

08004628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004642:	d901      	bls.n	8004648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e01b      	b.n	8004680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	daf2      	bge.n	8004636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	019b      	lsls	r3, r3, #6
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800466c:	d901      	bls.n	8004672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e006      	b.n	8004680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d0f0      	beq.n	8004660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3301      	adds	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046a4:	d901      	bls.n	80046aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e018      	b.n	80046dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	daf2      	bge.n	8004698 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2210      	movs	r2, #16
 80046ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3301      	adds	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046c8:	d901      	bls.n	80046ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e006      	b.n	80046dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d0f0      	beq.n	80046bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
 800473e:	e00a      	b.n	8004756 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d002      	beq.n	800474c <USB_GetDevSpeed+0x32>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d102      	bne.n	8004752 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800474c:	2302      	movs	r3, #2
 800474e:	75fb      	strb	r3, [r7, #23]
 8004750:	e001      	b.n	8004756 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004752:	230f      	movs	r3, #15
 8004754:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004756:	7dfb      	ldrb	r3, [r7, #23]
}
 8004758:	4618      	mov	r0, r3
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d13a      	bne.n	80047f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2101      	movs	r1, #1
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800479e:	4313      	orrs	r3, r2
 80047a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d155      	bne.n	8004864 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	791b      	ldrb	r3, [r3, #4]
 80047d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	059b      	lsls	r3, r3, #22
 80047da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047dc:	4313      	orrs	r3, r2
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e036      	b.n	8004864 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	68f9      	ldr	r1, [r7, #12]
 8004810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004814:	4313      	orrs	r3, r2
 8004816:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11a      	bne.n	8004864 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	791b      	ldrb	r3, [r3, #4]
 8004848:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800484a:	430b      	orrs	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004862:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d161      	bne.n	8004954 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048a6:	d11f      	bne.n	80048e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	2101      	movs	r1, #1
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004908:	4013      	ands	r3, r2
 800490a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	b29b      	uxth	r3, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800492c:	4013      	ands	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0159      	lsls	r1, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	440b      	add	r3, r1
 8004946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494a:	4619      	mov	r1, r3
 800494c:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <USB_DeactivateEndpoint+0x1b0>)
 800494e:	4013      	ands	r3, r2
 8004950:	600b      	str	r3, [r1, #0]
 8004952:	e060      	b.n	8004a16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004966:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800496a:	d11f      	bne.n	80049ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004986:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800498a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f303 	lsl.w	r3, r1, r3
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	43db      	mvns	r3, r3
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049cc:	4013      	ands	r3, r2
 80049ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	43db      	mvns	r3, r3
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049f0:	4013      	ands	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	0159      	lsls	r1, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	440b      	add	r3, r1
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <USB_DeactivateEndpoint+0x1b4>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	ec337800 	.word	0xec337800
 8004a28:	eff37800 	.word	0xeff37800

08004a2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	f040 817f 	bne.w	8004d4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d132      	bne.n	8004abc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab4:	0cdb      	lsrs	r3, r3, #19
 8004ab6:	04db      	lsls	r3, r3, #19
 8004ab8:	6113      	str	r3, [r2, #16]
 8004aba:	e097      	b.n	8004bec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad6:	0cdb      	lsrs	r3, r3, #19
 8004ad8:	04db      	lsls	r3, r3, #19
 8004ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004afa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004afe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11a      	bne.n	8004b3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d903      	bls.n	8004b1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b38:	6113      	str	r3, [r2, #16]
 8004b3a:	e044      	b.n	8004bc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4413      	add	r3, r2
 8004b46:	1e5a      	subs	r2, r3, #1
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	8afb      	ldrh	r3, [r7, #22]
 8004b62:	04d9      	lsls	r1, r3, #19
 8004b64:	4ba4      	ldr	r3, [pc, #656]	@ (8004df8 <USB_EPStartXfer+0x3cc>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	69b9      	ldr	r1, [r7, #24]
 8004b6a:	0148      	lsls	r0, r1, #5
 8004b6c:	69f9      	ldr	r1, [r7, #28]
 8004b6e:	4401      	add	r1, r0
 8004b70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b74:	4313      	orrs	r3, r2
 8004b76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	791b      	ldrb	r3, [r3, #4]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d122      	bne.n	8004bc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	075b      	lsls	r3, r3, #29
 8004bb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004bb6:	69b9      	ldr	r1, [r7, #24]
 8004bb8:	0148      	lsls	r0, r1, #5
 8004bba:	69f9      	ldr	r1, [r7, #28]
 8004bbc:	4401      	add	r1, r0
 8004bbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	0148      	lsls	r0, r1, #5
 8004be0:	69f9      	ldr	r1, [r7, #28]
 8004be2:	4401      	add	r1, r0
 8004be4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004be8:	4313      	orrs	r3, r2
 8004bea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d14b      	bne.n	8004c8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c06:	461a      	mov	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	791b      	ldrb	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d128      	bne.n	8004c68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d110      	bne.n	8004c48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e00f      	b.n	8004c68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e166      	b.n	8004f58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ca8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d015      	beq.n	8004cde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 814e 	beq.w	8004f58 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	2101      	movs	r1, #1
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	69f9      	ldr	r1, [r7, #28]
 8004cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	634b      	str	r3, [r1, #52]	@ 0x34
 8004cdc:	e13c      	b.n	8004f58 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d110      	bne.n	8004d10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e00f      	b.n	8004d30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	68d9      	ldr	r1, [r3, #12]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781a      	ldrb	r2, [r3, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	b298      	uxth	r0, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	4603      	mov	r3, r0
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f9b9 	bl	80050bc <USB_WritePacket>
 8004d4a:	e105      	b.n	8004f58 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d66:	0cdb      	lsrs	r3, r3, #19
 8004d68:	04db      	lsls	r3, r3, #19
 8004d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d132      	bne.n	8004dfc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	0148      	lsls	r0, r1, #5
 8004dc8:	69f9      	ldr	r1, [r7, #28]
 8004dca:	4401      	add	r1, r0
 8004dcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004df2:	6113      	str	r3, [r2, #16]
 8004df4:	e062      	b.n	8004ebc <USB_EPStartXfer+0x490>
 8004df6:	bf00      	nop
 8004df8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d123      	bne.n	8004e4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1a:	69b9      	ldr	r1, [r7, #24]
 8004e1c:	0148      	lsls	r0, r1, #5
 8004e1e:	69f9      	ldr	r1, [r7, #28]
 8004e20:	4401      	add	r1, r0
 8004e22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e26:	4313      	orrs	r3, r2
 8004e28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e48:	6113      	str	r3, [r2, #16]
 8004e4a:	e037      	b.n	8004ebc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4413      	add	r3, r2
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	8afa      	ldrh	r2, [r7, #22]
 8004e68:	fb03 f202 	mul.w	r2, r3, r2
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	8afb      	ldrh	r3, [r7, #22]
 8004e80:	04d9      	lsls	r1, r3, #19
 8004e82:	4b38      	ldr	r3, [pc, #224]	@ (8004f64 <USB_EPStartXfer+0x538>)
 8004e84:	400b      	ands	r3, r1
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	0148      	lsls	r0, r1, #5
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	4401      	add	r1, r0
 8004e8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	0148      	lsls	r0, r1, #5
 8004eb0:	69f9      	ldr	r1, [r7, #28]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10d      	bne.n	8004ede <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eda:	460a      	mov	r2, r1
 8004edc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	791b      	ldrb	r3, [r3, #4]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d128      	bne.n	8004f38 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d110      	bne.n	8004f18 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00f      	b.n	8004f38 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	1ff80000 	.word	0x1ff80000

08004f68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d14a      	bne.n	800501c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9e:	f040 8086 	bne.w	80050ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	7812      	ldrb	r2, [r2, #0]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fe8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d902      	bls.n	8005000 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffe:	e056      	b.n	80050ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005018:	d0e7      	beq.n	8004fea <USB_EPStopXfer+0x82>
 800501a:	e048      	b.n	80050ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005034:	d13b      	bne.n	80050ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005054:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005058:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800507c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f242 7210 	movw	r2, #10000	@ 0x2710
 800508a:	4293      	cmp	r3, r2
 800508c:	d902      	bls.n	8005094 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
          break;
 8005092:	e00c      	b.n	80050ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ac:	d0e7      	beq.n	800507e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	@ 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4611      	mov	r1, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	460b      	mov	r3, r1
 80050cc:	71fb      	strb	r3, [r7, #7]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d123      	bne.n	800512a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050e2:	88bb      	ldrh	r3, [r7, #4]
 80050e4:	3303      	adds	r3, #3
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e018      	b.n	8005122 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	031a      	lsls	r2, r3, #12
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050fc:	461a      	mov	r2, r3
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	3301      	adds	r3, #1
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3e2      	bcc.n	80050f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3724      	adds	r7, #36	@ 0x24
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005138:	b480      	push	{r7}
 800513a:	b08b      	sub	sp, #44	@ 0x2c
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	089b      	lsrs	r3, r3, #2
 8005152:	b29b      	uxth	r3, r3
 8005154:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	e014      	b.n	800518e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	3301      	adds	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	3301      	adds	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	3301      	adds	r3, #1
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3e6      	bcc.n	8005164 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01e      	beq.n	80051da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a6:	461a      	mov	r2, r3
 80051a8:	f107 0310 	add.w	r3, r7, #16
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	701a      	strb	r2, [r3, #0]
      i++;
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	3301      	adds	r3, #1
 80051c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	3301      	adds	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051d4:	8bfb      	ldrh	r3, [r7, #30]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ea      	bne.n	80051b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051dc:	4618      	mov	r0, r3
 80051de:	372c      	adds	r7, #44	@ 0x2c
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d12c      	bne.n	800525e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	db12      	blt.n	800523c <USB_EPSetStall+0x54>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005236:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800523a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005256:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e02b      	b.n	80052b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	db12      	blt.n	8005296 <USB_EPSetStall+0xae>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00f      	beq.n	8005296 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005290:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005294:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d128      	bne.n	8005332 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	791b      	ldrb	r3, [r3, #4]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d003      	beq.n	8005310 <USB_EPClearStall+0x4c>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d138      	bne.n	8005382 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800532a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e027      	b.n	8005382 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800534c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	791b      	ldrb	r3, [r3, #4]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d003      	beq.n	8005362 <USB_EPClearStall+0x9e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	791b      	ldrb	r3, [r3, #4]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d10f      	bne.n	8005382 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005380:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ca:	4313      	orrs	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053f6:	f023 0303 	bic.w	r3, r3, #3
 80053fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800540a:	f023 0302 	bic.w	r3, r3, #2
 800540e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005438:	f023 0303 	bic.w	r3, r3, #3
 800543c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	0c1b      	lsrs	r3, r3, #16
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	b29b      	uxth	r3, r3
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800551c:	68bb      	ldr	r3, [r7, #8]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	b2db      	uxtb	r3, r3
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005578:	68bb      	ldr	r3, [r7, #8]
}
 800557a:	4618      	mov	r0, r3
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80055c0:	f023 0307 	bic.w	r3, r3, #7
 80055c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	460b      	mov	r3, r1
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	333c      	adds	r3, #60	@ 0x3c
 80055fe:	3304      	adds	r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4a26      	ldr	r2, [pc, #152]	@ (80056a0 <USB_EP0_OutStart+0xb8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d90a      	bls.n	8005622 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800561c:	d101      	bne.n	8005622 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e037      	b.n	8005692 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005650:	f043 0318 	orr.w	r3, r3, #24
 8005654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005664:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005668:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800566a:	7afb      	ldrb	r3, [r7, #11]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10f      	bne.n	8005690 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800568a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800568e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	4f54300a 	.word	0x4f54300a

080056a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056bc:	d901      	bls.n	80056c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e022      	b.n	8005708 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	daf2      	bge.n	80056b0 <USB_CoreReset+0xc>

  count = 10U;
 80056ca:	230a      	movs	r3, #10
 80056cc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80056ce:	e002      	b.n	80056d6 <USB_CoreReset+0x32>
  {
    count--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f9      	bne.n	80056d0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056f4:	d901      	bls.n	80056fa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e006      	b.n	8005708 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d0f0      	beq.n	80056e8 <USB_CoreReset+0x44>

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005718:	4904      	ldr	r1, [pc, #16]	@ (800572c <MX_FATFS_Init+0x18>)
 800571a:	4805      	ldr	r0, [pc, #20]	@ (8005730 <MX_FATFS_Init+0x1c>)
 800571c:	f005 f874 	bl	800a808 <FATFS_LinkDriver>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	4b03      	ldr	r3, [pc, #12]	@ (8005734 <MX_FATFS_Init+0x20>)
 8005726:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000740 	.word	0x20000740
 8005730:	2000000c 	.word	0x2000000c
 8005734:	2000073c 	.word	0x2000073c

08005738 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800573c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f9d3 	bl	8005b00 <USER_SPI_initialize>
 800575a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fab1 	bl	8005cd8 <USER_SPI_status>
 8005776:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005790:	7bf8      	ldrb	r0, [r7, #15]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	f000 fab4 	bl	8005d04 <USER_SPI_read>
 800579c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4603      	mov	r3, r0
 80057b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80057b6:	7bf8      	ldrb	r0, [r7, #15]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	f000 fb07 	bl	8005dd0 <USER_SPI_write>
 80057c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	603a      	str	r2, [r7, #0]
 80057d6:	71fb      	strb	r3, [r7, #7]
 80057d8:	460b      	mov	r3, r1
 80057da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80057dc:	79b9      	ldrb	r1, [r7, #6]
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fb70 	bl	8005ec8 <USER_SPI_ioctl>
 80057e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80057fc:	f7fb fea0 	bl	8001540 <HAL_GetTick>
 8005800:	4603      	mov	r3, r0
 8005802:	4a04      	ldr	r2, [pc, #16]	@ (8005814 <SPI_Timer_On+0x20>)
 8005804:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005806:	4a04      	ldr	r2, [pc, #16]	@ (8005818 <SPI_Timer_On+0x24>)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6013      	str	r3, [r2, #0]
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000748 	.word	0x20000748
 8005818:	2000074c 	.word	0x2000074c

0800581c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005820:	f7fb fe8e 	bl	8001540 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <SPI_Timer_Status+0x24>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <SPI_Timer_Status+0x28>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	bf34      	ite	cc
 8005834:	2301      	movcc	r3, #1
 8005836:	2300      	movcs	r3, #0
 8005838:	b2db      	uxtb	r3, r3
}
 800583a:	4618      	mov	r0, r3
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000748 	.word	0x20000748
 8005844:	2000074c 	.word	0x2000074c

08005848 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af02      	add	r7, sp, #8
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005852:	f107 020f 	add.w	r2, r7, #15
 8005856:	1df9      	adds	r1, r7, #7
 8005858:	2332      	movs	r3, #50	@ 0x32
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2301      	movs	r3, #1
 800585e:	4804      	ldr	r0, [pc, #16]	@ (8005870 <xchg_spi+0x28>)
 8005860:	f7fe f985 	bl	8003b6e <HAL_SPI_TransmitReceive>
    return rxDat;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200006dc 	.word	0x200006dc

08005874 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e00a      	b.n	800589a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	18d4      	adds	r4, r2, r3
 800588a:	20ff      	movs	r0, #255	@ 0xff
 800588c:	f7ff ffdc 	bl	8005848 <xchg_spi>
 8005890:	4603      	mov	r3, r0
 8005892:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d3f0      	bcc.n	8005884 <rcvr_spi_multi+0x10>
	}
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4803      	ldr	r0, [pc, #12]	@ (80058d0 <xmit_spi_multi+0x24>)
 80058c2:	f7fe f810 	bl	80038e6 <HAL_SPI_Transmit>
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200006dc 	.word	0x200006dc

080058d4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80058dc:	f7fb fe30 	bl	8001540 <HAL_GetTick>
 80058e0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80058e6:	20ff      	movs	r0, #255	@ 0xff
 80058e8:	f7ff ffae 	bl	8005848 <xchg_spi>
 80058ec:	4603      	mov	r3, r0
 80058ee:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2bff      	cmp	r3, #255	@ 0xff
 80058f4:	d007      	beq.n	8005906 <wait_ready+0x32>
 80058f6:	f7fb fe23 	bl	8001540 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d8ef      	bhi.n	80058e6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2bff      	cmp	r3, #255	@ 0xff
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005920:	2201      	movs	r2, #1
 8005922:	2101      	movs	r1, #1
 8005924:	4803      	ldr	r0, [pc, #12]	@ (8005934 <despiselect+0x18>)
 8005926:	f7fc f8d1 	bl	8001acc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800592a:	20ff      	movs	r0, #255	@ 0xff
 800592c:	f7ff ff8c 	bl	8005848 <xchg_spi>

}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40020400 	.word	0x40020400

08005938 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800593c:	2200      	movs	r2, #0
 800593e:	2101      	movs	r1, #1
 8005940:	4809      	ldr	r0, [pc, #36]	@ (8005968 <spiselect+0x30>)
 8005942:	f7fc f8c3 	bl	8001acc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005946:	20ff      	movs	r0, #255	@ 0xff
 8005948:	f7ff ff7e 	bl	8005848 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800594c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005950:	f7ff ffc0 	bl	80058d4 <wait_ready>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <spiselect+0x26>
 800595a:	2301      	movs	r3, #1
 800595c:	e002      	b.n	8005964 <spiselect+0x2c>

	despiselect();
 800595e:	f7ff ffdd 	bl	800591c <despiselect>
	return 0;	/* Timeout */
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40020400 	.word	0x40020400

0800596c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005976:	20c8      	movs	r0, #200	@ 0xc8
 8005978:	f7ff ff3c 	bl	80057f4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800597c:	20ff      	movs	r0, #255	@ 0xff
 800597e:	f7ff ff63 	bl	8005848 <xchg_spi>
 8005982:	4603      	mov	r3, r0
 8005984:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2bff      	cmp	r3, #255	@ 0xff
 800598a:	d104      	bne.n	8005996 <rcvr_datablock+0x2a>
 800598c:	f7ff ff46 	bl	800581c <SPI_Timer_Status>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f2      	bne.n	800597c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2bfe      	cmp	r3, #254	@ 0xfe
 800599a:	d001      	beq.n	80059a0 <rcvr_datablock+0x34>
 800599c:	2300      	movs	r3, #0
 800599e:	e00a      	b.n	80059b6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ff66 	bl	8005874 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80059a8:	20ff      	movs	r0, #255	@ 0xff
 80059aa:	f7ff ff4d 	bl	8005848 <xchg_spi>
 80059ae:	20ff      	movs	r0, #255	@ 0xff
 80059b0:	f7ff ff4a 	bl	8005848 <xchg_spi>

	return 1;						/* Function succeeded */
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80059ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80059ce:	f7ff ff81 	bl	80058d4 <wait_ready>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xmit_datablock+0x1e>
 80059d8:	2300      	movs	r3, #0
 80059da:	e01e      	b.n	8005a1a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ff32 	bl	8005848 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2bfd      	cmp	r3, #253	@ 0xfd
 80059e8:	d016      	beq.n	8005a18 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80059ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff ff5c 	bl	80058ac <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80059f4:	20ff      	movs	r0, #255	@ 0xff
 80059f6:	f7ff ff27 	bl	8005848 <xchg_spi>
 80059fa:	20ff      	movs	r0, #255	@ 0xff
 80059fc:	f7ff ff24 	bl	8005848 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005a00:	20ff      	movs	r0, #255	@ 0xff
 8005a02:	f7ff ff21 	bl	8005848 <xchg_spi>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	d001      	beq.n	8005a18 <xmit_datablock+0x5a>
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <xmit_datablock+0x5c>
	}
	return 1;
 8005a18:	2301      	movs	r3, #1
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	4603      	mov	r3, r0
 8005a2a:	6039      	str	r1, [r7, #0]
 8005a2c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da0e      	bge.n	8005a54 <send_cmd+0x32>
		cmd &= 0x7F;
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a3c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005a3e:	2100      	movs	r1, #0
 8005a40:	2037      	movs	r0, #55	@ 0x37
 8005a42:	f7ff ffee 	bl	8005a22 <send_cmd>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d901      	bls.n	8005a54 <send_cmd+0x32>
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	e051      	b.n	8005af8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d008      	beq.n	8005a6c <send_cmd+0x4a>
		despiselect();
 8005a5a:	f7ff ff5f 	bl	800591c <despiselect>
		if (!spiselect()) return 0xFF;
 8005a5e:	f7ff ff6b 	bl	8005938 <spiselect>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <send_cmd+0x4a>
 8005a68:	23ff      	movs	r3, #255	@ 0xff
 8005a6a:	e045      	b.n	8005af8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fee7 	bl	8005848 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	0e1b      	lsrs	r3, r3, #24
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fee1 	bl	8005848 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	0c1b      	lsrs	r3, r3, #16
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fedb 	bl	8005848 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fed5 	bl	8005848 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fed0 	bl	8005848 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <send_cmd+0x94>
 8005ab2:	2395      	movs	r3, #149	@ 0x95
 8005ab4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d101      	bne.n	8005ac0 <send_cmd+0x9e>
 8005abc:	2387      	movs	r3, #135	@ 0x87
 8005abe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fec0 	bl	8005848 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d102      	bne.n	8005ad4 <send_cmd+0xb2>
 8005ace:	20ff      	movs	r0, #255	@ 0xff
 8005ad0:	f7ff feba 	bl	8005848 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005ad4:	230a      	movs	r3, #10
 8005ad6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005ad8:	20ff      	movs	r0, #255	@ 0xff
 8005ada:	f7ff feb5 	bl	8005848 <xchg_spi>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da05      	bge.n	8005af6 <send_cmd+0xd4>
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <USER_SPI_initialize+0x14>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0d6      	b.n	8005cc2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005b14:	4b6d      	ldr	r3, [pc, #436]	@ (8005ccc <USER_SPI_initialize+0x1cc>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <USER_SPI_initialize+0x2a>
 8005b22:	4b6a      	ldr	r3, [pc, #424]	@ (8005ccc <USER_SPI_initialize+0x1cc>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e0cb      	b.n	8005cc2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005b2a:	4b69      	ldr	r3, [pc, #420]	@ (8005cd0 <USER_SPI_initialize+0x1d0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005b34:	4b66      	ldr	r3, [pc, #408]	@ (8005cd0 <USER_SPI_initialize+0x1d0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005b3c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005b3e:	230a      	movs	r3, #10
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	e005      	b.n	8005b50 <USER_SPI_initialize+0x50>
 8005b44:	20ff      	movs	r0, #255	@ 0xff
 8005b46:	f7ff fe7f 	bl	8005848 <xchg_spi>
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f6      	bne.n	8005b44 <USER_SPI_initialize+0x44>

	ty = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f7ff ff60 	bl	8005a22 <send_cmd>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	f040 808b 	bne.w	8005c80 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005b6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b6e:	f7ff fe41 	bl	80057f4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005b72:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005b76:	2008      	movs	r0, #8
 8005b78:	f7ff ff53 	bl	8005a22 <send_cmd>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d151      	bne.n	8005c26 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
 8005b86:	e00d      	b.n	8005ba4 <USER_SPI_initialize+0xa4>
 8005b88:	7bfc      	ldrb	r4, [r7, #15]
 8005b8a:	20ff      	movs	r0, #255	@ 0xff
 8005b8c:	f7ff fe5c 	bl	8005848 <xchg_spi>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	f104 0310 	add.w	r3, r4, #16
 8005b98:	443b      	add	r3, r7
 8005b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d9ee      	bls.n	8005b88 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005baa:	7abb      	ldrb	r3, [r7, #10]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d167      	bne.n	8005c80 <USER_SPI_initialize+0x180>
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	2baa      	cmp	r3, #170	@ 0xaa
 8005bb4:	d164      	bne.n	8005c80 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005bb6:	bf00      	nop
 8005bb8:	f7ff fe30 	bl	800581c <SPI_Timer_Status>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <USER_SPI_initialize+0xd2>
 8005bc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005bc6:	20a9      	movs	r0, #169	@ 0xa9
 8005bc8:	f7ff ff2b 	bl	8005a22 <send_cmd>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f2      	bne.n	8005bb8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005bd2:	f7ff fe23 	bl	800581c <SPI_Timer_Status>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d051      	beq.n	8005c80 <USER_SPI_initialize+0x180>
 8005bdc:	2100      	movs	r1, #0
 8005bde:	203a      	movs	r0, #58	@ 0x3a
 8005be0:	f7ff ff1f 	bl	8005a22 <send_cmd>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d14a      	bne.n	8005c80 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	e00d      	b.n	8005c0c <USER_SPI_initialize+0x10c>
 8005bf0:	7bfc      	ldrb	r4, [r7, #15]
 8005bf2:	20ff      	movs	r0, #255	@ 0xff
 8005bf4:	f7ff fe28 	bl	8005848 <xchg_spi>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f104 0310 	add.w	r3, r4, #16
 8005c00:	443b      	add	r3, r7
 8005c02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d9ee      	bls.n	8005bf0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005c12:	7a3b      	ldrb	r3, [r7, #8]
 8005c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <USER_SPI_initialize+0x120>
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	e000      	b.n	8005c22 <USER_SPI_initialize+0x122>
 8005c20:	2304      	movs	r3, #4
 8005c22:	737b      	strb	r3, [r7, #13]
 8005c24:	e02c      	b.n	8005c80 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005c26:	2100      	movs	r1, #0
 8005c28:	20a9      	movs	r0, #169	@ 0xa9
 8005c2a:	f7ff fefa 	bl	8005a22 <send_cmd>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d804      	bhi.n	8005c3e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005c34:	2302      	movs	r3, #2
 8005c36:	737b      	strb	r3, [r7, #13]
 8005c38:	23a9      	movs	r3, #169	@ 0xa9
 8005c3a:	73bb      	strb	r3, [r7, #14]
 8005c3c:	e003      	b.n	8005c46 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005c3e:	2301      	movs	r3, #1
 8005c40:	737b      	strb	r3, [r7, #13]
 8005c42:	2301      	movs	r3, #1
 8005c44:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005c46:	bf00      	nop
 8005c48:	f7ff fde8 	bl	800581c <SPI_Timer_Status>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <USER_SPI_initialize+0x162>
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fee3 	bl	8005a22 <send_cmd>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f2      	bne.n	8005c48 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005c62:	f7ff fddb 	bl	800581c <SPI_Timer_Status>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <USER_SPI_initialize+0x17c>
 8005c6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c70:	2010      	movs	r0, #16
 8005c72:	f7ff fed6 	bl	8005a22 <send_cmd>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <USER_SPI_initialize+0x180>
				ty = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005c80:	4a14      	ldr	r2, [pc, #80]	@ (8005cd4 <USER_SPI_initialize+0x1d4>)
 8005c82:	7b7b      	ldrb	r3, [r7, #13]
 8005c84:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005c86:	f7ff fe49 	bl	800591c <despiselect>

	if (ty) {			/* OK */
 8005c8a:	7b7b      	ldrb	r3, [r7, #13]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005c90:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <USER_SPI_initialize+0x1d0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <USER_SPI_initialize+0x1d0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0210 	orr.w	r2, r2, #16
 8005ca2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005ca4:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <USER_SPI_initialize+0x1cc>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ccc <USER_SPI_initialize+0x1cc>)
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e002      	b.n	8005cbc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <USER_SPI_initialize+0x1cc>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	@ (8005ccc <USER_SPI_initialize+0x1cc>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd90      	pop	{r4, r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000020 	.word	0x20000020
 8005cd0:	200006dc 	.word	0x200006dc
 8005cd4:	20000744 	.word	0x20000744

08005cd8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USER_SPI_status+0x14>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e002      	b.n	8005cf2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <USER_SPI_status+0x28>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b2db      	uxtb	r3, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000020 	.word	0x20000020

08005d04 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <USER_SPI_read+0x1c>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USER_SPI_read+0x20>
 8005d20:	2304      	movs	r3, #4
 8005d22:	e04d      	b.n	8005dc0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005d24:	4b28      	ldr	r3, [pc, #160]	@ (8005dc8 <USER_SPI_read+0xc4>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <USER_SPI_read+0x32>
 8005d32:	2303      	movs	r3, #3
 8005d34:	e044      	b.n	8005dc0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005d36:	4b25      	ldr	r3, [pc, #148]	@ (8005dcc <USER_SPI_read+0xc8>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <USER_SPI_read+0x44>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	025b      	lsls	r3, r3, #9
 8005d46:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d111      	bne.n	8005d72 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	2011      	movs	r0, #17
 8005d52:	f7ff fe66 	bl	8005a22 <send_cmd>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d129      	bne.n	8005db0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005d5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d60:	68b8      	ldr	r0, [r7, #8]
 8005d62:	f7ff fe03 	bl	800596c <rcvr_datablock>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d021      	beq.n	8005db0 <USER_SPI_read+0xac>
			count = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	e01e      	b.n	8005db0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	2012      	movs	r0, #18
 8005d76:	f7ff fe54 	bl	8005a22 <send_cmd>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d117      	bne.n	8005db0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d84:	68b8      	ldr	r0, [r7, #8]
 8005d86:	f7ff fdf1 	bl	800596c <rcvr_datablock>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <USER_SPI_read+0xa2>
				buff += 512;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005d96:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1ed      	bne.n	8005d80 <USER_SPI_read+0x7c>
 8005da4:	e000      	b.n	8005da8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005da6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005da8:	2100      	movs	r1, #0
 8005daa:	200c      	movs	r0, #12
 8005dac:	f7ff fe39 	bl	8005a22 <send_cmd>
		}
	}
	despiselect();
 8005db0:	f7ff fdb4 	bl	800591c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bf14      	ite	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	2300      	moveq	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000020 	.word	0x20000020
 8005dcc:	20000744 	.word	0x20000744

08005dd0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <USER_SPI_write+0x1c>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <USER_SPI_write+0x20>
 8005dec:	2304      	movs	r3, #4
 8005dee:	e063      	b.n	8005eb8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005df0:	4b33      	ldr	r3, [pc, #204]	@ (8005ec0 <USER_SPI_write+0xf0>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <USER_SPI_write+0x32>
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e05a      	b.n	8005eb8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005e02:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec0 <USER_SPI_write+0xf0>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <USER_SPI_write+0x44>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e051      	b.n	8005eb8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005e14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <USER_SPI_write+0xf4>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <USER_SPI_write+0x56>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	025b      	lsls	r3, r3, #9
 8005e24:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d110      	bne.n	8005e4e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	2018      	movs	r0, #24
 8005e30:	f7ff fdf7 	bl	8005a22 <send_cmd>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d136      	bne.n	8005ea8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005e3a:	21fe      	movs	r1, #254	@ 0xfe
 8005e3c:	68b8      	ldr	r0, [r7, #8]
 8005e3e:	f7ff fdbe 	bl	80059be <xmit_datablock>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d02f      	beq.n	8005ea8 <USER_SPI_write+0xd8>
			count = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	e02c      	b.n	8005ea8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <USER_SPI_write+0xf4>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0306 	and.w	r3, r3, #6
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <USER_SPI_write+0x92>
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	2097      	movs	r0, #151	@ 0x97
 8005e5e:	f7ff fde0 	bl	8005a22 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	2019      	movs	r0, #25
 8005e66:	f7ff fddc 	bl	8005a22 <send_cmd>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11b      	bne.n	8005ea8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005e70:	21fc      	movs	r1, #252	@ 0xfc
 8005e72:	68b8      	ldr	r0, [r7, #8]
 8005e74:	f7ff fda3 	bl	80059be <xmit_datablock>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <USER_SPI_write+0xc4>
				buff += 512;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005e84:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ee      	bne.n	8005e70 <USER_SPI_write+0xa0>
 8005e92:	e000      	b.n	8005e96 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005e94:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005e96:	21fd      	movs	r1, #253	@ 0xfd
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f7ff fd90 	bl	80059be <xmit_datablock>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <USER_SPI_write+0xd8>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005ea8:	f7ff fd38 	bl	800591c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000020 	.word	0x20000020
 8005ec4:	20000744 	.word	0x20000744

08005ec8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08c      	sub	sp, #48	@ 0x30
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	603a      	str	r2, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <USER_SPI_ioctl+0x1a>
 8005ede:	2304      	movs	r3, #4
 8005ee0:	e15a      	b.n	8006198 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005ee2:	4baf      	ldr	r3, [pc, #700]	@ (80061a0 <USER_SPI_ioctl+0x2d8>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USER_SPI_ioctl+0x2c>
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e151      	b.n	8006198 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005efa:	79bb      	ldrb	r3, [r7, #6]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	f200 8136 	bhi.w	800616e <USER_SPI_ioctl+0x2a6>
 8005f02:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <USER_SPI_ioctl+0x40>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f1d 	.word	0x08005f1d
 8005f0c:	08005f31 	.word	0x08005f31
 8005f10:	0800616f 	.word	0x0800616f
 8005f14:	08005fdd 	.word	0x08005fdd
 8005f18:	080060d3 	.word	0x080060d3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005f1c:	f7ff fd0c 	bl	8005938 <spiselect>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8127 	beq.w	8006176 <USER_SPI_ioctl+0x2ae>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005f2e:	e122      	b.n	8006176 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005f30:	2100      	movs	r1, #0
 8005f32:	2009      	movs	r0, #9
 8005f34:	f7ff fd75 	bl	8005a22 <send_cmd>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f040 811d 	bne.w	800617a <USER_SPI_ioctl+0x2b2>
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	2110      	movs	r1, #16
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fd10 	bl	800596c <rcvr_datablock>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8113 	beq.w	800617a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005f54:	7b3b      	ldrb	r3, [r7, #12]
 8005f56:	099b      	lsrs	r3, r3, #6
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d111      	bne.n	8005f82 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005f5e:	7d7b      	ldrb	r3, [r7, #21]
 8005f60:	461a      	mov	r2, r3
 8005f62:	7d3b      	ldrb	r3, [r7, #20]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	4413      	add	r3, r2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	7cfb      	ldrb	r3, [r7, #19]
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005f72:	4413      	add	r3, r2
 8005f74:	3301      	adds	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	029a      	lsls	r2, r3, #10
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e028      	b.n	8005fd4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005f82:	7c7b      	ldrb	r3, [r7, #17]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	7dbb      	ldrb	r3, [r7, #22]
 8005f8c:	09db      	lsrs	r3, r3, #7
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	7d7b      	ldrb	r3, [r7, #21]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0306 	and.w	r3, r3, #6
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005faa:	7d3b      	ldrb	r3, [r7, #20]
 8005fac:	099b      	lsrs	r3, r3, #6
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	7cbb      	ldrb	r3, [r7, #18]
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005fc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fca:	3b09      	subs	r3, #9
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005fda:	e0ce      	b.n	800617a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005fdc:	4b71      	ldr	r3, [pc, #452]	@ (80061a4 <USER_SPI_ioctl+0x2dc>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d031      	beq.n	800604c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005fe8:	2100      	movs	r1, #0
 8005fea:	208d      	movs	r0, #141	@ 0x8d
 8005fec:	f7ff fd19 	bl	8005a22 <send_cmd>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 80c3 	bne.w	800617e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005ff8:	20ff      	movs	r0, #255	@ 0xff
 8005ffa:	f7ff fc25 	bl	8005848 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005ffe:	f107 030c 	add.w	r3, r7, #12
 8006002:	2110      	movs	r1, #16
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fcb1 	bl	800596c <rcvr_datablock>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80b6 	beq.w	800617e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006012:	2330      	movs	r3, #48	@ 0x30
 8006014:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006018:	e007      	b.n	800602a <USER_SPI_ioctl+0x162>
 800601a:	20ff      	movs	r0, #255	@ 0xff
 800601c:	f7ff fc14 	bl	8005848 <xchg_spi>
 8006020:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006024:	3b01      	subs	r3, #1
 8006026:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800602a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f3      	bne.n	800601a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006032:	7dbb      	ldrb	r3, [r7, #22]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	2310      	movs	r3, #16
 800603c:	fa03 f202 	lsl.w	r2, r3, r2
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800604a:	e098      	b.n	800617e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800604c:	2100      	movs	r1, #0
 800604e:	2009      	movs	r0, #9
 8006050:	f7ff fce7 	bl	8005a22 <send_cmd>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 8091 	bne.w	800617e <USER_SPI_ioctl+0x2b6>
 800605c:	f107 030c 	add.w	r3, r7, #12
 8006060:	2110      	movs	r1, #16
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fc82 	bl	800596c <rcvr_datablock>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8087 	beq.w	800617e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006070:	4b4c      	ldr	r3, [pc, #304]	@ (80061a4 <USER_SPI_ioctl+0x2dc>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800607c:	7dbb      	ldrb	r3, [r7, #22]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006084:	7dfa      	ldrb	r2, [r7, #23]
 8006086:	09d2      	lsrs	r2, r2, #7
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	4413      	add	r3, r2
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	7e7b      	ldrb	r3, [r7, #25]
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	b2db      	uxtb	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	461a      	mov	r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e013      	b.n	80060ca <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80060a2:	7dbb      	ldrb	r3, [r7, #22]
 80060a4:	109b      	asrs	r3, r3, #2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	3301      	adds	r3, #1
 80060ae:	7dfa      	ldrb	r2, [r7, #23]
 80060b0:	00d2      	lsls	r2, r2, #3
 80060b2:	f002 0218 	and.w	r2, r2, #24
 80060b6:	7df9      	ldrb	r1, [r7, #23]
 80060b8:	0949      	lsrs	r1, r1, #5
 80060ba:	b2c9      	uxtb	r1, r1
 80060bc:	440a      	add	r2, r1
 80060be:	3201      	adds	r2, #1
 80060c0:	fb02 f303 	mul.w	r3, r2, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80060d0:	e055      	b.n	800617e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80060d2:	4b34      	ldr	r3, [pc, #208]	@ (80061a4 <USER_SPI_ioctl+0x2dc>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f003 0306 	and.w	r3, r3, #6
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d051      	beq.n	8006182 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80060de:	f107 020c 	add.w	r2, r7, #12
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	210b      	movs	r1, #11
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff feee 	bl	8005ec8 <USER_SPI_ioctl>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d149      	bne.n	8006186 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80060f2:	7b3b      	ldrb	r3, [r7, #12]
 80060f4:	099b      	lsrs	r3, r3, #6
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <USER_SPI_ioctl+0x23e>
 80060fc:	7dbb      	ldrb	r3, [r7, #22]
 80060fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d041      	beq.n	800618a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006116:	4b23      	ldr	r3, [pc, #140]	@ (80061a4 <USER_SPI_ioctl+0x2dc>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006124:	025b      	lsls	r3, r3, #9
 8006126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	025b      	lsls	r3, r3, #9
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800612e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006130:	2020      	movs	r0, #32
 8006132:	f7ff fc76 	bl	8005a22 <send_cmd>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d128      	bne.n	800618e <USER_SPI_ioctl+0x2c6>
 800613c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800613e:	2021      	movs	r0, #33	@ 0x21
 8006140:	f7ff fc6f 	bl	8005a22 <send_cmd>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d121      	bne.n	800618e <USER_SPI_ioctl+0x2c6>
 800614a:	2100      	movs	r1, #0
 800614c:	2026      	movs	r0, #38	@ 0x26
 800614e:	f7ff fc68 	bl	8005a22 <send_cmd>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11a      	bne.n	800618e <USER_SPI_ioctl+0x2c6>
 8006158:	f247 5030 	movw	r0, #30000	@ 0x7530
 800615c:	f7ff fbba 	bl	80058d4 <wait_ready>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006166:	2300      	movs	r3, #0
 8006168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800616c:	e00f      	b.n	800618e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800616e:	2304      	movs	r3, #4
 8006170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006174:	e00c      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		break;
 8006176:	bf00      	nop
 8006178:	e00a      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		break;
 800617a:	bf00      	nop
 800617c:	e008      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		break;
 800617e:	bf00      	nop
 8006180:	e006      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006182:	bf00      	nop
 8006184:	e004      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <USER_SPI_ioctl+0x2c8>
		break;
 800618e:	bf00      	nop
	}

	despiselect();
 8006190:	f7ff fbc4 	bl	800591c <despiselect>

	return res;
 8006194:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	@ 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000020 	.word	0x20000020
 80061a4:	20000744 	.word	0x20000744

080061a8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80061b4:	2010      	movs	r0, #16
 80061b6:	f004 ff21 	bl	800affc <USBD_static_malloc>
 80061ba:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	32b0      	adds	r2, #176	@ 0xb0
 80061cc:	2100      	movs	r1, #0
 80061ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061d2:	2302      	movs	r3, #2
 80061d4:	e048      	b.n	8006268 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32b0      	adds	r2, #176	@ 0xb0
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	32b0      	adds	r2, #176	@ 0xb0
 80061f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7c1b      	ldrb	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10d      	bne.n	800621e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006202:	4b1b      	ldr	r3, [pc, #108]	@ (8006270 <USBD_HID_Init+0xc8>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 020f 	and.w	r2, r3, #15
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	331c      	adds	r3, #28
 8006218:	2207      	movs	r2, #7
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	e00c      	b.n	8006238 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800621e:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <USBD_HID_Init+0xc8>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 020f 	and.w	r2, r3, #15
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	331c      	adds	r3, #28
 8006234:	220a      	movs	r2, #10
 8006236:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006238:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <USBD_HID_Init+0xc8>)
 800623a:	7819      	ldrb	r1, [r3, #0]
 800623c:	2304      	movs	r3, #4
 800623e:	2203      	movs	r2, #3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f004 fdca 	bl	800adda <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006246:	4b0a      	ldr	r3, [pc, #40]	@ (8006270 <USBD_HID_Init+0xc8>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	3323      	adds	r3, #35	@ 0x23
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200000d7 	.word	0x200000d7

08006274 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006280:	4b1f      	ldr	r3, [pc, #124]	@ (8006300 <USBD_HID_DeInit+0x8c>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f004 fdcd 	bl	800ae26 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800628c:	4b1c      	ldr	r3, [pc, #112]	@ (8006300 <USBD_HID_DeInit+0x8c>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	f003 020f 	and.w	r2, r3, #15
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	3323      	adds	r3, #35	@ 0x23
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80062a6:	4b16      	ldr	r3, [pc, #88]	@ (8006300 <USBD_HID_DeInit+0x8c>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	331c      	adds	r3, #28
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32b0      	adds	r2, #176	@ 0xb0
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d011      	beq.n	80062f6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	32b0      	adds	r2, #176	@ 0xb0
 80062dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f004 fe99 	bl	800b018 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	32b0      	adds	r2, #176	@ 0xb0
 80062f0:	2100      	movs	r1, #0
 80062f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200000d7 	.word	0x200000d7

08006304 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	32b0      	adds	r2, #176	@ 0xb0
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	e0e8      	b.n	8006502 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006338:	2b00      	cmp	r3, #0
 800633a:	d046      	beq.n	80063ca <USBD_HID_Setup+0xc6>
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 80d8 	bne.w	80064f2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	3b02      	subs	r3, #2
 8006348:	2b09      	cmp	r3, #9
 800634a:	d836      	bhi.n	80063ba <USBD_HID_Setup+0xb6>
 800634c:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <USBD_HID_Setup+0x50>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	080063ab 	.word	0x080063ab
 8006358:	0800638b 	.word	0x0800638b
 800635c:	080063bb 	.word	0x080063bb
 8006360:	080063bb 	.word	0x080063bb
 8006364:	080063bb 	.word	0x080063bb
 8006368:	080063bb 	.word	0x080063bb
 800636c:	080063bb 	.word	0x080063bb
 8006370:	080063bb 	.word	0x080063bb
 8006374:	08006399 	.word	0x08006399
 8006378:	0800637d 	.word	0x0800637d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	885b      	ldrh	r3, [r3, #2]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	601a      	str	r2, [r3, #0]
          break;
 8006388:	e01e      	b.n	80063c8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fbf9 	bl	8007b88 <USBD_CtlSendData>
          break;
 8006396:	e017      	b.n	80063c8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	b29b      	uxth	r3, r3
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	605a      	str	r2, [r3, #4]
          break;
 80063a8:	e00e      	b.n	80063c8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2201      	movs	r2, #1
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fbe8 	bl	8007b88 <USBD_CtlSendData>
          break;
 80063b8:	e006      	b.n	80063c8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fb66 	bl	8007a8e <USBD_CtlError>
          ret = USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	75fb      	strb	r3, [r7, #23]
          break;
 80063c6:	bf00      	nop
      }
      break;
 80063c8:	e09a      	b.n	8006500 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b0b      	cmp	r3, #11
 80063d0:	f200 8086 	bhi.w	80064e0 <USBD_HID_Setup+0x1dc>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <USBD_HID_Setup+0xd8>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	080064ef 	.word	0x080064ef
 80063e4:	080064e1 	.word	0x080064e1
 80063e8:	080064e1 	.word	0x080064e1
 80063ec:	080064e1 	.word	0x080064e1
 80063f0:	080064e1 	.word	0x080064e1
 80063f4:	08006437 	.word	0x08006437
 80063f8:	080064e1 	.word	0x080064e1
 80063fc:	080064e1 	.word	0x080064e1
 8006400:	080064e1 	.word	0x080064e1
 8006404:	0800648f 	.word	0x0800648f
 8006408:	080064b9 	.word	0x080064b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d107      	bne.n	8006428 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006418:	f107 030a 	add.w	r3, r7, #10
 800641c:	2202      	movs	r2, #2
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fbb1 	bl	8007b88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006426:	e063      	b.n	80064f0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fb2f 	bl	8007a8e <USBD_CtlError>
            ret = USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	75fb      	strb	r3, [r7, #23]
          break;
 8006434:	e05c      	b.n	80064f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b22      	cmp	r3, #34	@ 0x22
 8006440:	d108      	bne.n	8006454 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	88db      	ldrh	r3, [r3, #6]
 8006446:	2b3f      	cmp	r3, #63	@ 0x3f
 8006448:	bf28      	it	cs
 800644a:	233f      	movcs	r3, #63	@ 0x3f
 800644c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800644e:	4b2f      	ldr	r3, [pc, #188]	@ (800650c <USBD_HID_Setup+0x208>)
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	e015      	b.n	8006480 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	885b      	ldrh	r3, [r3, #2]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b21      	cmp	r3, #33	@ 0x21
 800645e:	d108      	bne.n	8006472 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006460:	4b2b      	ldr	r3, [pc, #172]	@ (8006510 <USBD_HID_Setup+0x20c>)
 8006462:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	88db      	ldrh	r3, [r3, #6]
 8006468:	2b09      	cmp	r3, #9
 800646a:	bf28      	it	cs
 800646c:	2309      	movcs	r3, #9
 800646e:	82bb      	strh	r3, [r7, #20]
 8006470:	e006      	b.n	8006480 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fb0a 	bl	8007a8e <USBD_CtlError>
            ret = USBD_FAIL;
 800647a:	2303      	movs	r3, #3
 800647c:	75fb      	strb	r3, [r7, #23]
            break;
 800647e:	e037      	b.n	80064f0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006480:	8abb      	ldrh	r3, [r7, #20]
 8006482:	461a      	mov	r2, r3
 8006484:	6939      	ldr	r1, [r7, #16]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fb7e 	bl	8007b88 <USBD_CtlSendData>
          break;
 800648c:	e030      	b.n	80064f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d107      	bne.n	80064aa <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3308      	adds	r3, #8
 800649e:	2201      	movs	r2, #1
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fb70 	bl	8007b88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064a8:	e022      	b.n	80064f0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 faee 	bl	8007a8e <USBD_CtlError>
            ret = USBD_FAIL;
 80064b2:	2303      	movs	r3, #3
 80064b4:	75fb      	strb	r3, [r7, #23]
          break;
 80064b6:	e01b      	b.n	80064f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d106      	bne.n	80064d2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	885b      	ldrh	r3, [r3, #2]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d0:	e00e      	b.n	80064f0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fada 	bl	8007a8e <USBD_CtlError>
            ret = USBD_FAIL;
 80064da:	2303      	movs	r3, #3
 80064dc:	75fb      	strb	r3, [r7, #23]
          break;
 80064de:	e007      	b.n	80064f0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fad3 	bl	8007a8e <USBD_CtlError>
          ret = USBD_FAIL;
 80064e8:	2303      	movs	r3, #3
 80064ea:	75fb      	strb	r3, [r7, #23]
          break;
 80064ec:	e000      	b.n	80064f0 <USBD_HID_Setup+0x1ec>
          break;
 80064ee:	bf00      	nop
      }
      break;
 80064f0:	e006      	b.n	8006500 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 faca 	bl	8007a8e <USBD_CtlError>
      ret = USBD_FAIL;
 80064fa:	2303      	movs	r3, #3
 80064fc:	75fb      	strb	r3, [r7, #23]
      break;
 80064fe:	bf00      	nop
  }

  return (uint8_t)ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000098 	.word	0x20000098
 8006510:	20000080 	.word	0x20000080

08006514 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	32b0      	adds	r2, #176	@ 0xb0
 800652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006530:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006538:	2303      	movs	r3, #3
 800653a:	e014      	b.n	8006566 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d10d      	bne.n	8006564 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	7b1b      	ldrb	r3, [r3, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006556:	4b06      	ldr	r3, [pc, #24]	@ (8006570 <USBD_HID_SendReport+0x5c>)
 8006558:	7819      	ldrb	r1, [r3, #0]
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f004 fd09 	bl	800af76 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200000d7 	.word	0x200000d7

08006574 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800657c:	2181      	movs	r1, #129	@ 0x81
 800657e:	4809      	ldr	r0, [pc, #36]	@ (80065a4 <USBD_HID_GetFSCfgDesc+0x30>)
 8006580:	f000 fc4e 	bl	8006e20 <USBD_GetEpDesc>
 8006584:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	220a      	movs	r2, #10
 8006590:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2222      	movs	r2, #34	@ 0x22
 8006596:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006598:	4b02      	ldr	r3, [pc, #8]	@ (80065a4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	2000005c 	.word	0x2000005c

080065a8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80065b0:	2181      	movs	r1, #129	@ 0x81
 80065b2:	4809      	ldr	r0, [pc, #36]	@ (80065d8 <USBD_HID_GetHSCfgDesc+0x30>)
 80065b4:	f000 fc34 	bl	8006e20 <USBD_GetEpDesc>
 80065b8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2207      	movs	r2, #7
 80065c4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2222      	movs	r2, #34	@ 0x22
 80065ca:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80065cc:	4b02      	ldr	r3, [pc, #8]	@ (80065d8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	2000005c 	.word	0x2000005c

080065dc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80065e4:	2181      	movs	r1, #129	@ 0x81
 80065e6:	4809      	ldr	r0, [pc, #36]	@ (800660c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80065e8:	f000 fc1a 	bl	8006e20 <USBD_GetEpDesc>
 80065ec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	220a      	movs	r2, #10
 80065f8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2222      	movs	r2, #34	@ 0x22
 80065fe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006600:	4b02      	ldr	r3, [pc, #8]	@ (800660c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	2000005c 	.word	0x2000005c

08006610 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32b0      	adds	r2, #176	@ 0xb0
 8006626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662a:	2200      	movs	r2, #0
 800662c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	220a      	movs	r2, #10
 8006648:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800664a:	4b03      	ldr	r3, [pc, #12]	@ (8006658 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	2000008c 	.word	0x2000008c

0800665c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e01f      	b.n	80066b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	79fa      	ldrb	r2, [r7, #7]
 80066a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f004 fb2f 	bl	800ad0c <USBD_LL_Init>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e025      	b.n	8006720 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32ae      	adds	r2, #174	@ 0xae
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00f      	beq.n	8006710 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32ae      	adds	r2, #174	@ 0xae
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	f107 020e 	add.w	r2, r7, #14
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	4602      	mov	r2, r0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f004 fb37 	bl	800ada4 <USBD_LL_Start>
 8006736:	4603      	mov	r3, r0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	4611      	mov	r1, r2
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	4611      	mov	r1, r2
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f920 	bl	8007a1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d01a      	beq.n	8006834 <USBD_LL_SetupStage+0x72>
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d822      	bhi.n	8006848 <USBD_LL_SetupStage+0x86>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <USBD_LL_SetupStage+0x4a>
 8006806:	2b01      	cmp	r3, #1
 8006808:	d00a      	beq.n	8006820 <USBD_LL_SetupStage+0x5e>
 800680a:	e01d      	b.n	8006848 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb75 	bl	8006f04 <USBD_StdDevReq>
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]
      break;
 800681e:	e020      	b.n	8006862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fbdd 	bl	8006fe8 <USBD_StdItfReq>
 800682e:	4603      	mov	r3, r0
 8006830:	73fb      	strb	r3, [r7, #15]
      break;
 8006832:	e016      	b.n	8006862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc3f 	bl	80070c0 <USBD_StdEPReq>
 8006842:	4603      	mov	r3, r0
 8006844:	73fb      	strb	r3, [r7, #15]
      break;
 8006846:	e00c      	b.n	8006862 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800684e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006852:	b2db      	uxtb	r3, r3
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f004 fb04 	bl	800ae64 <USBD_LL_StallEP>
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]
      break;
 8006860:	bf00      	nop
  }

  return ret;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	460b      	mov	r3, r1
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d177      	bne.n	8006974 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800688a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006892:	2b03      	cmp	r3, #3
 8006894:	f040 80a1 	bne.w	80069da <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	8992      	ldrh	r2, [r2, #12]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d91c      	bls.n	80068de <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	8992      	ldrh	r2, [r2, #12]
 80068ac:	1a9a      	subs	r2, r3, r2
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	8992      	ldrh	r2, [r2, #12]
 80068ba:	441a      	add	r2, r3
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6919      	ldr	r1, [r3, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	899b      	ldrh	r3, [r3, #12]
 80068c8:	461a      	mov	r2, r3
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4293      	cmp	r3, r2
 80068d0:	bf38      	it	cc
 80068d2:	4613      	movcc	r3, r2
 80068d4:	461a      	mov	r2, r3
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f001 f985 	bl	8007be6 <USBD_CtlContinueRx>
 80068dc:	e07d      	b.n	80069da <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d014      	beq.n	8006916 <USBD_LL_DataOutStage+0xaa>
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d81d      	bhi.n	800692c <USBD_LL_DataOutStage+0xc0>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <USBD_LL_DataOutStage+0x8e>
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d003      	beq.n	8006900 <USBD_LL_DataOutStage+0x94>
 80068f8:	e018      	b.n	800692c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75bb      	strb	r3, [r7, #22]
            break;
 80068fe:	e018      	b.n	8006932 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006906:	b2db      	uxtb	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa6e 	bl	8006dec <USBD_CoreFindIF>
 8006910:	4603      	mov	r3, r0
 8006912:	75bb      	strb	r3, [r7, #22]
            break;
 8006914:	e00d      	b.n	8006932 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800691c:	b2db      	uxtb	r3, r3
 800691e:	4619      	mov	r1, r3
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fa70 	bl	8006e06 <USBD_CoreFindEP>
 8006926:	4603      	mov	r3, r0
 8006928:	75bb      	strb	r3, [r7, #22]
            break;
 800692a:	e002      	b.n	8006932 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	75bb      	strb	r3, [r7, #22]
            break;
 8006930:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006932:	7dbb      	ldrb	r3, [r7, #22]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d119      	bne.n	800696c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d113      	bne.n	800696c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006944:	7dba      	ldrb	r2, [r7, #22]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	32ae      	adds	r2, #174	@ 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006954:	7dba      	ldrb	r2, [r7, #22]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800695c:	7dba      	ldrb	r2, [r7, #22]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	32ae      	adds	r2, #174	@ 0xae
 8006962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f001 f94b 	bl	8007c08 <USBD_CtlSendStatus>
 8006972:	e032      	b.n	80069da <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006974:	7afb      	ldrb	r3, [r7, #11]
 8006976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fa41 	bl	8006e06 <USBD_CoreFindEP>
 8006984:	4603      	mov	r3, r0
 8006986:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006988:	7dbb      	ldrb	r3, [r7, #22]
 800698a:	2bff      	cmp	r3, #255	@ 0xff
 800698c:	d025      	beq.n	80069da <USBD_LL_DataOutStage+0x16e>
 800698e:	7dbb      	ldrb	r3, [r7, #22]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d122      	bne.n	80069da <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b03      	cmp	r3, #3
 800699e:	d117      	bne.n	80069d0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069a0:	7dba      	ldrb	r2, [r7, #22]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	32ae      	adds	r2, #174	@ 0xae
 80069a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00f      	beq.n	80069d0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80069b0:	7dba      	ldrb	r2, [r7, #22]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069b8:	7dba      	ldrb	r2, [r7, #22]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	32ae      	adds	r2, #174	@ 0xae
 80069be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	7afa      	ldrb	r2, [r7, #11]
 80069c6:	4611      	mov	r1, r2
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	4798      	blx	r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	e000      	b.n	80069dc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	460b      	mov	r3, r1
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d178      	bne.n	8006aea <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3314      	adds	r3, #20
 80069fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d163      	bne.n	8006ad0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	8992      	ldrh	r2, [r2, #12]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d91c      	bls.n	8006a4e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	8992      	ldrh	r2, [r2, #12]
 8006a1c:	1a9a      	subs	r2, r3, r2
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	8992      	ldrh	r2, [r2, #12]
 8006a2a:	441a      	add	r2, r3
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6919      	ldr	r1, [r3, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f001 f8c2 	bl	8007bc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a40:	2300      	movs	r3, #0
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f004 fab6 	bl	800afb8 <USBD_LL_PrepareReceive>
 8006a4c:	e040      	b.n	8006ad0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	899b      	ldrh	r3, [r3, #12]
 8006a52:	461a      	mov	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d11c      	bne.n	8006a96 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d316      	bcc.n	8006a96 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d20f      	bcs.n	8006a96 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 f8a2 	bl	8007bc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f004 fa92 	bl	800afb8 <USBD_LL_PrepareReceive>
 8006a94:	e01c      	b.n	8006ad0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d10f      	bne.n	8006ac2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac2:	2180      	movs	r1, #128	@ 0x80
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f004 f9cd 	bl	800ae64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f001 f8af 	bl	8007c2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03a      	beq.n	8006b50 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fe30 	bl	8006740 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ae8:	e032      	b.n	8006b50 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f986 	bl	8006e06 <USBD_CoreFindEP>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	2bff      	cmp	r3, #255	@ 0xff
 8006b02:	d025      	beq.n	8006b50 <USBD_LL_DataInStage+0x16c>
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d122      	bne.n	8006b50 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d11c      	bne.n	8006b50 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b16:	7dfa      	ldrb	r2, [r7, #23]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	32ae      	adds	r2, #174	@ 0xae
 8006b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d014      	beq.n	8006b50 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006b26:	7dfa      	ldrb	r2, [r7, #23]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b2e:	7dfa      	ldrb	r2, [r7, #23]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	32ae      	adds	r2, #174	@ 0xae
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	7afa      	ldrb	r2, [r7, #11]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	4798      	blx	r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b46:	7dbb      	ldrb	r3, [r7, #22]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006b4c:	7dbb      	ldrb	r3, [r7, #22]
 8006b4e:	e000      	b.n	8006b52 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d014      	beq.n	8006bc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6852      	ldr	r2, [r2, #4]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc0:	2340      	movs	r3, #64	@ 0x40
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f004 f907 	bl	800adda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2240      	movs	r2, #64	@ 0x40
 8006bd8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bdc:	2340      	movs	r3, #64	@ 0x40
 8006bde:	2200      	movs	r2, #0
 8006be0:	2180      	movs	r1, #128	@ 0x80
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f004 f8f9 	bl	800adda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2240      	movs	r2, #64	@ 0x40
 8006bf4:	841a      	strh	r2, [r3, #32]

  return ret;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d006      	beq.n	8006c42 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2204      	movs	r2, #4
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d106      	bne.n	8006c7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d110      	bne.n	8006cbe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	@ 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e01c      	b.n	8006d24 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d115      	bne.n	8006d22 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	32ae      	adds	r2, #174	@ 0xae
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	32ae      	adds	r2, #174	@ 0xae
 8006d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	78fa      	ldrb	r2, [r7, #3]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	32ae      	adds	r2, #174	@ 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e01c      	b.n	8006d88 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d115      	bne.n	8006d86 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	32ae      	adds	r2, #174	@ 0xae
 8006d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	32ae      	adds	r2, #174	@ 0xae
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	4611      	mov	r1, r2
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6852      	ldr	r2, [r2, #4]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006dde:	2303      	movs	r3, #3
 8006de0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006df8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	885b      	ldrh	r3, [r3, #2]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d91f      	bls.n	8006e86 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e4c:	e013      	b.n	8006e76 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e4e:	f107 030a 	add.w	r3, r7, #10
 8006e52:	4619      	mov	r1, r3
 8006e54:	6978      	ldr	r0, [r7, #20]
 8006e56:	f000 f81b 	bl	8006e90 <USBD_GetNextDesc>
 8006e5a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	d108      	bne.n	8006e76 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	789b      	ldrb	r3, [r3, #2]
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d008      	beq.n	8006e84 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	885b      	ldrh	r3, [r3, #2]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	897b      	ldrh	r3, [r7, #10]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d8e5      	bhi.n	8006e4e <USBD_GetEpDesc+0x2e>
 8006e82:	e000      	b.n	8006e86 <USBD_GetEpDesc+0x66>
          break;
 8006e84:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e86:	693b      	ldr	r3, [r7, #16]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006eba:	68fb      	ldr	r3, [r7, #12]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3301      	adds	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ee6:	8a3b      	ldrh	r3, [r7, #16]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	b21a      	sxth	r2, r3
 8006eec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b21b      	sxth	r3, r3
 8006ef4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ef6:	89fb      	ldrh	r3, [r7, #14]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f1a:	2b40      	cmp	r3, #64	@ 0x40
 8006f1c:	d005      	beq.n	8006f2a <USBD_StdDevReq+0x26>
 8006f1e:	2b40      	cmp	r3, #64	@ 0x40
 8006f20:	d857      	bhi.n	8006fd2 <USBD_StdDevReq+0xce>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00f      	beq.n	8006f46 <USBD_StdDevReq+0x42>
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d153      	bne.n	8006fd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	32ae      	adds	r2, #174	@ 0xae
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
      break;
 8006f44:	e04a      	b.n	8006fdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d83b      	bhi.n	8006fc6 <USBD_StdDevReq+0xc2>
 8006f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <USBD_StdDevReq+0x50>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006fa9 	.word	0x08006fa9
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	08006fc7 	.word	0x08006fc7
 8006f60:	08006fb3 	.word	0x08006fb3
 8006f64:	08006fc7 	.word	0x08006fc7
 8006f68:	08006f87 	.word	0x08006f87
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006fc7 	.word	0x08006fc7
 8006f74:	08006f9f 	.word	0x08006f9f
 8006f78:	08006f91 	.word	0x08006f91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa3e 	bl	8007400 <USBD_GetDescriptor>
          break;
 8006f84:	e024      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fba3 	bl	80076d4 <USBD_SetAddress>
          break;
 8006f8e:	e01f      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fbe2 	bl	800775c <USBD_SetConfig>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006f9c:	e018      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fc85 	bl	80078b0 <USBD_GetConfig>
          break;
 8006fa6:	e013      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fcb6 	bl	800791c <USBD_GetStatus>
          break;
 8006fb0:	e00e      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fce5 	bl	8007984 <USBD_SetFeature>
          break;
 8006fba:	e009      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fd09 	bl	80079d6 <USBD_ClrFeature>
          break;
 8006fc4:	e004      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd60 	bl	8007a8e <USBD_CtlError>
          break;
 8006fce:	bf00      	nop
      }
      break;
 8006fd0:	e004      	b.n	8006fdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fd5a 	bl	8007a8e <USBD_CtlError>
      break;
 8006fda:	bf00      	nop
  }

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop

08006fe8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ffe:	2b40      	cmp	r3, #64	@ 0x40
 8007000:	d005      	beq.n	800700e <USBD_StdItfReq+0x26>
 8007002:	2b40      	cmp	r3, #64	@ 0x40
 8007004:	d852      	bhi.n	80070ac <USBD_StdItfReq+0xc4>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <USBD_StdItfReq+0x26>
 800700a:	2b20      	cmp	r3, #32
 800700c:	d14e      	bne.n	80070ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	2b02      	cmp	r3, #2
 800701a:	d840      	bhi.n	800709e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	889b      	ldrh	r3, [r3, #4]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d836      	bhi.n	8007094 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	889b      	ldrh	r3, [r3, #4]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fedc 	bl	8006dec <USBD_CoreFindIF>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2bff      	cmp	r3, #255	@ 0xff
 800703c:	d01d      	beq.n	800707a <USBD_StdItfReq+0x92>
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d11a      	bne.n	800707a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007044:	7bba      	ldrb	r2, [r7, #14]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32ae      	adds	r2, #174	@ 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00f      	beq.n	8007074 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007054:	7bba      	ldrb	r2, [r7, #14]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800705c:	7bba      	ldrb	r2, [r7, #14]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32ae      	adds	r2, #174	@ 0xae
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007072:	e004      	b.n	800707e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007078:	e001      	b.n	800707e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	88db      	ldrh	r3, [r3, #6]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d110      	bne.n	80070a8 <USBD_StdItfReq+0xc0>
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fdbb 	bl	8007c08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007092:	e009      	b.n	80070a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fcf9 	bl	8007a8e <USBD_CtlError>
          break;
 800709c:	e004      	b.n	80070a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fcf4 	bl	8007a8e <USBD_CtlError>
          break;
 80070a6:	e000      	b.n	80070aa <USBD_StdItfReq+0xc2>
          break;
 80070a8:	bf00      	nop
      }
      break;
 80070aa:	e004      	b.n	80070b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fced 	bl	8007a8e <USBD_CtlError>
      break;
 80070b4:	bf00      	nop
  }

  return ret;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	889b      	ldrh	r3, [r3, #4]
 80070d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070dc:	2b40      	cmp	r3, #64	@ 0x40
 80070de:	d007      	beq.n	80070f0 <USBD_StdEPReq+0x30>
 80070e0:	2b40      	cmp	r3, #64	@ 0x40
 80070e2:	f200 8181 	bhi.w	80073e8 <USBD_StdEPReq+0x328>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d02a      	beq.n	8007140 <USBD_StdEPReq+0x80>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	f040 817c 	bne.w	80073e8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fe86 	bl	8006e06 <USBD_CoreFindEP>
 80070fa:	4603      	mov	r3, r0
 80070fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	2bff      	cmp	r3, #255	@ 0xff
 8007102:	f000 8176 	beq.w	80073f2 <USBD_StdEPReq+0x332>
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f040 8172 	bne.w	80073f2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800710e:	7b7a      	ldrb	r2, [r7, #13]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007116:	7b7a      	ldrb	r2, [r7, #13]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	32ae      	adds	r2, #174	@ 0xae
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8165 	beq.w	80073f2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007128:	7b7a      	ldrb	r2, [r7, #13]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32ae      	adds	r2, #174	@ 0xae
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800713e:	e158      	b.n	80073f2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d008      	beq.n	800715a <USBD_StdEPReq+0x9a>
 8007148:	2b03      	cmp	r3, #3
 800714a:	f300 8147 	bgt.w	80073dc <USBD_StdEPReq+0x31c>
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 809b 	beq.w	800728a <USBD_StdEPReq+0x1ca>
 8007154:	2b01      	cmp	r3, #1
 8007156:	d03c      	beq.n	80071d2 <USBD_StdEPReq+0x112>
 8007158:	e140      	b.n	80073dc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d002      	beq.n	800716c <USBD_StdEPReq+0xac>
 8007166:	2b03      	cmp	r3, #3
 8007168:	d016      	beq.n	8007198 <USBD_StdEPReq+0xd8>
 800716a:	e02c      	b.n	80071c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <USBD_StdEPReq+0xce>
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b80      	cmp	r3, #128	@ 0x80
 8007176:	d00a      	beq.n	800718e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f003 fe71 	bl	800ae64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007182:	2180      	movs	r1, #128	@ 0x80
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f003 fe6d 	bl	800ae64 <USBD_LL_StallEP>
 800718a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800718c:	e020      	b.n	80071d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fc7c 	bl	8007a8e <USBD_CtlError>
              break;
 8007196:	e01b      	b.n	80071d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	885b      	ldrh	r3, [r3, #2]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10e      	bne.n	80071be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <USBD_StdEPReq+0xfe>
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b80      	cmp	r3, #128	@ 0x80
 80071aa:	d008      	beq.n	80071be <USBD_StdEPReq+0xfe>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f003 fe53 	bl	800ae64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd22 	bl	8007c08 <USBD_CtlSendStatus>

              break;
 80071c4:	e004      	b.n	80071d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc60 	bl	8007a8e <USBD_CtlError>
              break;
 80071ce:	bf00      	nop
          }
          break;
 80071d0:	e109      	b.n	80073e6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d002      	beq.n	80071e4 <USBD_StdEPReq+0x124>
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d016      	beq.n	8007210 <USBD_StdEPReq+0x150>
 80071e2:	e04b      	b.n	800727c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <USBD_StdEPReq+0x146>
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b80      	cmp	r3, #128	@ 0x80
 80071ee:	d00a      	beq.n	8007206 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f003 fe35 	bl	800ae64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071fa:	2180      	movs	r1, #128	@ 0x80
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f003 fe31 	bl	800ae64 <USBD_LL_StallEP>
 8007202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007204:	e040      	b.n	8007288 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc40 	bl	8007a8e <USBD_CtlError>
              break;
 800720e:	e03b      	b.n	8007288 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	885b      	ldrh	r3, [r3, #2]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d136      	bne.n	8007286 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f003 fe3b 	bl	800aea2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fceb 	bl	8007c08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fde5 	bl	8006e06 <USBD_CoreFindEP>
 800723c:	4603      	mov	r3, r0
 800723e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007240:	7b7b      	ldrb	r3, [r7, #13]
 8007242:	2bff      	cmp	r3, #255	@ 0xff
 8007244:	d01f      	beq.n	8007286 <USBD_StdEPReq+0x1c6>
 8007246:	7b7b      	ldrb	r3, [r7, #13]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11c      	bne.n	8007286 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800724c:	7b7a      	ldrb	r2, [r7, #13]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007254:	7b7a      	ldrb	r2, [r7, #13]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32ae      	adds	r2, #174	@ 0xae
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007264:	7b7a      	ldrb	r2, [r7, #13]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32ae      	adds	r2, #174	@ 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800727a:	e004      	b.n	8007286 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fc05 	bl	8007a8e <USBD_CtlError>
              break;
 8007284:	e000      	b.n	8007288 <USBD_StdEPReq+0x1c8>
              break;
 8007286:	bf00      	nop
          }
          break;
 8007288:	e0ad      	b.n	80073e6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d002      	beq.n	800729c <USBD_StdEPReq+0x1dc>
 8007296:	2b03      	cmp	r3, #3
 8007298:	d033      	beq.n	8007302 <USBD_StdEPReq+0x242>
 800729a:	e099      	b.n	80073d0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <USBD_StdEPReq+0x1f2>
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b80      	cmp	r3, #128	@ 0x80
 80072a6:	d004      	beq.n	80072b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fbef 	bl	8007a8e <USBD_CtlError>
                break;
 80072b0:	e093      	b.n	80073da <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da0b      	bge.n	80072d2 <USBD_StdEPReq+0x212>
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	3310      	adds	r3, #16
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	3304      	adds	r3, #4
 80072d0:	e00b      	b.n	80072ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4413      	add	r3, r2
 80072e8:	3304      	adds	r3, #4
 80072ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2200      	movs	r2, #0
 80072f0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	330e      	adds	r3, #14
 80072f6:	2202      	movs	r2, #2
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fc44 	bl	8007b88 <USBD_CtlSendData>
              break;
 8007300:	e06b      	b.n	80073da <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da11      	bge.n	800732e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 020f 	and.w	r2, r3, #15
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3323      	adds	r3, #35	@ 0x23
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d117      	bne.n	8007354 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fbb1 	bl	8007a8e <USBD_CtlError>
                  break;
 800732c:	e055      	b.n	80073da <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	f003 020f 	and.w	r2, r3, #15
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb9e 	bl	8007a8e <USBD_CtlError>
                  break;
 8007352:	e042      	b.n	80073da <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	da0b      	bge.n	8007374 <USBD_StdEPReq+0x2b4>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	3310      	adds	r3, #16
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	4413      	add	r3, r2
 8007370:	3304      	adds	r3, #4
 8007372:	e00b      	b.n	800738c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	3304      	adds	r3, #4
 800738c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <USBD_StdEPReq+0x2da>
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	d103      	bne.n	80073a2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	739a      	strb	r2, [r3, #14]
 80073a0:	e00e      	b.n	80073c0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f003 fd9a 	bl	800aee0 <USBD_LL_IsStallEP>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2201      	movs	r2, #1
 80073b6:	739a      	strb	r2, [r3, #14]
 80073b8:	e002      	b.n	80073c0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	330e      	adds	r3, #14
 80073c4:	2202      	movs	r2, #2
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fbdd 	bl	8007b88 <USBD_CtlSendData>
              break;
 80073ce:	e004      	b.n	80073da <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fb5b 	bl	8007a8e <USBD_CtlError>
              break;
 80073d8:	bf00      	nop
          }
          break;
 80073da:	e004      	b.n	80073e6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb55 	bl	8007a8e <USBD_CtlError>
          break;
 80073e4:	bf00      	nop
      }
      break;
 80073e6:	e005      	b.n	80073f4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fb4f 	bl	8007a8e <USBD_CtlError>
      break;
 80073f0:	e000      	b.n	80073f4 <USBD_StdEPReq+0x334>
      break;
 80073f2:	bf00      	nop
  }

  return ret;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	885b      	ldrh	r3, [r3, #2]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	2b06      	cmp	r3, #6
 8007422:	f200 8128 	bhi.w	8007676 <USBD_GetDescriptor+0x276>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <USBD_GetDescriptor+0x2c>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007449 	.word	0x08007449
 8007430:	08007461 	.word	0x08007461
 8007434:	080074a1 	.word	0x080074a1
 8007438:	08007677 	.word	0x08007677
 800743c:	08007677 	.word	0x08007677
 8007440:	08007617 	.word	0x08007617
 8007444:	08007643 	.word	0x08007643
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7c12      	ldrb	r2, [r2, #16]
 8007454:	f107 0108 	add.w	r1, r7, #8
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
 800745c:	60f8      	str	r0, [r7, #12]
      break;
 800745e:	e112      	b.n	8007686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	7c1b      	ldrb	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10d      	bne.n	8007484 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007470:	f107 0208 	add.w	r2, r7, #8
 8007474:	4610      	mov	r0, r2
 8007476:	4798      	blx	r3
 8007478:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3301      	adds	r3, #1
 800747e:	2202      	movs	r2, #2
 8007480:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007482:	e100      	b.n	8007686 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	f107 0208 	add.w	r2, r7, #8
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	2202      	movs	r2, #2
 800749c:	701a      	strb	r2, [r3, #0]
      break;
 800749e:	e0f2      	b.n	8007686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	885b      	ldrh	r3, [r3, #2]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	f200 80ac 	bhi.w	8007604 <USBD_GetDescriptor+0x204>
 80074ac:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <USBD_GetDescriptor+0xb4>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	080074cd 	.word	0x080074cd
 80074b8:	08007501 	.word	0x08007501
 80074bc:	08007535 	.word	0x08007535
 80074c0:	08007569 	.word	0x08007569
 80074c4:	0800759d 	.word	0x0800759d
 80074c8:	080075d1 	.word	0x080075d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 0108 	add.w	r1, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ee:	e091      	b.n	8007614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 facb 	bl	8007a8e <USBD_CtlError>
            err++;
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	3301      	adds	r3, #1
 80074fc:	72fb      	strb	r3, [r7, #11]
          break;
 80074fe:	e089      	b.n	8007614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007522:	e077      	b.n	8007614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fab1 	bl	8007a8e <USBD_CtlError>
            err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
          break;
 8007532:	e06f      	b.n	8007614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007556:	e05d      	b.n	8007614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa97 	bl	8007a8e <USBD_CtlError>
            err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
          break;
 8007566:	e055      	b.n	8007614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758a:	e043      	b.n	8007614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa7d 	bl	8007a8e <USBD_CtlError>
            err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
          break;
 800759a:	e03b      	b.n	8007614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e029      	b.n	8007614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa63 	bl	8007a8e <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e021      	b.n	8007614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e00f      	b.n	8007614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa49 	bl	8007a8e <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e007      	b.n	8007614 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa41 	bl	8007a8e <USBD_CtlError>
          err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007612:	bf00      	nop
      }
      break;
 8007614:	e037      	b.n	8007686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	4610      	mov	r0, r2
 800762c:	4798      	blx	r3
 800762e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007630:	e029      	b.n	8007686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fa2a 	bl	8007a8e <USBD_CtlError>
        err++;
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	3301      	adds	r3, #1
 800763e:	72fb      	strb	r3, [r7, #11]
      break;
 8007640:	e021      	b.n	8007686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7c1b      	ldrb	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10d      	bne.n	8007666 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	f107 0208 	add.w	r2, r7, #8
 8007656:	4610      	mov	r0, r2
 8007658:	4798      	blx	r3
 800765a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	2207      	movs	r2, #7
 8007662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007664:	e00f      	b.n	8007686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa10 	bl	8007a8e <USBD_CtlError>
        err++;
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	3301      	adds	r3, #1
 8007672:	72fb      	strb	r3, [r7, #11]
      break;
 8007674:	e007      	b.n	8007686 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fa08 	bl	8007a8e <USBD_CtlError>
      err++;
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	3301      	adds	r3, #1
 8007682:	72fb      	strb	r3, [r7, #11]
      break;
 8007684:	bf00      	nop
  }

  if (err != 0U)
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11e      	bne.n	80076ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d016      	beq.n	80076c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007694:	893b      	ldrh	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	88da      	ldrh	r2, [r3, #6]
 800769e:	893b      	ldrh	r3, [r7, #8]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	bf28      	it	cs
 80076a4:	4613      	movcs	r3, r2
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076aa:	893b      	ldrh	r3, [r7, #8]
 80076ac:	461a      	mov	r2, r3
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fa69 	bl	8007b88 <USBD_CtlSendData>
 80076b6:	e009      	b.n	80076cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f9e7 	bl	8007a8e <USBD_CtlError>
 80076c0:	e004      	b.n	80076cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 faa0 	bl	8007c08 <USBD_CtlSendStatus>
 80076c8:	e000      	b.n	80076cc <USBD_GetDescriptor+0x2cc>
    return;
 80076ca:	bf00      	nop
  }
}
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop

080076d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	889b      	ldrh	r3, [r3, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d131      	bne.n	800774a <USBD_SetAddress+0x76>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88db      	ldrh	r3, [r3, #6]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d12d      	bne.n	800774a <USBD_SetAddress+0x76>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80076f4:	d829      	bhi.n	800774a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	885b      	ldrh	r3, [r3, #2]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007700:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b03      	cmp	r3, #3
 800770c:	d104      	bne.n	8007718 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f9bc 	bl	8007a8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007716:	e01d      	b.n	8007754 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7bfa      	ldrb	r2, [r7, #15]
 800771c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f003 fc07 	bl	800af38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa6c 	bl	8007c08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773e:	e009      	b.n	8007754 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	e004      	b.n	8007754 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f99e 	bl	8007a8e <USBD_CtlError>
  }
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	885b      	ldrh	r3, [r3, #2]
 800776e:	b2da      	uxtb	r2, r3
 8007770:	4b4e      	ldr	r3, [pc, #312]	@ (80078ac <USBD_SetConfig+0x150>)
 8007772:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007774:	4b4d      	ldr	r3, [pc, #308]	@ (80078ac <USBD_SetConfig+0x150>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d905      	bls.n	8007788 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f985 	bl	8007a8e <USBD_CtlError>
    return USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	e08c      	b.n	80078a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d002      	beq.n	800779a <USBD_SetConfig+0x3e>
 8007794:	2b03      	cmp	r3, #3
 8007796:	d029      	beq.n	80077ec <USBD_SetConfig+0x90>
 8007798:	e075      	b.n	8007886 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800779a:	4b44      	ldr	r3, [pc, #272]	@ (80078ac <USBD_SetConfig+0x150>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d020      	beq.n	80077e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077a2:	4b42      	ldr	r3, [pc, #264]	@ (80078ac <USBD_SetConfig+0x150>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077ac:	4b3f      	ldr	r3, [pc, #252]	@ (80078ac <USBD_SetConfig+0x150>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fe ffcf 	bl	8006756 <USBD_SetClassConfig>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f962 	bl	8007a8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077d2:	e065      	b.n	80078a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa17 	bl	8007c08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2203      	movs	r2, #3
 80077de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80077e2:	e05d      	b.n	80078a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fa0f 	bl	8007c08 <USBD_CtlSendStatus>
      break;
 80077ea:	e059      	b.n	80078a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077ec:	4b2f      	ldr	r3, [pc, #188]	@ (80078ac <USBD_SetConfig+0x150>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d112      	bne.n	800781a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80077fc:	4b2b      	ldr	r3, [pc, #172]	@ (80078ac <USBD_SetConfig+0x150>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007806:	4b29      	ldr	r3, [pc, #164]	@ (80078ac <USBD_SetConfig+0x150>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7fe ffbe 	bl	800678e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f9f8 	bl	8007c08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007818:	e042      	b.n	80078a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800781a:	4b24      	ldr	r3, [pc, #144]	@ (80078ac <USBD_SetConfig+0x150>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d02a      	beq.n	800787e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7fe ffac 	bl	800678e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007836:	4b1d      	ldr	r3, [pc, #116]	@ (80078ac <USBD_SetConfig+0x150>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007840:	4b1a      	ldr	r3, [pc, #104]	@ (80078ac <USBD_SetConfig+0x150>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fe ff85 	bl	8006756 <USBD_SetClassConfig>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00f      	beq.n	8007876 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f918 	bl	8007a8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fe ff91 	bl	800678e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007874:	e014      	b.n	80078a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9c6 	bl	8007c08 <USBD_CtlSendStatus>
      break;
 800787c:	e010      	b.n	80078a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9c2 	bl	8007c08 <USBD_CtlSendStatus>
      break;
 8007884:	e00c      	b.n	80078a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f900 	bl	8007a8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800788e:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <USBD_SetConfig+0x150>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fe ff7a 	bl	800678e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	73fb      	strb	r3, [r7, #15]
      break;
 800789e:	bf00      	nop
  }

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000750 	.word	0x20000750

080078b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	88db      	ldrh	r3, [r3, #6]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d004      	beq.n	80078cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f8e2 	bl	8007a8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078ca:	e023      	b.n	8007914 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	dc02      	bgt.n	80078de <USBD_GetConfig+0x2e>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc03      	bgt.n	80078e4 <USBD_GetConfig+0x34>
 80078dc:	e015      	b.n	800790a <USBD_GetConfig+0x5a>
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d00b      	beq.n	80078fa <USBD_GetConfig+0x4a>
 80078e2:	e012      	b.n	800790a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3308      	adds	r3, #8
 80078ee:	2201      	movs	r2, #1
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f948 	bl	8007b88 <USBD_CtlSendData>
        break;
 80078f8:	e00c      	b.n	8007914 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2201      	movs	r2, #1
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f940 	bl	8007b88 <USBD_CtlSendData>
        break;
 8007908:	e004      	b.n	8007914 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f8be 	bl	8007a8e <USBD_CtlError>
        break;
 8007912:	bf00      	nop
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	2b02      	cmp	r3, #2
 8007932:	d81e      	bhi.n	8007972 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	88db      	ldrh	r3, [r3, #6]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d004      	beq.n	8007946 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8a5 	bl	8007a8e <USBD_CtlError>
        break;
 8007944:	e01a      	b.n	800797c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f043 0202 	orr.w	r2, r3, #2
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	330c      	adds	r3, #12
 8007966:	2202      	movs	r2, #2
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f90c 	bl	8007b88 <USBD_CtlSendData>
      break;
 8007970:	e004      	b.n	800797c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f88a 	bl	8007a8e <USBD_CtlError>
      break;
 800797a:	bf00      	nop
  }
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d107      	bne.n	80079a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f932 	bl	8007c08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079a4:	e013      	b.n	80079ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d10b      	bne.n	80079c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	889b      	ldrh	r3, [r3, #4]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f922 	bl	8007c08 <USBD_CtlSendStatus>
}
 80079c4:	e003      	b.n	80079ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f860 	bl	8007a8e <USBD_CtlError>
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d80b      	bhi.n	8007a06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d10c      	bne.n	8007a10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f902 	bl	8007c08 <USBD_CtlSendStatus>
      }
      break;
 8007a04:	e004      	b.n	8007a10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f840 	bl	8007a8e <USBD_CtlError>
      break;
 8007a0e:	e000      	b.n	8007a12 <USBD_ClrFeature+0x3c>
      break;
 8007a10:	bf00      	nop
  }
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3301      	adds	r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff fa3f 	bl	8006ec8 <SWAPBYTE>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f7ff fa32 	bl	8006ec8 <SWAPBYTE>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fa25 	bl	8006ec8 <SWAPBYTE>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	80da      	strh	r2, [r3, #6]
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a98:	2180      	movs	r1, #128	@ 0x80
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f003 f9e2 	bl	800ae64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f003 f9de 	bl	800ae64 <USBD_LL_StallEP>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d042      	beq.n	8007b4c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f000 f842 	bl	8007b54 <USBD_GetLen>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ada:	d808      	bhi.n	8007aee <USBD_GetString+0x3e>
 8007adc:	6938      	ldr	r0, [r7, #16]
 8007ade:	f000 f839 	bl	8007b54 <USBD_GetLen>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	e001      	b.n	8007af2 <USBD_GetString+0x42>
 8007aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4413      	add	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	3301      	adds	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	2203      	movs	r2, #3
 8007b10:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	3301      	adds	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b18:	e013      	b.n	8007b42 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	4413      	add	r3, r2
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	613b      	str	r3, [r7, #16]
    idx++;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4413      	add	r3, r2
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e7      	bne.n	8007b1a <USBD_GetString+0x6a>
 8007b4a:	e000      	b.n	8007b4e <USBD_GetString+0x9e>
    return;
 8007b4c:	bf00      	nop
  }
}
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b64:	e005      	b.n	8007b72 <USBD_GetLen+0x1e>
  {
    len++;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f5      	bne.n	8007b66 <USBD_GetLen+0x12>
  }

  return len;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f003 f9de 	bl	800af76 <USBD_LL_Transmit>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f003 f9cd 	bl	800af76 <USBD_LL_Transmit>

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f003 f9dd 	bl	800afb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2204      	movs	r2, #4
 8007c14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f003 f9a9 	bl	800af76 <USBD_LL_Transmit>

  return USBD_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2205      	movs	r2, #5
 8007c3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2200      	movs	r2, #0
 8007c42:	2100      	movs	r1, #0
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f003 f9b7 	bl	800afb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	4a08      	ldr	r2, [pc, #32]	@ (8007c84 <disk_status+0x30>)
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	79fa      	ldrb	r2, [r7, #7]
 8007c6c:	4905      	ldr	r1, [pc, #20]	@ (8007c84 <disk_status+0x30>)
 8007c6e:	440a      	add	r2, r1
 8007c70:	7a12      	ldrb	r2, [r2, #8]
 8007c72:	4610      	mov	r0, r2
 8007c74:	4798      	blx	r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	2000077c 	.word	0x2000077c

08007c88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	4a0e      	ldr	r2, [pc, #56]	@ (8007cd4 <disk_initialize+0x4c>)
 8007c9a:	5cd3      	ldrb	r3, [r2, r3]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d114      	bne.n	8007cca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8007cd4 <disk_initialize+0x4c>)
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	79fa      	ldrb	r2, [r7, #7]
 8007cae:	4909      	ldr	r1, [pc, #36]	@ (8007cd4 <disk_initialize+0x4c>)
 8007cb0:	440a      	add	r2, r1
 8007cb2:	7a12      	ldrb	r2, [r2, #8]
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d103      	bne.n	8007cca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	4a03      	ldr	r2, [pc, #12]	@ (8007cd4 <disk_initialize+0x4c>)
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	2000077c 	.word	0x2000077c

08007cd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	4a0a      	ldr	r2, [pc, #40]	@ (8007d14 <disk_read+0x3c>)
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	689c      	ldr	r4, [r3, #8]
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4a07      	ldr	r2, [pc, #28]	@ (8007d14 <disk_read+0x3c>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	7a18      	ldrb	r0, [r3, #8]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	47a0      	blx	r4
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd90      	pop	{r4, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2000077c 	.word	0x2000077c

08007d18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d54 <disk_write+0x3c>)
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	68dc      	ldr	r4, [r3, #12]
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	4a07      	ldr	r2, [pc, #28]	@ (8007d54 <disk_write+0x3c>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	7a18      	ldrb	r0, [r3, #8]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	47a0      	blx	r4
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd90      	pop	{r4, r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000077c 	.word	0x2000077c

08007d58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	603a      	str	r2, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
 8007d64:	460b      	mov	r3, r1
 8007d66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	4a09      	ldr	r2, [pc, #36]	@ (8007d90 <disk_ioctl+0x38>)
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	79fa      	ldrb	r2, [r7, #7]
 8007d76:	4906      	ldr	r1, [pc, #24]	@ (8007d90 <disk_ioctl+0x38>)
 8007d78:	440a      	add	r2, r1
 8007d7a:	7a10      	ldrb	r0, [r2, #8]
 8007d7c:	79b9      	ldrb	r1, [r7, #6]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	4798      	blx	r3
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	2000077c 	.word	0x2000077c

08007d94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007da4:	89fb      	ldrh	r3, [r7, #14]
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	b21a      	sxth	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b21b      	sxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b21b      	sxth	r3, r3
 8007db4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007db6:	89fb      	ldrh	r3, [r7, #14]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3303      	adds	r3, #3
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	3202      	adds	r2, #2
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	3201      	adds	r2, #1
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	7812      	ldrb	r2, [r2, #0]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	887a      	ldrh	r2, [r7, #2]
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	887b      	ldrh	r3, [r7, #2]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	887a      	ldrh	r2, [r7, #2]
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	1c53      	adds	r3, r2, #1
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	1c59      	adds	r1, r3, #1
 8007ebc:	6179      	str	r1, [r7, #20]
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	607b      	str	r3, [r7, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f1      	bne.n	8007eb2 <mem_cpy+0x1a>
	}
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007eda:	b480      	push	{r7}
 8007edc:	b087      	sub	sp, #28
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	617a      	str	r2, [r7, #20]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f3      	bne.n	8007eea <mem_set+0x10>
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f10:	b480      	push	{r7}
 8007f12:	b089      	sub	sp, #36	@ 0x24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	61fa      	str	r2, [r7, #28]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	4619      	mov	r1, r3
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	61ba      	str	r2, [r7, #24]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	1acb      	subs	r3, r1, r3
 8007f3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <mem_cmp+0x40>
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0eb      	beq.n	8007f28 <mem_cmp+0x18>

	return r;
 8007f50:	697b      	ldr	r3, [r7, #20]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3724      	adds	r7, #36	@ 0x24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007f68:	e002      	b.n	8007f70 <chk_chr+0x12>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <chk_chr+0x26>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d1f2      	bne.n	8007f6a <chk_chr+0xc>
	return *str;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e029      	b.n	8007ffc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007fa8:	4a27      	ldr	r2, [pc, #156]	@ (8008048 <chk_lock+0xb4>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	4413      	add	r3, r2
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01d      	beq.n	8007ff2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fb6:	4a24      	ldr	r2, [pc, #144]	@ (8008048 <chk_lock+0xb4>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	4413      	add	r3, r2
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d116      	bne.n	8007ff6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8008048 <chk_lock+0xb4>)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d10c      	bne.n	8007ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008048 <chk_lock+0xb4>)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d102      	bne.n	8007ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ff0:	e007      	b.n	8008002 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d9d2      	bls.n	8007fa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d109      	bne.n	800801c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <chk_lock+0x80>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d101      	bne.n	8008018 <chk_lock+0x84>
 8008014:	2300      	movs	r3, #0
 8008016:	e010      	b.n	800803a <chk_lock+0xa6>
 8008018:	2312      	movs	r3, #18
 800801a:	e00e      	b.n	800803a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <chk_lock+0xa0>
 8008022:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <chk_lock+0xb4>)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	4413      	add	r3, r2
 800802a:	330c      	adds	r3, #12
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008032:	d101      	bne.n	8008038 <chk_lock+0xa4>
 8008034:	2310      	movs	r3, #16
 8008036:	e000      	b.n	800803a <chk_lock+0xa6>
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	2000075c 	.word	0x2000075c

0800804c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008052:	2300      	movs	r3, #0
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	e002      	b.n	800805e <enq_lock+0x12>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3301      	adds	r3, #1
 800805c:	607b      	str	r3, [r7, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d806      	bhi.n	8008072 <enq_lock+0x26>
 8008064:	4a09      	ldr	r2, [pc, #36]	@ (800808c <enq_lock+0x40>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	4413      	add	r3, r2
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f2      	bne.n	8008058 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b02      	cmp	r3, #2
 8008076:	bf14      	ite	ne
 8008078:	2301      	movne	r3, #1
 800807a:	2300      	moveq	r3, #0
 800807c:	b2db      	uxtb	r3, r3
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	2000075c 	.word	0x2000075c

08008090 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	e01f      	b.n	80080e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80080a0:	4a41      	ldr	r2, [pc, #260]	@ (80081a8 <inc_lock+0x118>)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	4413      	add	r3, r2
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d113      	bne.n	80080da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80080b2:	4a3d      	ldr	r2, [pc, #244]	@ (80081a8 <inc_lock+0x118>)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	4413      	add	r3, r2
 80080ba:	3304      	adds	r3, #4
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d109      	bne.n	80080da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80080c6:	4a38      	ldr	r2, [pc, #224]	@ (80081a8 <inc_lock+0x118>)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4413      	add	r3, r2
 80080ce:	3308      	adds	r3, #8
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d006      	beq.n	80080e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d9dc      	bls.n	80080a0 <inc_lock+0x10>
 80080e6:	e000      	b.n	80080ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80080e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d132      	bne.n	8008156 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e002      	b.n	80080fc <inc_lock+0x6c>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d806      	bhi.n	8008110 <inc_lock+0x80>
 8008102:	4a29      	ldr	r2, [pc, #164]	@ (80081a8 <inc_lock+0x118>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	4413      	add	r3, r2
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f2      	bne.n	80080f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d101      	bne.n	800811a <inc_lock+0x8a>
 8008116:	2300      	movs	r3, #0
 8008118:	e040      	b.n	800819c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4922      	ldr	r1, [pc, #136]	@ (80081a8 <inc_lock+0x118>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	440b      	add	r3, r1
 8008126:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	491e      	ldr	r1, [pc, #120]	@ (80081a8 <inc_lock+0x118>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	440b      	add	r3, r1
 8008134:	3304      	adds	r3, #4
 8008136:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695a      	ldr	r2, [r3, #20]
 800813c:	491a      	ldr	r1, [pc, #104]	@ (80081a8 <inc_lock+0x118>)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	440b      	add	r3, r1
 8008144:	3308      	adds	r3, #8
 8008146:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008148:	4a17      	ldr	r2, [pc, #92]	@ (80081a8 <inc_lock+0x118>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	4413      	add	r3, r2
 8008150:	330c      	adds	r3, #12
 8008152:	2200      	movs	r2, #0
 8008154:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <inc_lock+0xe0>
 800815c:	4a12      	ldr	r2, [pc, #72]	@ (80081a8 <inc_lock+0x118>)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	4413      	add	r3, r2
 8008164:	330c      	adds	r3, #12
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <inc_lock+0xe0>
 800816c:	2300      	movs	r3, #0
 800816e:	e015      	b.n	800819c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <inc_lock+0xf8>
 8008176:	4a0c      	ldr	r2, [pc, #48]	@ (80081a8 <inc_lock+0x118>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	4413      	add	r3, r2
 800817e:	330c      	adds	r3, #12
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	e001      	b.n	800818c <inc_lock+0xfc>
 8008188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800818c:	4906      	ldr	r1, [pc, #24]	@ (80081a8 <inc_lock+0x118>)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	440b      	add	r3, r1
 8008194:	330c      	adds	r3, #12
 8008196:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	2000075c 	.word	0x2000075c

080081ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	607b      	str	r3, [r7, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d825      	bhi.n	800820c <dec_lock+0x60>
		n = Files[i].ctr;
 80081c0:	4a17      	ldr	r2, [pc, #92]	@ (8008220 <dec_lock+0x74>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	4413      	add	r3, r2
 80081c8:	330c      	adds	r3, #12
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80081ce:	89fb      	ldrh	r3, [r7, #14]
 80081d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081d4:	d101      	bne.n	80081da <dec_lock+0x2e>
 80081d6:	2300      	movs	r3, #0
 80081d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80081da:	89fb      	ldrh	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <dec_lock+0x3a>
 80081e0:	89fb      	ldrh	r3, [r7, #14]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80081e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008220 <dec_lock+0x74>)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	4413      	add	r3, r2
 80081ee:	330c      	adds	r3, #12
 80081f0:	89fa      	ldrh	r2, [r7, #14]
 80081f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <dec_lock+0x5a>
 80081fa:	4a09      	ldr	r2, [pc, #36]	@ (8008220 <dec_lock+0x74>)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	4413      	add	r3, r2
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	737b      	strb	r3, [r7, #13]
 800820a:	e001      	b.n	8008210 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800820c:	2302      	movs	r3, #2
 800820e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008210:	7b7b      	ldrb	r3, [r7, #13]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	2000075c 	.word	0x2000075c

08008224 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e010      	b.n	8008254 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008232:	4a0d      	ldr	r2, [pc, #52]	@ (8008268 <clear_lock+0x44>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	4413      	add	r3, r2
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	d105      	bne.n	800824e <clear_lock+0x2a>
 8008242:	4a09      	ldr	r2, [pc, #36]	@ (8008268 <clear_lock+0x44>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	4413      	add	r3, r2
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3301      	adds	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d9eb      	bls.n	8008232 <clear_lock+0xe>
	}
}
 800825a:	bf00      	nop
 800825c:	bf00      	nop
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	2000075c 	.word	0x2000075c

0800826c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	78db      	ldrb	r3, [r3, #3]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d034      	beq.n	80082ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008284:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7858      	ldrb	r0, [r3, #1]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008290:	2301      	movs	r3, #1
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	f7ff fd40 	bl	8007d18 <disk_write>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	e022      	b.n	80082ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	1ad2      	subs	r2, r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d217      	bcs.n	80082ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	789b      	ldrb	r3, [r3, #2]
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	e010      	b.n	80082e4 <sync_window+0x78>
					wsect += fs->fsize;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4413      	add	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7858      	ldrb	r0, [r3, #1]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80082d6:	2301      	movs	r3, #1
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	f7ff fd1d 	bl	8007d18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d8eb      	bhi.n	80082c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d01b      	beq.n	8008344 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ffad 	bl	800826c <sync_window>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d113      	bne.n	8008344 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7858      	ldrb	r0, [r3, #1]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008326:	2301      	movs	r3, #1
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	f7ff fcd5 	bl	8007cd8 <disk_read>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008334:	f04f 33ff 	mov.w	r3, #4294967295
 8008338:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff ff87 	bl	800826c <sync_window>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d158      	bne.n	800841a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d148      	bne.n	8008402 <sync_fs+0xb2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	791b      	ldrb	r3, [r3, #4]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d144      	bne.n	8008402 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3330      	adds	r3, #48	@ 0x30
 800837c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008380:	2100      	movs	r1, #0
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fda9 	bl	8007eda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3330      	adds	r3, #48	@ 0x30
 800838c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008390:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff fd38 	bl	8007e0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3330      	adds	r3, #48	@ 0x30
 800839e:	4921      	ldr	r1, [pc, #132]	@ (8008424 <sync_fs+0xd4>)
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fd4d 	bl	8007e40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3330      	adds	r3, #48	@ 0x30
 80083aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083ae:	491e      	ldr	r1, [pc, #120]	@ (8008428 <sync_fs+0xd8>)
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fd45 	bl	8007e40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3330      	adds	r3, #48	@ 0x30
 80083ba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f7ff fd3b 	bl	8007e40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3330      	adds	r3, #48	@ 0x30
 80083ce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	4619      	mov	r1, r3
 80083d8:	4610      	mov	r0, r2
 80083da:	f7ff fd31 	bl	8007e40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7858      	ldrb	r0, [r3, #1]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f6:	2301      	movs	r3, #1
 80083f8:	f7ff fc8e 	bl	8007d18 <disk_write>
			fs->fsi_flag = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fca4 	bl	8007d58 <disk_ioctl>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <sync_fs+0xca>
 8008416:	2301      	movs	r3, #1
 8008418:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	41615252 	.word	0x41615252
 8008428:	61417272 	.word	0x61417272

0800842c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	3b02      	subs	r3, #2
 800843a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	3b02      	subs	r3, #2
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d301      	bcc.n	800844c <clust2sect+0x20>
 8008448:	2300      	movs	r3, #0
 800844a:	e008      	b.n	800845e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	895b      	ldrh	r3, [r3, #10]
 8008450:	461a      	mov	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	fb03 f202 	mul.w	r2, r3, r2
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	4413      	add	r3, r2
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d904      	bls.n	800848a <get_fat+0x20>
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d302      	bcc.n	8008490 <get_fat+0x26>
		val = 1;	/* Internal error */
 800848a:	2301      	movs	r3, #1
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	e08e      	b.n	80085ae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d061      	beq.n	8008562 <get_fat+0xf8>
 800849e:	2b03      	cmp	r3, #3
 80084a0:	dc7b      	bgt.n	800859a <get_fat+0x130>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d002      	beq.n	80084ac <get_fat+0x42>
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d041      	beq.n	800852e <get_fat+0xc4>
 80084aa:	e076      	b.n	800859a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6a1a      	ldr	r2, [r3, #32]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	0a5b      	lsrs	r3, r3, #9
 80084c2:	4413      	add	r3, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	6938      	ldr	r0, [r7, #16]
 80084c8:	f7ff ff14 	bl	80082f4 <move_window>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d166      	bne.n	80085a0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	60fa      	str	r2, [r7, #12]
 80084d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	0a5b      	lsrs	r3, r3, #9
 80084ee:	4413      	add	r3, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	6938      	ldr	r0, [r7, #16]
 80084f4:	f7ff fefe 	bl	80082f4 <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d152      	bne.n	80085a4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4413      	add	r3, r2
 8008508:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4313      	orrs	r3, r2
 8008512:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <get_fat+0xba>
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	091b      	lsrs	r3, r3, #4
 8008522:	e002      	b.n	800852a <get_fat+0xc0>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800852a:	617b      	str	r3, [r7, #20]
			break;
 800852c:	e03f      	b.n	80085ae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6a1a      	ldr	r2, [r3, #32]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	4413      	add	r3, r2
 8008538:	4619      	mov	r1, r3
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f7ff feda 	bl	80082f4 <move_window>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d130      	bne.n	80085a8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008554:	4413      	add	r3, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fc1c 	bl	8007d94 <ld_word>
 800855c:	4603      	mov	r3, r0
 800855e:	617b      	str	r3, [r7, #20]
			break;
 8008560:	e025      	b.n	80085ae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6a1a      	ldr	r2, [r3, #32]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	09db      	lsrs	r3, r3, #7
 800856a:	4413      	add	r3, r2
 800856c:	4619      	mov	r1, r3
 800856e:	6938      	ldr	r0, [r7, #16]
 8008570:	f7ff fec0 	bl	80082f4 <move_window>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d118      	bne.n	80085ac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008588:	4413      	add	r3, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff fc1a 	bl	8007dc4 <ld_dword>
 8008590:	4603      	mov	r3, r0
 8008592:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008596:	617b      	str	r3, [r7, #20]
			break;
 8008598:	e009      	b.n	80085ae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800859a:	2301      	movs	r3, #1
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	e006      	b.n	80085ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085a0:	bf00      	nop
 80085a2:	e004      	b.n	80085ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085a4:	bf00      	nop
 80085a6:	e002      	b.n	80085ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085a8:	bf00      	nop
 80085aa:	e000      	b.n	80085ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085ac:	bf00      	nop
		}
	}

	return val;
 80085ae:	697b      	ldr	r3, [r7, #20]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b089      	sub	sp, #36	@ 0x24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80085c4:	2302      	movs	r3, #2
 80085c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	f240 80d9 	bls.w	8008782 <put_fat+0x1ca>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	f080 80d3 	bcs.w	8008782 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	f000 8096 	beq.w	8008712 <put_fat+0x15a>
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	f300 80cb 	bgt.w	8008782 <put_fat+0x1ca>
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d002      	beq.n	80085f6 <put_fat+0x3e>
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d06e      	beq.n	80086d2 <put_fat+0x11a>
 80085f4:	e0c5      	b.n	8008782 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4413      	add	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a1a      	ldr	r2, [r3, #32]
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	0a5b      	lsrs	r3, r3, #9
 800860c:	4413      	add	r3, r2
 800860e:	4619      	mov	r1, r3
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff fe6f 	bl	80082f4 <move_window>
 8008616:	4603      	mov	r3, r0
 8008618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800861a:	7ffb      	ldrb	r3, [r7, #31]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 80a9 	bne.w	8008774 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	1c59      	adds	r1, r3, #1
 800862c:	61b9      	str	r1, [r7, #24]
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	4413      	add	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00d      	beq.n	800865c <put_fat+0xa4>
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f003 030f 	and.w	r3, r3, #15
 800864a:	b25a      	sxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	b25b      	sxtb	r3, r3
 8008654:	4313      	orrs	r3, r2
 8008656:	b25b      	sxtb	r3, r3
 8008658:	b2db      	uxtb	r3, r3
 800865a:	e001      	b.n	8008660 <put_fat+0xa8>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a1a      	ldr	r2, [r3, #32]
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	0a5b      	lsrs	r3, r3, #9
 8008672:	4413      	add	r3, r2
 8008674:	4619      	mov	r1, r3
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fe3c 	bl	80082f4 <move_window>
 800867c:	4603      	mov	r3, r0
 800867e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008680:	7ffb      	ldrb	r3, [r7, #31]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d178      	bne.n	8008778 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	4413      	add	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <put_fat+0xf0>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	091b      	lsrs	r3, r3, #4
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	e00e      	b.n	80086c6 <put_fat+0x10e>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	b25b      	sxtb	r3, r3
 80086ae:	f023 030f 	bic.w	r3, r3, #15
 80086b2:	b25a      	sxtb	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	b25b      	sxtb	r3, r3
 80086ba:	f003 030f 	and.w	r3, r3, #15
 80086be:	b25b      	sxtb	r3, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	b25b      	sxtb	r3, r3
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	70da      	strb	r2, [r3, #3]
			break;
 80086d0:	e057      	b.n	8008782 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	4413      	add	r3, r2
 80086dc:	4619      	mov	r1, r3
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fe08 	bl	80082f4 <move_window>
 80086e4:	4603      	mov	r3, r0
 80086e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086e8:	7ffb      	ldrb	r3, [r7, #31]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d146      	bne.n	800877c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80086fc:	4413      	add	r3, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	b292      	uxth	r2, r2
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff fb80 	bl	8007e0a <st_word>
			fs->wflag = 1;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	70da      	strb	r2, [r3, #3]
			break;
 8008710:	e037      	b.n	8008782 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	09db      	lsrs	r3, r3, #7
 800871a:	4413      	add	r3, r2
 800871c:	4619      	mov	r1, r3
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fde8 	bl	80082f4 <move_window>
 8008724:	4603      	mov	r3, r0
 8008726:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008728:	7ffb      	ldrb	r3, [r7, #31]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d128      	bne.n	8008780 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008742:	4413      	add	r3, r2
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fb3d 	bl	8007dc4 <ld_dword>
 800874a:	4603      	mov	r3, r0
 800874c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008750:	4323      	orrs	r3, r4
 8008752:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008762:	4413      	add	r3, r2
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fb6a 	bl	8007e40 <st_dword>
			fs->wflag = 1;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	70da      	strb	r2, [r3, #3]
			break;
 8008772:	e006      	b.n	8008782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008774:	bf00      	nop
 8008776:	e004      	b.n	8008782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008778:	bf00      	nop
 800877a:	e002      	b.n	8008782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008780:	bf00      	nop
		}
	}
	return res;
 8008782:	7ffb      	ldrb	r3, [r7, #31]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3724      	adds	r7, #36	@ 0x24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}

0800878c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d904      	bls.n	80087b2 <remove_chain+0x26>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d301      	bcc.n	80087b6 <remove_chain+0x2a>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e04b      	b.n	800884e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00c      	beq.n	80087d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80087bc:	f04f 32ff 	mov.w	r2, #4294967295
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	69b8      	ldr	r0, [r7, #24]
 80087c4:	f7ff fef8 	bl	80085b8 <put_fat>
 80087c8:	4603      	mov	r3, r0
 80087ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80087cc:	7ffb      	ldrb	r3, [r7, #31]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <remove_chain+0x4a>
 80087d2:	7ffb      	ldrb	r3, [r7, #31]
 80087d4:	e03b      	b.n	800884e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f7ff fe46 	bl	800846a <get_fat>
 80087de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d031      	beq.n	800884a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <remove_chain+0x64>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e02e      	b.n	800884e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d101      	bne.n	80087fc <remove_chain+0x70>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e028      	b.n	800884e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80087fc:	2200      	movs	r2, #0
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	69b8      	ldr	r0, [r7, #24]
 8008802:	f7ff fed9 	bl	80085b8 <put_fat>
 8008806:	4603      	mov	r3, r0
 8008808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800880a:	7ffb      	ldrb	r3, [r7, #31]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <remove_chain+0x88>
 8008810:	7ffb      	ldrb	r3, [r7, #31]
 8008812:	e01c      	b.n	800884e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	3b02      	subs	r3, #2
 800881e:	429a      	cmp	r2, r3
 8008820:	d20b      	bcs.n	800883a <remove_chain+0xae>
			fs->free_clst++;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	f043 0301 	orr.w	r3, r3, #1
 8008834:	b2da      	uxtb	r2, r3
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	429a      	cmp	r2, r3
 8008846:	d3c6      	bcc.n	80087d6 <remove_chain+0x4a>
 8008848:	e000      	b.n	800884c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800884a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3720      	adds	r7, #32
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b088      	sub	sp, #32
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10d      	bne.n	8008888 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <create_chain+0x2c>
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	429a      	cmp	r2, r3
 8008880:	d31b      	bcc.n	80088ba <create_chain+0x64>
 8008882:	2301      	movs	r3, #1
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	e018      	b.n	80088ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fded 	bl	800846a <get_fat>
 8008890:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d801      	bhi.n	800889c <create_chain+0x46>
 8008898:	2301      	movs	r3, #1
 800889a:	e070      	b.n	800897e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d101      	bne.n	80088a8 <create_chain+0x52>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	e06a      	b.n	800897e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d201      	bcs.n	80088b6 <create_chain+0x60>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	e063      	b.n	800897e <create_chain+0x128>
		scl = clst;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3301      	adds	r3, #1
 80088c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d307      	bcc.n	80088de <create_chain+0x88>
				ncl = 2;
 80088ce:	2302      	movs	r3, #2
 80088d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d901      	bls.n	80088de <create_chain+0x88>
 80088da:	2300      	movs	r3, #0
 80088dc:	e04f      	b.n	800897e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80088de:	69f9      	ldr	r1, [r7, #28]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fdc2 	bl	800846a <get_fat>
 80088e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d003      	beq.n	80088fc <create_chain+0xa6>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d101      	bne.n	8008900 <create_chain+0xaa>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	e03e      	b.n	800897e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	429a      	cmp	r2, r3
 8008906:	d1da      	bne.n	80088be <create_chain+0x68>
 8008908:	2300      	movs	r3, #0
 800890a:	e038      	b.n	800897e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800890c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	69f9      	ldr	r1, [r7, #28]
 8008914:	6938      	ldr	r0, [r7, #16]
 8008916:	f7ff fe4f 	bl	80085b8 <put_fat>
 800891a:	4603      	mov	r3, r0
 800891c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <create_chain+0xe2>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d006      	beq.n	8008938 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6938      	ldr	r0, [r7, #16]
 8008930:	f7ff fe42 	bl	80085b8 <put_fat>
 8008934:	4603      	mov	r3, r0
 8008936:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d116      	bne.n	800896c <create_chain+0x116>
		fs->last_clst = ncl;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	3b02      	subs	r3, #2
 800894e:	429a      	cmp	r2, r3
 8008950:	d804      	bhi.n	800895c <create_chain+0x106>
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	1e5a      	subs	r2, r3, #1
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	791b      	ldrb	r3, [r3, #4]
 8008960:	f043 0301 	orr.w	r3, r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	711a      	strb	r2, [r3, #4]
 800896a:	e007      	b.n	800897c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d102      	bne.n	8008978 <create_chain+0x122>
 8008972:	f04f 33ff 	mov.w	r3, #4294967295
 8008976:	e000      	b.n	800897a <create_chain+0x124>
 8008978:	2301      	movs	r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008986:	b480      	push	{r7}
 8008988:	b087      	sub	sp, #28
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899a:	3304      	adds	r3, #4
 800899c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	0a5b      	lsrs	r3, r3, #9
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	8952      	ldrh	r2, [r2, #10]
 80089a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80089aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	613a      	str	r2, [r7, #16]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <clmt_clust+0x3a>
 80089bc:	2300      	movs	r3, #0
 80089be:	e010      	b.n	80089e2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d307      	bcc.n	80089d8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3304      	adds	r3, #4
 80089d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089d6:	e7e9      	b.n	80089ac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80089d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	4413      	add	r3, r2
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a04:	d204      	bcs.n	8008a10 <dir_sdi+0x22>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e063      	b.n	8008adc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <dir_sdi+0x46>
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d902      	bls.n	8008a34 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10c      	bne.n	8008a54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	8912      	ldrh	r2, [r2, #8]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d301      	bcc.n	8008a4a <dir_sdi+0x5c>
 8008a46:	2302      	movs	r3, #2
 8008a48:	e048      	b.n	8008adc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	61da      	str	r2, [r3, #28]
 8008a52:	e029      	b.n	8008aa8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	895b      	ldrh	r3, [r3, #10]
 8008a58:	025b      	lsls	r3, r3, #9
 8008a5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a5c:	e019      	b.n	8008a92 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6979      	ldr	r1, [r7, #20]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fd01 	bl	800846a <get_fat>
 8008a68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d101      	bne.n	8008a76 <dir_sdi+0x88>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e032      	b.n	8008adc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d904      	bls.n	8008a86 <dir_sdi+0x98>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d301      	bcc.n	8008a8a <dir_sdi+0x9c>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e028      	b.n	8008adc <dir_sdi+0xee>
			ofs -= csz;
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d2e1      	bcs.n	8008a5e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a9a:	6979      	ldr	r1, [r7, #20]
 8008a9c:	6938      	ldr	r0, [r7, #16]
 8008a9e:	f7ff fcc5 	bl	800842c <clust2sect>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <dir_sdi+0xcc>
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e010      	b.n	8008adc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69da      	ldr	r2, [r3, #28]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	0a5b      	lsrs	r3, r3, #9
 8008ac2:	441a      	add	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad4:	441a      	add	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	3320      	adds	r3, #32
 8008afa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <dir_next+0x28>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b0a:	d301      	bcc.n	8008b10 <dir_next+0x2c>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	e0aa      	b.n	8008c66 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 8098 	bne.w	8008c4c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10b      	bne.n	8008b46 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	8912      	ldrh	r2, [r2, #8]
 8008b36:	4293      	cmp	r3, r2
 8008b38:	f0c0 8088 	bcc.w	8008c4c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	61da      	str	r2, [r3, #28]
 8008b42:	2304      	movs	r3, #4
 8008b44:	e08f      	b.n	8008c66 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	0a5b      	lsrs	r3, r3, #9
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	8952      	ldrh	r2, [r2, #10]
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	4013      	ands	r3, r2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d17a      	bne.n	8008c4c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f7ff fc83 	bl	800846a <get_fat>
 8008b64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d801      	bhi.n	8008b70 <dir_next+0x8c>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e07a      	b.n	8008c66 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d101      	bne.n	8008b7c <dir_next+0x98>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e074      	b.n	8008c66 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d358      	bcc.n	8008c38 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	61da      	str	r2, [r3, #28]
 8008b92:	2304      	movs	r3, #4
 8008b94:	e067      	b.n	8008c66 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	f7ff fe59 	bl	8008856 <create_chain>
 8008ba4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <dir_next+0xcc>
 8008bac:	2307      	movs	r3, #7
 8008bae:	e05a      	b.n	8008c66 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <dir_next+0xd6>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e055      	b.n	8008c66 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc0:	d101      	bne.n	8008bc6 <dir_next+0xe2>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e04f      	b.n	8008c66 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff fb50 	bl	800826c <sync_window>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <dir_next+0xf2>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e047      	b.n	8008c66 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3330      	adds	r3, #48	@ 0x30
 8008bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff f97a 	bl	8007eda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	6979      	ldr	r1, [r7, #20]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fc1d 	bl	800842c <clust2sect>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008bf8:	e012      	b.n	8008c20 <dir_next+0x13c>
						fs->wflag = 1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff fb33 	bl	800826c <sync_window>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <dir_next+0x12c>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e02a      	b.n	8008c66 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	3301      	adds	r3, #1
 8008c14:	613b      	str	r3, [r7, #16]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	895b      	ldrh	r3, [r3, #10]
 8008c24:	461a      	mov	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d3e6      	bcc.n	8008bfa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad2      	subs	r2, r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008c3e:	6979      	ldr	r1, [r7, #20]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f7ff fbf3 	bl	800842c <clust2sect>
 8008c46:	4602      	mov	r2, r0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	441a      	add	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c7e:	2100      	movs	r1, #0
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff feb4 	bl	80089ee <dir_sdi>
 8008c86:	4603      	mov	r3, r0
 8008c88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d12b      	bne.n	8008ce8 <dir_alloc+0x7a>
		n = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff fb2a 	bl	80082f4 <move_window>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d11d      	bne.n	8008ce6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2be5      	cmp	r3, #229	@ 0xe5
 8008cb2:	d004      	beq.n	8008cbe <dir_alloc+0x50>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d107      	bne.n	8008cce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d102      	bne.n	8008cd2 <dir_alloc+0x64>
 8008ccc:	e00c      	b.n	8008ce8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff ff05 	bl	8008ae4 <dir_next>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0d7      	beq.n	8008c94 <dir_alloc+0x26>
 8008ce4:	e000      	b.n	8008ce8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008ce6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d101      	bne.n	8008cf2 <dir_alloc+0x84>
 8008cee:	2307      	movs	r3, #7
 8008cf0:	75fb      	strb	r3, [r7, #23]
	return res;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	331a      	adds	r3, #26
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff f842 	bl	8007d94 <ld_word>
 8008d10:	4603      	mov	r3, r0
 8008d12:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d109      	bne.n	8008d30 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff f837 	bl	8007d94 <ld_word>
 8008d26:	4603      	mov	r3, r0
 8008d28:	041b      	lsls	r3, r3, #16
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d30:	68fb      	ldr	r3, [r7, #12]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	331a      	adds	r3, #26
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	b292      	uxth	r2, r2
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff f85a 	bl	8007e0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d109      	bne.n	8008d72 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f103 0214 	add.w	r2, r3, #20
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	0c1b      	lsrs	r3, r3, #16
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f7ff f84c 	bl	8007e0a <st_word>
	}
}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b086      	sub	sp, #24
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fe2f 	bl	80089ee <dir_sdi>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <dir_find+0x24>
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	e03e      	b.n	8008e1c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6938      	ldr	r0, [r7, #16]
 8008da6:	f7ff faa5 	bl	80082f4 <move_window>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d12f      	bne.n	8008e14 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d102      	bne.n	8008dc8 <dir_find+0x4e>
 8008dc2:	2304      	movs	r3, #4
 8008dc4:	75fb      	strb	r3, [r7, #23]
 8008dc6:	e028      	b.n	8008e1a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	330b      	adds	r3, #11
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	330b      	adds	r3, #11
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <dir_find+0x86>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a18      	ldr	r0, [r3, #32]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3324      	adds	r3, #36	@ 0x24
 8008df2:	220b      	movs	r2, #11
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7ff f88b 	bl	8007f10 <mem_cmp>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fe6e 	bl	8008ae4 <dir_next>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0c5      	beq.n	8008d9e <dir_find+0x24>
 8008e12:	e002      	b.n	8008e1a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008e14:	bf00      	nop
 8008e16:	e000      	b.n	8008e1a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e18:	bf00      	nop

	return res;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008e32:	2101      	movs	r1, #1
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff1a 	bl	8008c6e <dir_alloc>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d11c      	bne.n	8008e7e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	68b8      	ldr	r0, [r7, #8]
 8008e4c:	f7ff fa52 	bl	80082f4 <move_window>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d111      	bne.n	8008e7e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff f839 	bl	8007eda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a18      	ldr	r0, [r3, #32]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3324      	adds	r3, #36	@ 0x24
 8008e70:	220b      	movs	r2, #11
 8008e72:	4619      	mov	r1, r3
 8008e74:	f7ff f810 	bl	8007e98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3324      	adds	r3, #36	@ 0x24
 8008e9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008e9e:	220b      	movs	r2, #11
 8008ea0:	2120      	movs	r1, #32
 8008ea2:	68b8      	ldr	r0, [r7, #8]
 8008ea4:	f7ff f819 	bl	8007eda <mem_set>
	si = i = 0; ni = 8;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	61fa      	str	r2, [r7, #28]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ec2:	7efb      	ldrb	r3, [r7, #27]
 8008ec4:	2b20      	cmp	r3, #32
 8008ec6:	d94e      	bls.n	8008f66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ec8:	7efb      	ldrb	r3, [r7, #27]
 8008eca:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ecc:	d006      	beq.n	8008edc <create_name+0x54>
 8008ece:	7efb      	ldrb	r3, [r7, #27]
 8008ed0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ed2:	d110      	bne.n	8008ef6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008ed4:	e002      	b.n	8008edc <create_name+0x54>
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	61fb      	str	r3, [r7, #28]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ee6:	d0f6      	beq.n	8008ed6 <create_name+0x4e>
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ef2:	d0f0      	beq.n	8008ed6 <create_name+0x4e>
			break;
 8008ef4:	e038      	b.n	8008f68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008ef6:	7efb      	ldrb	r3, [r7, #27]
 8008ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008efa:	d003      	beq.n	8008f04 <create_name+0x7c>
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d30c      	bcc.n	8008f1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b0b      	cmp	r3, #11
 8008f08:	d002      	beq.n	8008f10 <create_name+0x88>
 8008f0a:	7efb      	ldrb	r3, [r7, #27]
 8008f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f0e:	d001      	beq.n	8008f14 <create_name+0x8c>
 8008f10:	2306      	movs	r3, #6
 8008f12:	e044      	b.n	8008f9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008f14:	2308      	movs	r3, #8
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	230b      	movs	r3, #11
 8008f1a:	617b      	str	r3, [r7, #20]
			continue;
 8008f1c:	e022      	b.n	8008f64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008f1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	da04      	bge.n	8008f30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008f26:	7efb      	ldrb	r3, [r7, #27]
 8008f28:	3b80      	subs	r3, #128	@ 0x80
 8008f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <create_name+0x120>)
 8008f2c:	5cd3      	ldrb	r3, [r2, r3]
 8008f2e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008f30:	7efb      	ldrb	r3, [r7, #27]
 8008f32:	4619      	mov	r1, r3
 8008f34:	481d      	ldr	r0, [pc, #116]	@ (8008fac <create_name+0x124>)
 8008f36:	f7ff f812 	bl	8007f5e <chk_chr>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <create_name+0xbc>
 8008f40:	2306      	movs	r3, #6
 8008f42:	e02c      	b.n	8008f9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008f44:	7efb      	ldrb	r3, [r7, #27]
 8008f46:	2b60      	cmp	r3, #96	@ 0x60
 8008f48:	d905      	bls.n	8008f56 <create_name+0xce>
 8008f4a:	7efb      	ldrb	r3, [r7, #27]
 8008f4c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f4e:	d802      	bhi.n	8008f56 <create_name+0xce>
 8008f50:	7efb      	ldrb	r3, [r7, #27]
 8008f52:	3b20      	subs	r3, #32
 8008f54:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	613a      	str	r2, [r7, #16]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4413      	add	r3, r2
 8008f60:	7efa      	ldrb	r2, [r7, #27]
 8008f62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008f64:	e7a6      	b.n	8008eb4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	441a      	add	r2, r3
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <create_name+0xf4>
 8008f78:	2306      	movs	r3, #6
 8008f7a:	e010      	b.n	8008f9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2be5      	cmp	r3, #229	@ 0xe5
 8008f82:	d102      	bne.n	8008f8a <create_name+0x102>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2205      	movs	r2, #5
 8008f88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f8a:	7efb      	ldrb	r3, [r7, #27]
 8008f8c:	2b20      	cmp	r3, #32
 8008f8e:	d801      	bhi.n	8008f94 <create_name+0x10c>
 8008f90:	2204      	movs	r2, #4
 8008f92:	e000      	b.n	8008f96 <create_name+0x10e>
 8008f94:	2200      	movs	r2, #0
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	330b      	adds	r3, #11
 8008f9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008f9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	0800caec 	.word	0x0800caec
 8008fac:	0800ca50 	.word	0x0800ca50

08008fb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008fc4:	e002      	b.n	8008fcc <follow_path+0x1c>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fd2:	d0f8      	beq.n	8008fc6 <follow_path+0x16>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fda:	d0f4      	beq.n	8008fc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b1f      	cmp	r3, #31
 8008fe8:	d80a      	bhi.n	8009000 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2280      	movs	r2, #128	@ 0x80
 8008fee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fcfa 	bl	80089ee <dir_sdi>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]
 8008ffe:	e043      	b.n	8009088 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009000:	463b      	mov	r3, r7
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff3f 	bl	8008e88 <create_name>
 800900a:	4603      	mov	r3, r0
 800900c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d134      	bne.n	800907e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff feb0 	bl	8008d7a <dir_find>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009024:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	2b04      	cmp	r3, #4
 8009030:	d127      	bne.n	8009082 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b00      	cmp	r3, #0
 800903a:	d122      	bne.n	8009082 <follow_path+0xd2>
 800903c:	2305      	movs	r3, #5
 800903e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009040:	e01f      	b.n	8009082 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009042:	7afb      	ldrb	r3, [r7, #11]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d11c      	bne.n	8009086 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	799b      	ldrb	r3, [r3, #6]
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009058:	2305      	movs	r3, #5
 800905a:	75fb      	strb	r3, [r7, #23]
 800905c:	e014      	b.n	8009088 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906c:	4413      	add	r3, r2
 800906e:	4619      	mov	r1, r3
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff fe43 	bl	8008cfc <ld_clust>
 8009076:	4602      	mov	r2, r0
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800907c:	e7c0      	b.n	8009000 <follow_path+0x50>
			if (res != FR_OK) break;
 800907e:	bf00      	nop
 8009080:	e002      	b.n	8009088 <follow_path+0xd8>
				break;
 8009082:	bf00      	nop
 8009084:	e000      	b.n	8009088 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009086:	bf00      	nop
			}
		}
	}

	return res;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009092:	b480      	push	{r7}
 8009094:	b087      	sub	sp, #28
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800909a:	f04f 33ff 	mov.w	r3, #4294967295
 800909e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d031      	beq.n	800910c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e002      	b.n	80090b6 <get_ldnumber+0x24>
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	3301      	adds	r3, #1
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d903      	bls.n	80090c6 <get_ldnumber+0x34>
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80090c4:	d1f4      	bne.n	80090b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80090cc:	d11c      	bne.n	8009108 <get_ldnumber+0x76>
			tp = *path;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	60fa      	str	r2, [r7, #12]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	3b30      	subs	r3, #48	@ 0x30
 80090de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b09      	cmp	r3, #9
 80090e4:	d80e      	bhi.n	8009104 <get_ldnumber+0x72>
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d10a      	bne.n	8009104 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d107      	bne.n	8009104 <get_ldnumber+0x72>
					vol = (int)i;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3301      	adds	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	e002      	b.n	800910e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009108:	2300      	movs	r3, #0
 800910a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800910c:	693b      	ldr	r3, [r7, #16]
}
 800910e:	4618      	mov	r0, r3
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
	...

0800911c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	70da      	strb	r2, [r3, #3]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff f8dc 	bl	80082f4 <move_window>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <check_fs+0x2a>
 8009142:	2304      	movs	r3, #4
 8009144:	e038      	b.n	80091b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3330      	adds	r3, #48	@ 0x30
 800914a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fe20 	bl	8007d94 <ld_word>
 8009154:	4603      	mov	r3, r0
 8009156:	461a      	mov	r2, r3
 8009158:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800915c:	429a      	cmp	r2, r3
 800915e:	d001      	beq.n	8009164 <check_fs+0x48>
 8009160:	2303      	movs	r3, #3
 8009162:	e029      	b.n	80091b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800916a:	2be9      	cmp	r3, #233	@ 0xe9
 800916c:	d009      	beq.n	8009182 <check_fs+0x66>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009174:	2beb      	cmp	r3, #235	@ 0xeb
 8009176:	d11e      	bne.n	80091b6 <check_fs+0x9a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800917e:	2b90      	cmp	r3, #144	@ 0x90
 8009180:	d119      	bne.n	80091b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3330      	adds	r3, #48	@ 0x30
 8009186:	3336      	adds	r3, #54	@ 0x36
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe fe1b 	bl	8007dc4 <ld_dword>
 800918e:	4603      	mov	r3, r0
 8009190:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009194:	4a0a      	ldr	r2, [pc, #40]	@ (80091c0 <check_fs+0xa4>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d101      	bne.n	800919e <check_fs+0x82>
 800919a:	2300      	movs	r3, #0
 800919c:	e00c      	b.n	80091b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3330      	adds	r3, #48	@ 0x30
 80091a2:	3352      	adds	r3, #82	@ 0x52
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fe0d 	bl	8007dc4 <ld_dword>
 80091aa:	4603      	mov	r3, r0
 80091ac:	4a05      	ldr	r2, [pc, #20]	@ (80091c4 <check_fs+0xa8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d101      	bne.n	80091b6 <check_fs+0x9a>
 80091b2:	2300      	movs	r3, #0
 80091b4:	e000      	b.n	80091b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80091b6:	2302      	movs	r3, #2
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	00544146 	.word	0x00544146
 80091c4:	33544146 	.word	0x33544146

080091c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b096      	sub	sp, #88	@ 0x58
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff ff58 	bl	8009092 <get_ldnumber>
 80091e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80091e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	da01      	bge.n	80091ee <find_volume+0x26>
 80091ea:	230b      	movs	r3, #11
 80091ec:	e22d      	b.n	800964a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80091ee:	4aa1      	ldr	r2, [pc, #644]	@ (8009474 <find_volume+0x2ac>)
 80091f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80091f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <find_volume+0x3a>
 80091fe:	230c      	movs	r3, #12
 8009200:	e223      	b.n	800964a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009206:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	f023 0301 	bic.w	r3, r3, #1
 800920e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01a      	beq.n	800924e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fd19 	bl	8007c54 <disk_status>
 8009222:	4603      	mov	r3, r0
 8009224:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009228:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10c      	bne.n	800924e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <find_volume+0x82>
 800923a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009246:	230a      	movs	r3, #10
 8009248:	e1ff      	b.n	800964a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800924a:	2300      	movs	r3, #0
 800924c:	e1fd      	b.n	800964a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	2200      	movs	r2, #0
 8009252:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009256:	b2da      	uxtb	r2, r3
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800925c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fd11 	bl	8007c88 <disk_initialize>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800926c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009278:	2303      	movs	r3, #3
 800927a:	e1e6      	b.n	800964a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <find_volume+0xca>
 8009282:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800928e:	230a      	movs	r3, #10
 8009290:	e1db      	b.n	800964a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009296:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009298:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800929a:	f7ff ff3f 	bl	800911c <check_fs>
 800929e:	4603      	mov	r3, r0
 80092a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80092a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d149      	bne.n	8009340 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092ac:	2300      	movs	r3, #0
 80092ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80092b0:	e01e      	b.n	80092f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80092c0:	4413      	add	r3, r2
 80092c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	3304      	adds	r3, #4
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d006      	beq.n	80092dc <find_volume+0x114>
 80092ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d0:	3308      	adds	r3, #8
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fd76 	bl	8007dc4 <ld_dword>
 80092d8:	4602      	mov	r2, r0
 80092da:	e000      	b.n	80092de <find_volume+0x116>
 80092dc:	2200      	movs	r2, #0
 80092de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	3358      	adds	r3, #88	@ 0x58
 80092e4:	443b      	add	r3, r7
 80092e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ec:	3301      	adds	r3, #1
 80092ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80092f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d9dd      	bls.n	80092b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80092f6:	2300      	movs	r3, #0
 80092f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80092fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <find_volume+0x13e>
 8009300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009302:	3b01      	subs	r3, #1
 8009304:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	3358      	adds	r3, #88	@ 0x58
 800930c:	443b      	add	r3, r7
 800930e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009312:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <find_volume+0x15e>
 800931a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800931c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800931e:	f7ff fefd 	bl	800911c <check_fs>
 8009322:	4603      	mov	r3, r0
 8009324:	e000      	b.n	8009328 <find_volume+0x160>
 8009326:	2303      	movs	r3, #3
 8009328:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800932c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009330:	2b01      	cmp	r3, #1
 8009332:	d905      	bls.n	8009340 <find_volume+0x178>
 8009334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009336:	3301      	adds	r3, #1
 8009338:	643b      	str	r3, [r7, #64]	@ 0x40
 800933a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800933c:	2b03      	cmp	r3, #3
 800933e:	d9e2      	bls.n	8009306 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009340:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009344:	2b04      	cmp	r3, #4
 8009346:	d101      	bne.n	800934c <find_volume+0x184>
 8009348:	2301      	movs	r3, #1
 800934a:	e17e      	b.n	800964a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800934c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009350:	2b01      	cmp	r3, #1
 8009352:	d901      	bls.n	8009358 <find_volume+0x190>
 8009354:	230d      	movs	r3, #13
 8009356:	e178      	b.n	800964a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	3330      	adds	r3, #48	@ 0x30
 800935c:	330b      	adds	r3, #11
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fd18 	bl	8007d94 <ld_word>
 8009364:	4603      	mov	r3, r0
 8009366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800936a:	d001      	beq.n	8009370 <find_volume+0x1a8>
 800936c:	230d      	movs	r3, #13
 800936e:	e16c      	b.n	800964a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	3330      	adds	r3, #48	@ 0x30
 8009374:	3316      	adds	r3, #22
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd0c 	bl	8007d94 <ld_word>
 800937c:	4603      	mov	r3, r0
 800937e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <find_volume+0x1cc>
 8009386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009388:	3330      	adds	r3, #48	@ 0x30
 800938a:	3324      	adds	r3, #36	@ 0x24
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fd19 	bl	8007dc4 <ld_dword>
 8009392:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009398:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	789b      	ldrb	r3, [r3, #2]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d005      	beq.n	80093b8 <find_volume+0x1f0>
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	789b      	ldrb	r3, [r3, #2]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d001      	beq.n	80093b8 <find_volume+0x1f0>
 80093b4:	230d      	movs	r3, #13
 80093b6:	e148      	b.n	800964a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	789b      	ldrb	r3, [r3, #2]
 80093bc:	461a      	mov	r2, r3
 80093be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093c0:	fb02 f303 	mul.w	r3, r2, r3
 80093c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80093c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093cc:	461a      	mov	r2, r3
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80093d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d4:	895b      	ldrh	r3, [r3, #10]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d008      	beq.n	80093ec <find_volume+0x224>
 80093da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093dc:	895b      	ldrh	r3, [r3, #10]
 80093de:	461a      	mov	r2, r3
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	895b      	ldrh	r3, [r3, #10]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <find_volume+0x228>
 80093ec:	230d      	movs	r3, #13
 80093ee:	e12c      	b.n	800964a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	3330      	adds	r3, #48	@ 0x30
 80093f4:	3311      	adds	r3, #17
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fccc 	bl	8007d94 <ld_word>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	891b      	ldrh	r3, [r3, #8]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <find_volume+0x24e>
 8009412:	230d      	movs	r3, #13
 8009414:	e119      	b.n	800964a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	3330      	adds	r3, #48	@ 0x30
 800941a:	3313      	adds	r3, #19
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fcb9 	bl	8007d94 <ld_word>
 8009422:	4603      	mov	r3, r0
 8009424:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <find_volume+0x272>
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	3330      	adds	r3, #48	@ 0x30
 8009430:	3320      	adds	r3, #32
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe fcc6 	bl	8007dc4 <ld_dword>
 8009438:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	3330      	adds	r3, #48	@ 0x30
 800943e:	330e      	adds	r3, #14
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fca7 	bl	8007d94 <ld_word>
 8009446:	4603      	mov	r3, r0
 8009448:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800944a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <find_volume+0x28c>
 8009450:	230d      	movs	r3, #13
 8009452:	e0fa      	b.n	800964a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009454:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009458:	4413      	add	r3, r2
 800945a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800945c:	8912      	ldrh	r2, [r2, #8]
 800945e:	0912      	lsrs	r2, r2, #4
 8009460:	b292      	uxth	r2, r2
 8009462:	4413      	add	r3, r2
 8009464:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	429a      	cmp	r2, r3
 800946c:	d204      	bcs.n	8009478 <find_volume+0x2b0>
 800946e:	230d      	movs	r3, #13
 8009470:	e0eb      	b.n	800964a <find_volume+0x482>
 8009472:	bf00      	nop
 8009474:	20000754 	.word	0x20000754
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800947a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009480:	8952      	ldrh	r2, [r2, #10]
 8009482:	fbb3 f3f2 	udiv	r3, r3, r2
 8009486:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <find_volume+0x2ca>
 800948e:	230d      	movs	r3, #13
 8009490:	e0db      	b.n	800964a <find_volume+0x482>
		fmt = FS_FAT32;
 8009492:	2303      	movs	r3, #3
 8009494:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800949e:	4293      	cmp	r3, r2
 80094a0:	d802      	bhi.n	80094a8 <find_volume+0x2e0>
 80094a2:	2302      	movs	r3, #2
 80094a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d802      	bhi.n	80094b8 <find_volume+0x2f0>
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	1c9a      	adds	r2, r3, #2
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80094c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094c4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80094c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80094c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094ca:	441a      	add	r2, r3
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80094d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	441a      	add	r2, r3
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80094da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d11e      	bne.n	8009520 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	3330      	adds	r3, #48	@ 0x30
 80094e6:	332a      	adds	r3, #42	@ 0x2a
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fc53 	bl	8007d94 <ld_word>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <find_volume+0x330>
 80094f4:	230d      	movs	r3, #13
 80094f6:	e0a8      	b.n	800964a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80094f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fa:	891b      	ldrh	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <find_volume+0x33c>
 8009500:	230d      	movs	r3, #13
 8009502:	e0a2      	b.n	800964a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009506:	3330      	adds	r3, #48	@ 0x30
 8009508:	332c      	adds	r3, #44	@ 0x2c
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe fc5a 	bl	8007dc4 <ld_dword>
 8009510:	4602      	mov	r2, r0
 8009512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009514:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	647b      	str	r3, [r7, #68]	@ 0x44
 800951e:	e01f      	b.n	8009560 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	891b      	ldrh	r3, [r3, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <find_volume+0x364>
 8009528:	230d      	movs	r3, #13
 800952a:	e08e      	b.n	800964a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	6a1a      	ldr	r2, [r3, #32]
 8009530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009532:	441a      	add	r2, r3
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800953c:	2b02      	cmp	r3, #2
 800953e:	d103      	bne.n	8009548 <find_volume+0x380>
 8009540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	e00a      	b.n	800955e <find_volume+0x396>
 8009548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954a:	695a      	ldr	r2, [r3, #20]
 800954c:	4613      	mov	r3, r2
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	4413      	add	r3, r2
 8009552:	085a      	lsrs	r2, r3, #1
 8009554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800955e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009566:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800956a:	0a5b      	lsrs	r3, r3, #9
 800956c:	429a      	cmp	r2, r3
 800956e:	d201      	bcs.n	8009574 <find_volume+0x3ac>
 8009570:	230d      	movs	r3, #13
 8009572:	e06a      	b.n	800964a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	f04f 32ff 	mov.w	r2, #4294967295
 800957a:	611a      	str	r2, [r3, #16]
 800957c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957e:	691a      	ldr	r2, [r3, #16]
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009586:	2280      	movs	r2, #128	@ 0x80
 8009588:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800958a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800958e:	2b03      	cmp	r3, #3
 8009590:	d149      	bne.n	8009626 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	3330      	adds	r3, #48	@ 0x30
 8009596:	3330      	adds	r3, #48	@ 0x30
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fbfb 	bl	8007d94 <ld_word>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d140      	bne.n	8009626 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80095a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a6:	3301      	adds	r3, #1
 80095a8:	4619      	mov	r1, r3
 80095aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095ac:	f7fe fea2 	bl	80082f4 <move_window>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d137      	bne.n	8009626 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	2200      	movs	r2, #0
 80095ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80095bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095be:	3330      	adds	r3, #48	@ 0x30
 80095c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fbe5 	bl	8007d94 <ld_word>
 80095ca:	4603      	mov	r3, r0
 80095cc:	461a      	mov	r2, r3
 80095ce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d127      	bne.n	8009626 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80095d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d8:	3330      	adds	r3, #48	@ 0x30
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fbf2 	bl	8007dc4 <ld_dword>
 80095e0:	4603      	mov	r3, r0
 80095e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009654 <find_volume+0x48c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d11e      	bne.n	8009626 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	3330      	adds	r3, #48	@ 0x30
 80095ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fbe7 	bl	8007dc4 <ld_dword>
 80095f6:	4603      	mov	r3, r0
 80095f8:	4a17      	ldr	r2, [pc, #92]	@ (8009658 <find_volume+0x490>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d113      	bne.n	8009626 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80095fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009600:	3330      	adds	r3, #48	@ 0x30
 8009602:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe fbdc 	bl	8007dc4 <ld_dword>
 800960c:	4602      	mov	r2, r0
 800960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009610:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	3330      	adds	r3, #48	@ 0x30
 8009616:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fbd2 	bl	8007dc4 <ld_dword>
 8009620:	4602      	mov	r2, r0
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009628:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800962c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800962e:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <find_volume+0x494>)
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	4b09      	ldr	r3, [pc, #36]	@ (800965c <find_volume+0x494>)
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	4b08      	ldr	r3, [pc, #32]	@ (800965c <find_volume+0x494>)
 800963c:	881a      	ldrh	r2, [r3, #0]
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009642:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009644:	f7fe fdee 	bl	8008224 <clear_lock>
#endif
	return FR_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3758      	adds	r7, #88	@ 0x58
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	41615252 	.word	0x41615252
 8009658:	61417272 	.word	0x61417272
 800965c:	20000758 	.word	0x20000758

08009660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800966a:	2309      	movs	r3, #9
 800966c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d01c      	beq.n	80096ae <validate+0x4e>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d018      	beq.n	80096ae <validate+0x4e>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d013      	beq.n	80096ae <validate+0x4e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	889a      	ldrh	r2, [r3, #4]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	88db      	ldrh	r3, [r3, #6]
 8009690:	429a      	cmp	r2, r3
 8009692:	d10c      	bne.n	80096ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fada 	bl	8007c54 <disk_status>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <validate+0x4e>
			res = FR_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <validate+0x5a>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	e000      	b.n	80096bc <validate+0x5c>
 80096ba:	2300      	movs	r3, #0
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	6013      	str	r3, [r2, #0]
	return res;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	4613      	mov	r3, r2
 80096d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80096de:	f107 0310 	add.w	r3, r7, #16
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fcd5 	bl	8009092 <get_ldnumber>
 80096e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da01      	bge.n	80096f4 <f_mount+0x28>
 80096f0:	230b      	movs	r3, #11
 80096f2:	e02b      	b.n	800974c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80096f4:	4a17      	ldr	r2, [pc, #92]	@ (8009754 <f_mount+0x88>)
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009704:	69b8      	ldr	r0, [r7, #24]
 8009706:	f7fe fd8d 	bl	8008224 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	490d      	ldr	r1, [pc, #52]	@ (8009754 <f_mount+0x88>)
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <f_mount+0x66>
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d001      	beq.n	8009736 <f_mount+0x6a>
 8009732:	2300      	movs	r3, #0
 8009734:	e00a      	b.n	800974c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009736:	f107 010c 	add.w	r1, r7, #12
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	2200      	movs	r2, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff fd41 	bl	80091c8 <find_volume>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800974a:	7dfb      	ldrb	r3, [r7, #23]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000754 	.word	0x20000754

08009758 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b098      	sub	sp, #96	@ 0x60
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <f_open+0x18>
 800976c:	2309      	movs	r3, #9
 800976e:	e1a9      	b.n	8009ac4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009776:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009778:	79fa      	ldrb	r2, [r7, #7]
 800977a:	f107 0110 	add.w	r1, r7, #16
 800977e:	f107 0308 	add.w	r3, r7, #8
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff fd20 	bl	80091c8 <find_volume>
 8009788:	4603      	mov	r3, r0
 800978a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800978e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009792:	2b00      	cmp	r3, #0
 8009794:	f040 818d 	bne.w	8009ab2 <f_open+0x35a>
		dj.obj.fs = fs;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	f107 0314 	add.w	r3, r7, #20
 80097a2:	4611      	mov	r1, r2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff fc03 	bl	8008fb0 <follow_path>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80097b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d118      	bne.n	80097ea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80097b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097bc:	b25b      	sxtb	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da03      	bge.n	80097ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80097c2:	2306      	movs	r3, #6
 80097c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80097c8:	e00f      	b.n	80097ea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	bf8c      	ite	hi
 80097d0:	2301      	movhi	r3, #1
 80097d2:	2300      	movls	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	461a      	mov	r2, r3
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fbd8 	bl	8007f94 <chk_lock>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	f003 031c 	and.w	r3, r3, #28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d07f      	beq.n	80098f4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80097f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80097fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009800:	2b04      	cmp	r3, #4
 8009802:	d10e      	bne.n	8009822 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009804:	f7fe fc22 	bl	800804c <enq_lock>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d006      	beq.n	800981c <f_open+0xc4>
 800980e:	f107 0314 	add.w	r3, r7, #20
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fb06 	bl	8008e24 <dir_register>
 8009818:	4603      	mov	r3, r0
 800981a:	e000      	b.n	800981e <f_open+0xc6>
 800981c:	2312      	movs	r3, #18
 800981e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	f043 0308 	orr.w	r3, r3, #8
 8009828:	71fb      	strb	r3, [r7, #7]
 800982a:	e010      	b.n	800984e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800982c:	7ebb      	ldrb	r3, [r7, #26]
 800982e:	f003 0311 	and.w	r3, r3, #17
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <f_open+0xe6>
					res = FR_DENIED;
 8009836:	2307      	movs	r3, #7
 8009838:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800983c:	e007      	b.n	800984e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <f_open+0xf6>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800984e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009852:	2b00      	cmp	r3, #0
 8009854:	d168      	bne.n	8009928 <f_open+0x1d0>
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	f003 0308 	and.w	r3, r3, #8
 800985c:	2b00      	cmp	r3, #0
 800985e:	d063      	beq.n	8009928 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009860:	f7fb ff6a 	bl	8005738 <get_fattime>
 8009864:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009868:	330e      	adds	r3, #14
 800986a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fae7 	bl	8007e40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009874:	3316      	adds	r3, #22
 8009876:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fae1 	bl	8007e40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800987e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009880:	330b      	adds	r3, #11
 8009882:	2220      	movs	r2, #32
 8009884:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff fa35 	bl	8008cfc <ld_clust>
 8009892:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009898:	2200      	movs	r2, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff fa4d 	bl	8008d3a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80098a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a2:	331c      	adds	r3, #28
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe faca 	bl	8007e40 <st_dword>
					fs->wflag = 1;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2201      	movs	r2, #1
 80098b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80098b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d037      	beq.n	8009928 <f_open+0x1d0>
						dw = fs->winsect;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80098be:	f107 0314 	add.w	r3, r7, #20
 80098c2:	2200      	movs	r2, #0
 80098c4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe ff60 	bl	800878c <remove_chain>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80098d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d126      	bne.n	8009928 <f_open+0x1d0>
							res = move_window(fs, dw);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fd08 	bl	80082f4 <move_window>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098ee:	3a01      	subs	r2, #1
 80098f0:	60da      	str	r2, [r3, #12]
 80098f2:	e019      	b.n	8009928 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80098f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d115      	bne.n	8009928 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80098fc:	7ebb      	ldrb	r3, [r7, #26]
 80098fe:	f003 0310 	and.w	r3, r3, #16
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009906:	2304      	movs	r3, #4
 8009908:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800990c:	e00c      	b.n	8009928 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <f_open+0x1d0>
 8009918:	7ebb      	ldrb	r3, [r7, #26]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <f_open+0x1d0>
						res = FR_DENIED;
 8009922:	2307      	movs	r3, #7
 8009924:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009928:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800992c:	2b00      	cmp	r3, #0
 800992e:	d126      	bne.n	800997e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	f003 0308 	and.w	r3, r3, #8
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009940:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800994a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b01      	cmp	r3, #1
 8009954:	bf8c      	ite	hi
 8009956:	2301      	movhi	r3, #1
 8009958:	2300      	movls	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	f107 0314 	add.w	r3, r7, #20
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f7fe fb93 	bl	8008090 <inc_lock>
 800996a:	4602      	mov	r2, r0
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <f_open+0x226>
 8009978:	2302      	movs	r3, #2
 800997a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800997e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 8095 	bne.w	8009ab2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff f9b4 	bl	8008cfc <ld_clust>
 8009994:	4602      	mov	r2, r0
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800999a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999c:	331c      	adds	r3, #28
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fa10 	bl	8007dc4 <ld_dword>
 80099a4:	4602      	mov	r2, r0
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	88da      	ldrh	r2, [r3, #6]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	79fa      	ldrb	r2, [r7, #7]
 80099c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3330      	adds	r3, #48	@ 0x30
 80099da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099de:	2100      	movs	r1, #0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fa7a 	bl	8007eda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d060      	beq.n	8009ab2 <f_open+0x35a>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d05c      	beq.n	8009ab2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68da      	ldr	r2, [r3, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	895b      	ldrh	r3, [r3, #10]
 8009a04:	025b      	lsls	r3, r3, #9
 8009a06:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a14:	e016      	b.n	8009a44 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fd25 	bl	800846a <get_fat>
 8009a20:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d802      	bhi.n	8009a2e <f_open+0x2d6>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d102      	bne.n	8009a3c <f_open+0x2e4>
 8009a36:	2301      	movs	r3, #1
 8009a38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <f_open+0x2fc>
 8009a4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d8e0      	bhi.n	8009a16 <f_open+0x2be>
				}
				fp->clust = clst;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d127      	bne.n	8009ab2 <f_open+0x35a>
 8009a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d022      	beq.n	8009ab2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fcdb 	bl	800842c <clust2sect>
 8009a76:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <f_open+0x32e>
						res = FR_INT_ERR;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009a84:	e015      	b.n	8009ab2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a88:	0a5a      	lsrs	r2, r3, #9
 8009a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a8c:	441a      	add	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	7858      	ldrb	r0, [r3, #1]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1a      	ldr	r2, [r3, #32]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f7fe f919 	bl	8007cd8 <disk_read>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <f_open+0x35a>
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <f_open+0x368>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3760      	adds	r7, #96	@ 0x60
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08e      	sub	sp, #56	@ 0x38
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f107 0214 	add.w	r2, r7, #20
 8009aea:	4611      	mov	r1, r2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fdb7 	bl	8009660 <validate>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009af8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d107      	bne.n	8009b10 <f_read+0x44>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	7d5b      	ldrb	r3, [r3, #21]
 8009b04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009b08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <f_read+0x4a>
 8009b10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b14:	e115      	b.n	8009d42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	7d1b      	ldrb	r3, [r3, #20]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <f_read+0x5a>
 8009b22:	2307      	movs	r3, #7
 8009b24:	e10d      	b.n	8009d42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	f240 80fe 	bls.w	8009d38 <f_read+0x26c>
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009b40:	e0fa      	b.n	8009d38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 80c6 	bne.w	8009cdc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	0a5b      	lsrs	r3, r3, #9
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	8952      	ldrh	r2, [r2, #10]
 8009b5a:	3a01      	subs	r2, #1
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d12f      	bne.n	8009bc6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b74:	e013      	b.n	8009b9e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	4619      	mov	r1, r3
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7fe fefe 	bl	8008986 <clmt_clust>
 8009b8a:	6338      	str	r0, [r7, #48]	@ 0x30
 8009b8c:	e007      	b.n	8009b9e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fe fc67 	bl	800846a <get_fat>
 8009b9c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d804      	bhi.n	8009bae <f_read+0xe2>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	755a      	strb	r2, [r3, #21]
 8009baa:	2302      	movs	r3, #2
 8009bac:	e0c9      	b.n	8009d42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d104      	bne.n	8009bc0 <f_read+0xf4>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	755a      	strb	r2, [r3, #21]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e0c0      	b.n	8009d42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7fe fc2c 	bl	800842c <clust2sect>
 8009bd4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <f_read+0x11a>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2202      	movs	r2, #2
 8009be0:	755a      	strb	r2, [r3, #21]
 8009be2:	2302      	movs	r3, #2
 8009be4:	e0ad      	b.n	8009d42 <f_read+0x276>
			sect += csect;
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0a5b      	lsrs	r3, r3, #9
 8009bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d039      	beq.n	8009c6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	4413      	add	r3, r2
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	8952      	ldrh	r2, [r2, #10]
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d905      	bls.n	8009c14 <f_read+0x148>
					cc = fs->csize - csect;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	895b      	ldrh	r3, [r3, #10]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	7858      	ldrb	r0, [r3, #1]
 8009c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c1e:	f7fe f85b 	bl	8007cd8 <disk_read>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <f_read+0x166>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	755a      	strb	r2, [r3, #21]
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e087      	b.n	8009d42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	7d1b      	ldrb	r3, [r3, #20]
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da14      	bge.n	8009c66 <f_read+0x19a>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1a      	ldr	r2, [r3, #32]
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d90d      	bls.n	8009c66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a1a      	ldr	r2, [r3, #32]
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	025b      	lsls	r3, r3, #9
 8009c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c56:	18d0      	adds	r0, r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3330      	adds	r3, #48	@ 0x30
 8009c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c60:	4619      	mov	r1, r3
 8009c62:	f7fe f919 	bl	8007e98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	025b      	lsls	r3, r3, #9
 8009c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009c6c:	e050      	b.n	8009d10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d02e      	beq.n	8009cd6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	7d1b      	ldrb	r3, [r3, #20]
 8009c7c:	b25b      	sxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	da18      	bge.n	8009cb4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	7858      	ldrb	r0, [r3, #1]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a1a      	ldr	r2, [r3, #32]
 8009c90:	2301      	movs	r3, #1
 8009c92:	f7fe f841 	bl	8007d18 <disk_write>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d004      	beq.n	8009ca6 <f_read+0x1da>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	755a      	strb	r2, [r3, #21]
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e04d      	b.n	8009d42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	7d1b      	ldrb	r3, [r3, #20]
 8009caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	7858      	ldrb	r0, [r3, #1]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	69ba      	ldr	r2, [r7, #24]
 8009cc2:	f7fe f809 	bl	8007cd8 <disk_read>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <f_read+0x20a>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	755a      	strb	r2, [r3, #21]
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e035      	b.n	8009d42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d901      	bls.n	8009cf6 <f_read+0x22a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d04:	4413      	add	r3, r2
 8009d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d0c:	f7fe f8c4 	bl	8007e98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d14:	4413      	add	r3, r2
 8009d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	699a      	ldr	r2, [r3, #24]
 8009d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1e:	441a      	add	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	619a      	str	r2, [r3, #24]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	441a      	add	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f47f af01 	bne.w	8009b42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3738      	adds	r7, #56	@ 0x38
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f107 0208 	add.w	r2, r7, #8
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff fc80 	bl	8009660 <validate>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d168      	bne.n	8009e3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7d1b      	ldrb	r3, [r3, #20]
 8009d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d062      	beq.n	8009e3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7d1b      	ldrb	r3, [r3, #20]
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	da15      	bge.n	8009dac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	7858      	ldrb	r0, [r3, #1]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1a      	ldr	r2, [r3, #32]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	f7fd ffc2 	bl	8007d18 <disk_write>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <f_sync+0x54>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e04f      	b.n	8009e3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7d1b      	ldrb	r3, [r3, #20]
 8009da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009dac:	f7fb fcc4 	bl	8005738 <get_fattime>
 8009db0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	f7fe fa9a 	bl	80082f4 <move_window>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d138      	bne.n	8009e3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	330b      	adds	r3, #11
 8009dd4:	781a      	ldrb	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	330b      	adds	r3, #11
 8009dda:	f042 0220 	orr.w	r2, r2, #32
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	461a      	mov	r2, r3
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	f7fe ffa4 	bl	8008d3a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f103 021c 	add.w	r2, r3, #28
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	4610      	mov	r0, r2
 8009e00:	f7fe f81e 	bl	8007e40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3316      	adds	r3, #22
 8009e08:	6939      	ldr	r1, [r7, #16]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe f818 	bl	8007e40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3312      	adds	r3, #18
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fd fff7 	bl	8007e0a <st_word>
					fs->wflag = 1;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fa93 	bl	8008350 <sync_fs>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	7d1b      	ldrb	r3, [r3, #20]
 8009e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ff7b 	bl	8009d4a <f_sync>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d118      	bne.n	8009e90 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f107 0208 	add.w	r2, r7, #8
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff fbfa 	bl	8009660 <validate>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10c      	bne.n	8009e90 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe f996 	bl	80081ac <dec_lock>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8009e9c:	b590      	push	{r4, r7, lr}
 8009e9e:	b09d      	sub	sp, #116	@ 0x74
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8009eac:	2301      	movs	r3, #1
 8009eae:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8009eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009eb4:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009eb6:	f107 030c 	add.w	r3, r7, #12
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff f8e9 	bl	8009092 <get_ldnumber>
 8009ec0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	da02      	bge.n	8009ece <f_mkfs+0x32>
 8009ec8:	230b      	movs	r3, #11
 8009eca:	f000 bc0d 	b.w	800a6e8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8009ece:	4a94      	ldr	r2, [pc, #592]	@ (800a120 <f_mkfs+0x284>)
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d005      	beq.n	8009ee6 <f_mkfs+0x4a>
 8009eda:	4a91      	ldr	r2, [pc, #580]	@ (800a120 <f_mkfs+0x284>)
 8009edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8009ef2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd fec6 	bl	8007c88 <disk_initialize>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009f02:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <f_mkfs+0x76>
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e3ea      	b.n	800a6e8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009f12:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009f16:	f003 0304 	and.w	r3, r3, #4
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <f_mkfs+0x86>
 8009f1e:	230a      	movs	r3, #10
 8009f20:	e3e2      	b.n	800a6e8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8009f22:	f107 0214 	add.w	r2, r7, #20
 8009f26:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009f2a:	2103      	movs	r1, #3
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fd ff13 	bl	8007d58 <disk_ioctl>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10c      	bne.n	8009f52 <f_mkfs+0xb6>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <f_mkfs+0xb6>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f44:	d805      	bhi.n	8009f52 <f_mkfs+0xb6>
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <f_mkfs+0xba>
 8009f52:	2301      	movs	r3, #1
 8009f54:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8009f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <f_mkfs+0xce>
 8009f62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d309      	bcc.n	8009f7e <f_mkfs+0xe2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f70:	d805      	bhi.n	8009f7e <f_mkfs+0xe2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	1e5a      	subs	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <f_mkfs+0xe6>
 8009f7e:	2313      	movs	r3, #19
 8009f80:	e3b2      	b.n	800a6e8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8009f82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8009f90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009f9c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	fb02 f303 	mul.w	r3, r2, r3
 8009fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <f_mkfs+0x114>
 8009fac:	230e      	movs	r3, #14
 8009fae:	e39b      	b.n	800a6e8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8009fb0:	f107 0210 	add.w	r2, r7, #16
 8009fb4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009fb8:	2101      	movs	r1, #1
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fd fecc 	bl	8007d58 <disk_ioctl>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <f_mkfs+0x12e>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e38e      	b.n	800a6e8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	f003 0308 	and.w	r3, r3, #8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <f_mkfs+0x13c>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e000      	b.n	8009fda <f_mkfs+0x13e>
 8009fd8:	233f      	movs	r3, #63	@ 0x3f
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d901      	bls.n	8009fe8 <f_mkfs+0x14c>
 8009fe4:	230e      	movs	r3, #14
 8009fe6:	e37f      	b.n	800a6e8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ff4:	d801      	bhi.n	8009ffa <f_mkfs+0x15e>
 8009ff6:	230e      	movs	r3, #14
 8009ff8:	e376      	b.n	800a6e8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b80      	cmp	r3, #128	@ 0x80
 8009ffe:	d901      	bls.n	800a004 <f_mkfs+0x168>
 800a000:	2313      	movs	r3, #19
 800a002:	e371      	b.n	800a6e8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00d      	beq.n	800a02a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	2b02      	cmp	r3, #2
 800a016:	d004      	beq.n	800a022 <f_mkfs+0x186>
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d103      	bne.n	800a02a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a022:	2303      	movs	r3, #3
 800a024:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a028:	e009      	b.n	800a03e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <f_mkfs+0x19c>
 800a034:	2313      	movs	r3, #19
 800a036:	e357      	b.n	800a6e8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a038:	2302      	movs	r3, #2
 800a03a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a042:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a046:	2b03      	cmp	r3, #3
 800a048:	d13c      	bne.n	800a0c4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a04a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d11b      	bne.n	800a088 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	0c5b      	lsrs	r3, r3, #17
 800a054:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a056:	2300      	movs	r3, #0
 800a058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a05a:	2301      	movs	r3, #1
 800a05c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a05e:	e005      	b.n	800a06c <f_mkfs+0x1d0>
 800a060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a062:	3301      	adds	r3, #1
 800a064:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a06c:	4a2d      	ldr	r2, [pc, #180]	@ (800a124 <f_mkfs+0x288>)
 800a06e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d007      	beq.n	800a088 <f_mkfs+0x1ec>
 800a078:	4a2a      	ldr	r2, [pc, #168]	@ (800a124 <f_mkfs+0x288>)
 800a07a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a07c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a080:	461a      	mov	r2, r3
 800a082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a084:	4293      	cmp	r3, r2
 800a086:	d2eb      	bcs.n	800a060 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a08c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a090:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	3302      	adds	r3, #2
 800a096:	009a      	lsls	r2, r3, #2
 800a098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a09a:	4413      	add	r3, r2
 800a09c:	1e5a      	subs	r2, r3, #1
 800a09e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a0a6:	2320      	movs	r3, #32
 800a0a8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d903      	bls.n	800a0c0 <f_mkfs+0x224>
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a128 <f_mkfs+0x28c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d952      	bls.n	800a166 <f_mkfs+0x2ca>
 800a0c0:	230e      	movs	r3, #14
 800a0c2:	e311      	b.n	800a6e8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a0c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d11b      	bne.n	800a102 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	0b1b      	lsrs	r3, r3, #12
 800a0ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d8:	e005      	b.n	800a0e6 <f_mkfs+0x24a>
 800a0da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0dc:	3301      	adds	r3, #1
 800a0de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0e6:	4a11      	ldr	r2, [pc, #68]	@ (800a12c <f_mkfs+0x290>)
 800a0e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d007      	beq.n	800a102 <f_mkfs+0x266>
 800a0f2:	4a0e      	ldr	r2, [pc, #56]	@ (800a12c <f_mkfs+0x290>)
 800a0f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d2eb      	bcs.n	800a0da <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a106:	fbb2 f3f3 	udiv	r3, r2, r3
 800a10a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a112:	4293      	cmp	r3, r2
 800a114:	d90c      	bls.n	800a130 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	3302      	adds	r3, #2
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a11e:	e012      	b.n	800a146 <f_mkfs+0x2aa>
 800a120:	20000754 	.word	0x20000754
 800a124:	0800cb6c 	.word	0x0800cb6c
 800a128:	0ffffff5 	.word	0x0ffffff5
 800a12c:	0800cb7c 	.word	0x0800cb7c
				} else {
					fmt = FS_FAT12;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a136:	6a3a      	ldr	r2, [r7, #32]
 800a138:	4613      	mov	r3, r2
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	3301      	adds	r3, #1
 800a140:	085b      	lsrs	r3, r3, #1
 800a142:	3303      	adds	r3, #3
 800a144:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a146:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a14a:	4413      	add	r3, r2
 800a14c:	1e5a      	subs	r2, r3, #1
 800a14e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a150:	fbb2 f3f3 	udiv	r3, r2, r3
 800a154:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a156:	2301      	movs	r3, #1
 800a158:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a160:	fbb2 f3f3 	udiv	r3, r2, r3
 800a164:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a16a:	4413      	add	r3, r2
 800a16c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a16e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a172:	fb03 f202 	mul.w	r2, r3, r2
 800a176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a178:	4413      	add	r3, r2
 800a17a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a17c:	4413      	add	r3, r2
 800a17e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	1e5a      	subs	r2, r3, #1
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	425b      	negs	r3, r3
 800a18c:	401a      	ands	r2, r3
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a194:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d108      	bne.n	800a1ae <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a19c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1a0:	4413      	add	r3, r2
 800a1a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1a8:	4413      	add	r3, r2
 800a1aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1ac:	e006      	b.n	800a1bc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a1ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a1b8:	4413      	add	r3, r2
 800a1ba:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1be:	011a      	lsls	r2, r3, #4
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d901      	bls.n	800a1d2 <f_mkfs+0x336>
 800a1ce:	230e      	movs	r3, #14
 800a1d0:	e28a      	b.n	800a6e8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1d6:	1ad2      	subs	r2, r2, r3
 800a1d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1dc:	fb01 f303 	mul.w	r3, r1, r3
 800a1e0:	1ad2      	subs	r2, r2, r3
 800a1e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e4:	1ad2      	subs	r2, r2, r3
 800a1e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ec:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a1ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d10f      	bne.n	800a216 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d80a      	bhi.n	800a216 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d105      	bne.n	800a212 <f_mkfs+0x376>
 800a206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a208:	085b      	lsrs	r3, r3, #1
 800a20a:	607b      	str	r3, [r7, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d144      	bne.n	800a29c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a212:	230e      	movs	r3, #14
 800a214:	e268      	b.n	800a6e8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a216:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d133      	bne.n	800a286 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a224:	4293      	cmp	r3, r2
 800a226:	d91e      	bls.n	800a266 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d107      	bne.n	800a23e <f_mkfs+0x3a2>
 800a22e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	2b40      	cmp	r3, #64	@ 0x40
 800a234:	d803      	bhi.n	800a23e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e033      	b.n	800a2a6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a248:	2303      	movs	r3, #3
 800a24a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a24e:	e02a      	b.n	800a2a6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <f_mkfs+0x3c6>
 800a256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b80      	cmp	r3, #128	@ 0x80
 800a260:	d91e      	bls.n	800a2a0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a262:	230e      	movs	r3, #14
 800a264:	e240      	b.n	800a6e8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d80a      	bhi.n	800a286 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <f_mkfs+0x3e6>
 800a276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b80      	cmp	r3, #128	@ 0x80
 800a280:	d910      	bls.n	800a2a4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a282:	230e      	movs	r3, #14
 800a284:	e230      	b.n	800a6e8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a286:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d10c      	bne.n	800a2a8 <f_mkfs+0x40c>
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a294:	4293      	cmp	r3, r2
 800a296:	d907      	bls.n	800a2a8 <f_mkfs+0x40c>
 800a298:	230e      	movs	r3, #14
 800a29a:	e225      	b.n	800a6e8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a29c:	bf00      	nop
 800a29e:	e6ce      	b.n	800a03e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a2a0:	bf00      	nop
 800a2a2:	e6cc      	b.n	800a03e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a2a4:	bf00      	nop
			pau = au;
 800a2a6:	e6ca      	b.n	800a03e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a2a8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a2aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b2:	f7fd fe12 	bl	8007eda <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a2b6:	220b      	movs	r2, #11
 800a2b8:	49b2      	ldr	r1, [pc, #712]	@ (800a584 <f_mkfs+0x6e8>)
 800a2ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2bc:	f7fd fdec 	bl	8007e98 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	330b      	adds	r3, #11
 800a2c4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fd fd9e 	bl	8007e0a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	330d      	adds	r3, #13
 800a2d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2d4:	b2d2      	uxtb	r2, r2
 800a2d6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	330e      	adds	r3, #14
 800a2dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2de:	b292      	uxth	r2, r2
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fd fd91 	bl	8007e0a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ea:	3310      	adds	r3, #16
 800a2ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	f103 0211 	add.w	r2, r3, #17
 800a2f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d002      	beq.n	800a306 <f_mkfs+0x46a>
 800a300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a302:	b29b      	uxth	r3, r3
 800a304:	e000      	b.n	800a308 <f_mkfs+0x46c>
 800a306:	2300      	movs	r3, #0
 800a308:	4619      	mov	r1, r3
 800a30a:	4610      	mov	r0, r2
 800a30c:	f7fd fd7d 	bl	8007e0a <st_word>
		if (sz_vol < 0x10000) {
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a316:	d208      	bcs.n	800a32a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	3313      	adds	r3, #19
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	b292      	uxth	r2, r2
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7fd fd71 	bl	8007e0a <st_word>
 800a328:	e006      	b.n	800a338 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	3320      	adds	r3, #32
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4611      	mov	r1, r2
 800a332:	4618      	mov	r0, r3
 800a334:	f7fd fd84 	bl	8007e40 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	3315      	adds	r3, #21
 800a33c:	22f8      	movs	r2, #248	@ 0xf8
 800a33e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a342:	3318      	adds	r3, #24
 800a344:	213f      	movs	r1, #63	@ 0x3f
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fd5f 	bl	8007e0a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	331a      	adds	r3, #26
 800a350:	21ff      	movs	r1, #255	@ 0xff
 800a352:	4618      	mov	r0, r3
 800a354:	f7fd fd59 	bl	8007e0a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	331c      	adds	r3, #28
 800a35c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fd fd6e 	bl	8007e40 <st_dword>
		if (fmt == FS_FAT32) {
 800a364:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a368:	2b03      	cmp	r3, #3
 800a36a:	d131      	bne.n	800a3d0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800a372:	f7fb f9e1 	bl	8005738 <get_fattime>
 800a376:	4603      	mov	r3, r0
 800a378:	4619      	mov	r1, r3
 800a37a:	4620      	mov	r0, r4
 800a37c:	f7fd fd60 	bl	8007e40 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	3324      	adds	r3, #36	@ 0x24
 800a384:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a386:	4618      	mov	r0, r3
 800a388:	f7fd fd5a 	bl	8007e40 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38e:	332c      	adds	r3, #44	@ 0x2c
 800a390:	2102      	movs	r1, #2
 800a392:	4618      	mov	r0, r3
 800a394:	f7fd fd54 	bl	8007e40 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	3330      	adds	r3, #48	@ 0x30
 800a39c:	2101      	movs	r1, #1
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd fd33 	bl	8007e0a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	3332      	adds	r3, #50	@ 0x32
 800a3a8:	2106      	movs	r1, #6
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fd fd2d 	bl	8007e0a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	3340      	adds	r3, #64	@ 0x40
 800a3b4:	2280      	movs	r2, #128	@ 0x80
 800a3b6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	3342      	adds	r3, #66	@ 0x42
 800a3bc:	2229      	movs	r2, #41	@ 0x29
 800a3be:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	3347      	adds	r3, #71	@ 0x47
 800a3c4:	2213      	movs	r2, #19
 800a3c6:	4970      	ldr	r1, [pc, #448]	@ (800a588 <f_mkfs+0x6ec>)
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fd fd65 	bl	8007e98 <mem_cpy>
 800a3ce:	e020      	b.n	800a412 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800a3d6:	f7fb f9af 	bl	8005738 <get_fattime>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7fd fd2e 	bl	8007e40 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	3316      	adds	r3, #22
 800a3e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a3ea:	b292      	uxth	r2, r2
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fd fd0b 	bl	8007e0a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f6:	3324      	adds	r3, #36	@ 0x24
 800a3f8:	2280      	movs	r2, #128	@ 0x80
 800a3fa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fe:	3326      	adds	r3, #38	@ 0x26
 800a400:	2229      	movs	r2, #41	@ 0x29
 800a402:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	332b      	adds	r3, #43	@ 0x2b
 800a408:	2213      	movs	r2, #19
 800a40a:	4960      	ldr	r1, [pc, #384]	@ (800a58c <f_mkfs+0x6f0>)
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fd fd43 	bl	8007e98 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a418:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fd fcf4 	bl	8007e0a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a422:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a426:	2301      	movs	r3, #1
 800a428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a42a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a42c:	f7fd fc74 	bl	8007d18 <disk_write>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <f_mkfs+0x59e>
 800a436:	2301      	movs	r3, #1
 800a438:	e156      	b.n	800a6e8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a43a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d140      	bne.n	800a4c4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a444:	1d9a      	adds	r2, r3, #6
 800a446:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a44a:	2301      	movs	r3, #1
 800a44c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a44e:	f7fd fc63 	bl	8007d18 <disk_write>
			mem_set(buf, 0, ss);
 800a452:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a454:	461a      	mov	r2, r3
 800a456:	2100      	movs	r1, #0
 800a458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a45a:	f7fd fd3e 	bl	8007eda <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a45e:	494c      	ldr	r1, [pc, #304]	@ (800a590 <f_mkfs+0x6f4>)
 800a460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a462:	f7fd fced 	bl	8007e40 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a46c:	4949      	ldr	r1, [pc, #292]	@ (800a594 <f_mkfs+0x6f8>)
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fd fce6 	bl	8007e40 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a476:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	4619      	mov	r1, r3
 800a480:	4610      	mov	r0, r2
 800a482:	f7fd fcdd 	bl	8007e40 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a48c:	2102      	movs	r1, #2
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fd fcd6 	bl	8007e40 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a496:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a49a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fd fcb3 	bl	8007e0a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	1dda      	adds	r2, r3, #7
 800a4a8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4b0:	f7fd fc32 	bl	8007d18 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a4bc:	2301      	movs	r3, #1
 800a4be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4c0:	f7fd fc2a 	bl	8007d18 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a4c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4ca:	f7fd fd06 	bl	8007eda <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a4ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4d0:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d6:	e04b      	b.n	800a570 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a4d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d113      	bne.n	800a508 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a4e0:	f06f 0107 	mvn.w	r1, #7
 800a4e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4e6:	f7fd fcab 	bl	8007e40 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	f04f 31ff 	mov.w	r1, #4294967295
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fd fca4 	bl	8007e40 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a500:	4618      	mov	r0, r3
 800a502:	f7fd fc9d 	bl	8007e40 <st_dword>
 800a506:	e00b      	b.n	800a520 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a508:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d101      	bne.n	800a514 <f_mkfs+0x678>
 800a510:	4b21      	ldr	r3, [pc, #132]	@ (800a598 <f_mkfs+0x6fc>)
 800a512:	e001      	b.n	800a518 <f_mkfs+0x67c>
 800a514:	f06f 0307 	mvn.w	r3, #7
 800a518:	4619      	mov	r1, r3
 800a51a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a51c:	f7fd fc90 	bl	8007e40 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a522:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a528:	4293      	cmp	r3, r2
 800a52a:	bf28      	it	cs
 800a52c:	4613      	movcs	r3, r2
 800a52e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a530:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a536:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a53a:	f7fd fbed 	bl	8007d18 <disk_write>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <f_mkfs+0x6ac>
 800a544:	2301      	movs	r3, #1
 800a546:	e0cf      	b.n	800a6e8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800a548:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a54a:	461a      	mov	r2, r3
 800a54c:	2100      	movs	r1, #0
 800a54e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a550:	f7fd fcc3 	bl	8007eda <mem_set>
				sect += n; nsect -= n;
 800a554:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a558:	4413      	add	r3, r2
 800a55a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a55c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a55e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800a564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1dc      	bne.n	800a524 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a56c:	3301      	adds	r3, #1
 800a56e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a574:	429a      	cmp	r2, r3
 800a576:	d3af      	bcc.n	800a4d8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a578:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d10d      	bne.n	800a59c <f_mkfs+0x700>
 800a580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a582:	e00c      	b.n	800a59e <f_mkfs+0x702>
 800a584:	0800ca60 	.word	0x0800ca60
 800a588:	0800ca6c 	.word	0x0800ca6c
 800a58c:	0800ca80 	.word	0x0800ca80
 800a590:	41615252 	.word	0x41615252
 800a594:	61417272 	.word	0x61417272
 800a598:	00fffff8 	.word	0x00fffff8
 800a59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a59e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a5a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	bf28      	it	cs
 800a5a8:	4613      	movcs	r3, r2
 800a5aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a5ac:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a5b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5b6:	f7fd fbaf 	bl	8007d18 <disk_write>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <f_mkfs+0x728>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e091      	b.n	800a6e8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800a5c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5c8:	4413      	add	r3, r2
 800a5ca:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800a5d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e2      	bne.n	800a5a0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800a5da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d103      	bne.n	800a5ea <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800a5e8:	e010      	b.n	800a60c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5f0:	d303      	bcc.n	800a5fa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800a5f2:	2306      	movs	r3, #6
 800a5f4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800a5f8:	e008      	b.n	800a60c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800a5fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d101      	bne.n	800a606 <f_mkfs+0x76a>
 800a602:	2304      	movs	r3, #4
 800a604:	e000      	b.n	800a608 <f_mkfs+0x76c>
 800a606:	2301      	movs	r3, #1
 800a608:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d15b      	bne.n	800a6ce <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800a616:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a618:	461a      	mov	r2, r3
 800a61a:	2100      	movs	r1, #0
 800a61c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a61e:	f7fd fc5c 	bl	8007eda <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a628:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fd fbec 	bl	8007e0a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a638:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	3301      	adds	r3, #1
 800a644:	2201      	movs	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	3302      	adds	r3, #2
 800a64c:	2201      	movs	r2, #1
 800a64e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	3303      	adds	r3, #3
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	3304      	adds	r3, #4
 800a65c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800a660:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	441a      	add	r2, r3
 800a668:	4b21      	ldr	r3, [pc, #132]	@ (800a6f0 <f_mkfs+0x854>)
 800a66a:	fba3 1302 	umull	r1, r3, r3, r2
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	0852      	lsrs	r2, r2, #1
 800a672:	4413      	add	r3, r2
 800a674:	0b5b      	lsrs	r3, r3, #13
 800a676:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	3305      	adds	r3, #5
 800a67c:	22fe      	movs	r2, #254	@ 0xfe
 800a67e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800a680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a682:	089b      	lsrs	r3, r3, #2
 800a684:	b2da      	uxtb	r2, r3
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	3306      	adds	r3, #6
 800a68a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	3307      	adds	r3, #7
 800a696:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fd fbcc 	bl	8007e40 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	330c      	adds	r3, #12
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fd fbc5 	bl	8007e40 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a6b6:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	2200      	movs	r2, #0
 800a6be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6c0:	f7fd fb2a 	bl	8007d18 <disk_write>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <f_mkfs+0x832>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e00c      	b.n	800a6e8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800a6ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fd fb3e 	bl	8007d58 <disk_ioctl>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <f_mkfs+0x84a>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <f_mkfs+0x84c>

	return FR_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3774      	adds	r7, #116	@ 0x74
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd90      	pop	{r4, r7, pc}
 800a6f0:	0515565b 	.word	0x0515565b

0800a6f4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a708:	e01c      	b.n	800a744 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a70a:	f107 0310 	add.w	r3, r7, #16
 800a70e:	f107 0114 	add.w	r1, r7, #20
 800a712:	2201      	movs	r2, #1
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff f9d9 	bl	8009acc <f_read>
		if (rc != 1) break;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d117      	bne.n	800a750 <f_gets+0x5c>
		c = s[0];
 800a720:	7d3b      	ldrb	r3, [r7, #20]
 800a722:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a724:	7dfb      	ldrb	r3, [r7, #23]
 800a726:	2b0d      	cmp	r3, #13
 800a728:	d00b      	beq.n	800a742 <f_gets+0x4e>
		*p++ = c;
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	61ba      	str	r2, [r7, #24]
 800a730:	7dfa      	ldrb	r2, [r7, #23]
 800a732:	701a      	strb	r2, [r3, #0]
		n++;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	3301      	adds	r3, #1
 800a738:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	2b0a      	cmp	r3, #10
 800a73e:	d009      	beq.n	800a754 <f_gets+0x60>
 800a740:	e000      	b.n	800a744 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a742:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	3b01      	subs	r3, #1
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	dbdd      	blt.n	800a70a <f_gets+0x16>
 800a74e:	e002      	b.n	800a756 <f_gets+0x62>
		if (rc != 1) break;
 800a750:	bf00      	nop
 800a752:	e000      	b.n	800a756 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800a754:	bf00      	nop
	}
	*p = 0;
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2200      	movs	r2, #0
 800a75a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <f_gets+0x72>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	e000      	b.n	800a768 <f_gets+0x74>
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a770:	b480      	push	{r7}
 800a772:	b087      	sub	sp, #28
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a786:	4b1f      	ldr	r3, [pc, #124]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a788:	7a5b      	ldrb	r3, [r3, #9]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d131      	bne.n	800a7f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a790:	4b1c      	ldr	r3, [pc, #112]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a792:	7a5b      	ldrb	r3, [r3, #9]
 800a794:	b2db      	uxtb	r3, r3
 800a796:	461a      	mov	r2, r3
 800a798:	4b1a      	ldr	r3, [pc, #104]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a79a:	2100      	movs	r1, #0
 800a79c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a79e:	4b19      	ldr	r3, [pc, #100]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a7a0:	7a5b      	ldrb	r3, [r3, #9]
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	4a17      	ldr	r2, [pc, #92]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a7ae:	4b15      	ldr	r3, [pc, #84]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a7b0:	7a5b      	ldrb	r3, [r3, #9]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4b13      	ldr	r3, [pc, #76]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a7b8:	4413      	add	r3, r2
 800a7ba:	79fa      	ldrb	r2, [r7, #7]
 800a7bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a7be:	4b11      	ldr	r3, [pc, #68]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a7c0:	7a5b      	ldrb	r3, [r3, #9]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	1c5a      	adds	r2, r3, #1
 800a7c6:	b2d1      	uxtb	r1, r2
 800a7c8:	4a0e      	ldr	r2, [pc, #56]	@ (800a804 <FATFS_LinkDriverEx+0x94>)
 800a7ca:	7251      	strb	r1, [r2, #9]
 800a7cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a7ce:	7dbb      	ldrb	r3, [r7, #22]
 800a7d0:	3330      	adds	r3, #48	@ 0x30
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	223a      	movs	r2, #58	@ 0x3a
 800a7de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	3302      	adds	r3, #2
 800a7e4:	222f      	movs	r2, #47	@ 0x2f
 800a7e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	3303      	adds	r3, #3
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	2000077c 	.word	0x2000077c

0800a808 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a812:	2200      	movs	r2, #0
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff ffaa 	bl	800a770 <FATFS_LinkDriverEx>
 800a81c:	4603      	mov	r3, r0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a82c:	2200      	movs	r2, #0
 800a82e:	490e      	ldr	r1, [pc, #56]	@ (800a868 <MX_USB_DEVICE_Init+0x40>)
 800a830:	480e      	ldr	r0, [pc, #56]	@ (800a86c <MX_USB_DEVICE_Init+0x44>)
 800a832:	f7fb ff13 	bl	800665c <USBD_Init>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a83c:	f7f6 fc68 	bl	8001110 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a840:	490b      	ldr	r1, [pc, #44]	@ (800a870 <MX_USB_DEVICE_Init+0x48>)
 800a842:	480a      	ldr	r0, [pc, #40]	@ (800a86c <MX_USB_DEVICE_Init+0x44>)
 800a844:	f7fb ff3a 	bl	80066bc <USBD_RegisterClass>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a84e:	f7f6 fc5f 	bl	8001110 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a852:	4806      	ldr	r0, [pc, #24]	@ (800a86c <MX_USB_DEVICE_Init+0x44>)
 800a854:	f7fb ff68 	bl	8006728 <USBD_Start>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a85e:	f7f6 fc57 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a862:	bf00      	nop
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	200000d8 	.word	0x200000d8
 800a86c:	20000788 	.word	0x20000788
 800a870:	20000024 	.word	0x20000024

0800a874 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	6039      	str	r1, [r7, #0]
 800a87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2212      	movs	r2, #18
 800a884:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a886:	4b03      	ldr	r3, [pc, #12]	@ (800a894 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	200000f4 	.word	0x200000f4

0800a898 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	@ (800a8b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	20000108 	.word	0x20000108

0800a8bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4907      	ldr	r1, [pc, #28]	@ (800a8f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8d2:	4808      	ldr	r0, [pc, #32]	@ (800a8f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8d4:	f7fd f8ec 	bl	8007ab0 <USBD_GetString>
 800a8d8:	e004      	b.n	800a8e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	4904      	ldr	r1, [pc, #16]	@ (800a8f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8de:	4805      	ldr	r0, [pc, #20]	@ (800a8f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8e0:	f7fd f8e6 	bl	8007ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e4:	4b02      	ldr	r3, [pc, #8]	@ (800a8f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000a64 	.word	0x20000a64
 800a8f4:	0800ca94 	.word	0x0800ca94

0800a8f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	4904      	ldr	r1, [pc, #16]	@ (800a918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a908:	4804      	ldr	r0, [pc, #16]	@ (800a91c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a90a:	f7fd f8d1 	bl	8007ab0 <USBD_GetString>
  return USBD_StrDesc;
 800a90e:	4b02      	ldr	r3, [pc, #8]	@ (800a918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20000a64 	.word	0x20000a64
 800a91c:	0800caac 	.word	0x0800caac

0800a920 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	6039      	str	r1, [r7, #0]
 800a92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	221a      	movs	r2, #26
 800a930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a932:	f000 f843 	bl	800a9bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a936:	4b02      	ldr	r3, [pc, #8]	@ (800a940 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	2000010c 	.word	0x2000010c

0800a944 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d105      	bne.n	800a962 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	4907      	ldr	r1, [pc, #28]	@ (800a978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a95a:	4808      	ldr	r0, [pc, #32]	@ (800a97c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a95c:	f7fd f8a8 	bl	8007ab0 <USBD_GetString>
 800a960:	e004      	b.n	800a96c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	4904      	ldr	r1, [pc, #16]	@ (800a978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a966:	4805      	ldr	r0, [pc, #20]	@ (800a97c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a968:	f7fd f8a2 	bl	8007ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a96c:	4b02      	ldr	r3, [pc, #8]	@ (800a978 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000a64 	.word	0x20000a64
 800a97c:	0800cac0 	.word	0x0800cac0

0800a980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	6039      	str	r1, [r7, #0]
 800a98a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d105      	bne.n	800a99e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	4907      	ldr	r1, [pc, #28]	@ (800a9b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a996:	4808      	ldr	r0, [pc, #32]	@ (800a9b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a998:	f7fd f88a 	bl	8007ab0 <USBD_GetString>
 800a99c:	e004      	b.n	800a9a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	4904      	ldr	r1, [pc, #16]	@ (800a9b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9a2:	4805      	ldr	r0, [pc, #20]	@ (800a9b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9a4:	f7fd f884 	bl	8007ab0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9a8:	4b02      	ldr	r3, [pc, #8]	@ (800a9b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000a64 	.word	0x20000a64
 800a9b8:	0800cacc 	.word	0x0800cacc

0800a9bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9c2:	4b0f      	ldr	r3, [pc, #60]	@ (800aa00 <Get_SerialNum+0x44>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800aa04 <Get_SerialNum+0x48>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800aa08 <Get_SerialNum+0x4c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4413      	add	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d009      	beq.n	800a9f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9e2:	2208      	movs	r2, #8
 800a9e4:	4909      	ldr	r1, [pc, #36]	@ (800aa0c <Get_SerialNum+0x50>)
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 f814 	bl	800aa14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9ec:	2204      	movs	r2, #4
 800a9ee:	4908      	ldr	r1, [pc, #32]	@ (800aa10 <Get_SerialNum+0x54>)
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f000 f80f 	bl	800aa14 <IntToUnicode>
  }
}
 800a9f6:	bf00      	nop
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	1fff7a10 	.word	0x1fff7a10
 800aa04:	1fff7a14 	.word	0x1fff7a14
 800aa08:	1fff7a18 	.word	0x1fff7a18
 800aa0c:	2000010e 	.word	0x2000010e
 800aa10:	2000011e 	.word	0x2000011e

0800aa14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa26:	2300      	movs	r3, #0
 800aa28:	75fb      	strb	r3, [r7, #23]
 800aa2a:	e027      	b.n	800aa7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	0f1b      	lsrs	r3, r3, #28
 800aa30:	2b09      	cmp	r3, #9
 800aa32:	d80b      	bhi.n	800aa4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	0f1b      	lsrs	r3, r3, #28
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	440b      	add	r3, r1
 800aa44:	3230      	adds	r2, #48	@ 0x30
 800aa46:	b2d2      	uxtb	r2, r2
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	e00a      	b.n	800aa62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	0f1b      	lsrs	r3, r3, #28
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4619      	mov	r1, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3237      	adds	r2, #55	@ 0x37
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	011b      	lsls	r3, r3, #4
 800aa66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4413      	add	r3, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	75fb      	strb	r3, [r7, #23]
 800aa7c:	7dfa      	ldrb	r2, [r7, #23]
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d3d3      	bcc.n	800aa2c <IntToUnicode+0x18>
  }
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08a      	sub	sp, #40	@ 0x28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa9c:	f107 0314 	add.w	r3, r7, #20
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	605a      	str	r2, [r3, #4]
 800aaa6:	609a      	str	r2, [r3, #8]
 800aaa8:	60da      	str	r2, [r3, #12]
 800aaaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aab4:	d13a      	bne.n	800ab2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	4b1e      	ldr	r3, [pc, #120]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabe:	4a1d      	ldr	r2, [pc, #116]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800aac0:	f043 0301 	orr.w	r3, r3, #1
 800aac4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aac6:	4b1b      	ldr	r3, [pc, #108]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aad2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800aad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aad8:	2302      	movs	r3, #2
 800aada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aae0:	2303      	movs	r3, #3
 800aae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aae4:	230a      	movs	r3, #10
 800aae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aae8:	f107 0314 	add.w	r3, r7, #20
 800aaec:	4619      	mov	r1, r3
 800aaee:	4812      	ldr	r0, [pc, #72]	@ (800ab38 <HAL_PCD_MspInit+0xa4>)
 800aaf0:	f7f6 fe68 	bl	80017c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aaf4:	4b0f      	ldr	r3, [pc, #60]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800aaf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800aafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafe:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	4b0b      	ldr	r3, [pc, #44]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800ab06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab08:	4a0a      	ldr	r2, [pc, #40]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800ab0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab0e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab10:	4b08      	ldr	r3, [pc, #32]	@ (800ab34 <HAL_PCD_MspInit+0xa0>)
 800ab12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	2043      	movs	r0, #67	@ 0x43
 800ab22:	f7f6 fe18 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab26:	2043      	movs	r0, #67	@ 0x43
 800ab28:	f7f6 fe31 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab2c:	bf00      	nop
 800ab2e:	3728      	adds	r7, #40	@ 0x28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	40023800 	.word	0x40023800
 800ab38:	40020000 	.word	0x40020000

0800ab3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7fb fe35 	bl	80067c2 <USBD_LL_SetupStage>
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab72:	78fa      	ldrb	r2, [r7, #3]
 800ab74:	6879      	ldr	r1, [r7, #4]
 800ab76:	4613      	mov	r3, r2
 800ab78:	00db      	lsls	r3, r3, #3
 800ab7a:	4413      	add	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	440b      	add	r3, r1
 800ab80:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f7fb fe6f 	bl	800686c <USBD_LL_DataOutStage>
}
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aba8:	78fa      	ldrb	r2, [r7, #3]
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	4613      	mov	r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	4413      	add	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	440b      	add	r3, r1
 800abb6:	3320      	adds	r3, #32
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	4619      	mov	r1, r3
 800abbe:	f7fb ff11 	bl	80069e4 <USBD_LL_DataInStage>
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fc f855 	bl	8006c88 <USBD_LL_SOF>
}
 800abde:	bf00      	nop
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abee:	2301      	movs	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	79db      	ldrb	r3, [r3, #7]
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d001      	beq.n	800abfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abfa:	f7f6 fa89 	bl	8001110 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac04:	7bfa      	ldrb	r2, [r7, #15]
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fb fff9 	bl	8006c00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fb ffa0 	bl	8006b5a <USBD_LL_Reset>
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
	...

0800ac24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fb fff4 	bl	8006c20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6812      	ldr	r2, [r2, #0]
 800ac46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac4a:	f043 0301 	orr.w	r3, r3, #1
 800ac4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	7adb      	ldrb	r3, [r3, #11]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac58:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <HAL_PCD_SuspendCallback+0x48>)
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	4a03      	ldr	r2, [pc, #12]	@ (800ac6c <HAL_PCD_SuspendCallback+0x48>)
 800ac5e:	f043 0306 	orr.w	r3, r3, #6
 800ac62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	e000ed00 	.word	0xe000ed00

0800ac70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fb ffea 	bl	8006c58 <USBD_LL_Resume>
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac9e:	78fa      	ldrb	r2, [r7, #3]
 800aca0:	4611      	mov	r1, r2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fc f842 	bl	8006d2c <USBD_LL_IsoOUTIncomplete>
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fb fffe 	bl	8006cc8 <USBD_LL_IsoINIncomplete>
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fc f854 	bl	8006d90 <USBD_LL_DevConnected>
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fc f851 	bl	8006da6 <USBD_LL_DevDisconnected>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d13c      	bne.n	800ad96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad1c:	4a20      	ldr	r2, [pc, #128]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a1e      	ldr	r2, [pc, #120]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad2c:	4b1c      	ldr	r3, [pc, #112]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ad32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad34:	4b1a      	ldr	r3, [pc, #104]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad36:	2204      	movs	r2, #4
 800ad38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad3a:	4b19      	ldr	r3, [pc, #100]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad40:	4b17      	ldr	r3, [pc, #92]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad46:	4b16      	ldr	r3, [pc, #88]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad48:	2202      	movs	r2, #2
 800ad4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad4c:	4b14      	ldr	r3, [pc, #80]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad52:	4b13      	ldr	r3, [pc, #76]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad58:	4b11      	ldr	r3, [pc, #68]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad5e:	4b10      	ldr	r3, [pc, #64]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad64:	4b0e      	ldr	r3, [pc, #56]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad6a:	480d      	ldr	r0, [pc, #52]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad6c:	f7f6 fec7 	bl	8001afe <HAL_PCD_Init>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad76:	f7f6 f9cb 	bl	8001110 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad7a:	2180      	movs	r1, #128	@ 0x80
 800ad7c:	4808      	ldr	r0, [pc, #32]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad7e:	f7f8 f8dc 	bl	8002f3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad82:	2240      	movs	r2, #64	@ 0x40
 800ad84:	2100      	movs	r1, #0
 800ad86:	4806      	ldr	r0, [pc, #24]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad88:	f7f8 f890 	bl	8002eac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad8c:	2280      	movs	r2, #128	@ 0x80
 800ad8e:	2101      	movs	r1, #1
 800ad90:	4803      	ldr	r0, [pc, #12]	@ (800ada0 <USBD_LL_Init+0x94>)
 800ad92:	f7f8 f88b 	bl	8002eac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20000c64 	.word	0x20000c64

0800ada4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adba:	4618      	mov	r0, r3
 800adbc:	f7f6 ffae 	bl	8001d1c <HAL_PCD_Start>
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 f930 	bl	800b02c <USBD_Get_USB_Status>
 800adcc:	4603      	mov	r3, r0
 800adce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add0:	7bbb      	ldrb	r3, [r7, #14]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	4608      	mov	r0, r1
 800ade4:	4611      	mov	r1, r2
 800ade6:	461a      	mov	r2, r3
 800ade8:	4603      	mov	r3, r0
 800adea:	70fb      	strb	r3, [r7, #3]
 800adec:	460b      	mov	r3, r1
 800adee:	70bb      	strb	r3, [r7, #2]
 800adf0:	4613      	mov	r3, r2
 800adf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae02:	78bb      	ldrb	r3, [r7, #2]
 800ae04:	883a      	ldrh	r2, [r7, #0]
 800ae06:	78f9      	ldrb	r1, [r7, #3]
 800ae08:	f7f7 fc82 	bl	8002710 <HAL_PCD_EP_Open>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 f90a 	bl	800b02c <USBD_Get_USB_Status>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	4611      	mov	r1, r2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7f7 fccd 	bl	80027e4 <HAL_PCD_EP_Close>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 f8eb 	bl	800b02c <USBD_Get_USB_Status>
 800ae56:	4603      	mov	r3, r0
 800ae58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae7e:	78fa      	ldrb	r2, [r7, #3]
 800ae80:	4611      	mov	r1, r2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7f7 fd6d 	bl	8002962 <HAL_PCD_EP_SetStall>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 f8cc 	bl	800b02c <USBD_Get_USB_Status>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aebc:	78fa      	ldrb	r2, [r7, #3]
 800aebe:	4611      	mov	r1, r2
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7f7 fdb1 	bl	8002a28 <HAL_PCD_EP_ClrStall>
 800aec6:	4603      	mov	r3, r0
 800aec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f8ad 	bl	800b02c <USBD_Get_USB_Status>
 800aed2:	4603      	mov	r3, r0
 800aed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aef2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	da0b      	bge.n	800af14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	4613      	mov	r3, r2
 800af06:	00db      	lsls	r3, r3, #3
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	3316      	adds	r3, #22
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	e00b      	b.n	800af2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af14:	78fb      	ldrb	r3, [r7, #3]
 800af16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af1a:	68f9      	ldr	r1, [r7, #12]
 800af1c:	4613      	mov	r3, r2
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800af2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	460b      	mov	r3, r1
 800af42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f7f7 fbb6 	bl	80026c8 <HAL_PCD_SetAddress>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	4618      	mov	r0, r3
 800af64:	f000 f862 	bl	800b02c <USBD_Get_USB_Status>
 800af68:	4603      	mov	r3, r0
 800af6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
 800af82:	460b      	mov	r3, r1
 800af84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af94:	7af9      	ldrb	r1, [r7, #11]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	f7f7 fca8 	bl	80028ee <HAL_PCD_EP_Transmit>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 f841 	bl	800b02c <USBD_Get_USB_Status>
 800afaa:	4603      	mov	r3, r0
 800afac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afae:	7dbb      	ldrb	r3, [r7, #22]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	607a      	str	r2, [r7, #4]
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	460b      	mov	r3, r1
 800afc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800afd6:	7af9      	ldrb	r1, [r7, #11]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	f7f7 fc4c 	bl	8002878 <HAL_PCD_EP_Receive>
 800afe0:	4603      	mov	r3, r0
 800afe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f820 	bl	800b02c <USBD_Get_USB_Status>
 800afec:	4603      	mov	r3, r0
 800afee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aff0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
	...

0800affc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b004:	4b03      	ldr	r3, [pc, #12]	@ (800b014 <USBD_static_malloc+0x18>)
}
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20001148 	.word	0x20001148

0800b018 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]

}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d817      	bhi.n	800b070 <USBD_Get_USB_Status+0x44>
 800b040:	a201      	add	r2, pc, #4	@ (adr r2, 800b048 <USBD_Get_USB_Status+0x1c>)
 800b042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b046:	bf00      	nop
 800b048:	0800b059 	.word	0x0800b059
 800b04c:	0800b05f 	.word	0x0800b05f
 800b050:	0800b065 	.word	0x0800b065
 800b054:	0800b06b 	.word	0x0800b06b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	e00b      	b.n	800b076 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	73fb      	strb	r3, [r7, #15]
    break;
 800b062:	e008      	b.n	800b076 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
    break;
 800b068:	e005      	b.n	800b076 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b06a:	2303      	movs	r3, #3
 800b06c:	73fb      	strb	r3, [r7, #15]
    break;
 800b06e:	e002      	b.n	800b076 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	73fb      	strb	r3, [r7, #15]
    break;
 800b074:	bf00      	nop
  }
  return usb_status;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <atoi>:
 800b084:	220a      	movs	r2, #10
 800b086:	2100      	movs	r1, #0
 800b088:	f000 b938 	b.w	800b2fc <strtol>

0800b08c <malloc>:
 800b08c:	4b02      	ldr	r3, [pc, #8]	@ (800b098 <malloc+0xc>)
 800b08e:	4601      	mov	r1, r0
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	f000 b82d 	b.w	800b0f0 <_malloc_r>
 800b096:	bf00      	nop
 800b098:	20000134 	.word	0x20000134

0800b09c <free>:
 800b09c:	4b02      	ldr	r3, [pc, #8]	@ (800b0a8 <free+0xc>)
 800b09e:	4601      	mov	r1, r0
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	f000 bcfb 	b.w	800ba9c <_free_r>
 800b0a6:	bf00      	nop
 800b0a8:	20000134 	.word	0x20000134

0800b0ac <sbrk_aligned>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b0ec <sbrk_aligned+0x40>)
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	6831      	ldr	r1, [r6, #0]
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	b911      	cbnz	r1, 800b0be <sbrk_aligned+0x12>
 800b0b8:	f000 fc74 	bl	800b9a4 <_sbrk_r>
 800b0bc:	6030      	str	r0, [r6, #0]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 fc6f 	bl	800b9a4 <_sbrk_r>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d103      	bne.n	800b0d2 <sbrk_aligned+0x26>
 800b0ca:	f04f 34ff 	mov.w	r4, #4294967295
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	1cc4      	adds	r4, r0, #3
 800b0d4:	f024 0403 	bic.w	r4, r4, #3
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	d0f8      	beq.n	800b0ce <sbrk_aligned+0x22>
 800b0dc:	1a21      	subs	r1, r4, r0
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f000 fc60 	bl	800b9a4 <_sbrk_r>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d1f2      	bne.n	800b0ce <sbrk_aligned+0x22>
 800b0e8:	e7ef      	b.n	800b0ca <sbrk_aligned+0x1e>
 800b0ea:	bf00      	nop
 800b0ec:	2000115c 	.word	0x2000115c

0800b0f0 <_malloc_r>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	1ccd      	adds	r5, r1, #3
 800b0f6:	f025 0503 	bic.w	r5, r5, #3
 800b0fa:	3508      	adds	r5, #8
 800b0fc:	2d0c      	cmp	r5, #12
 800b0fe:	bf38      	it	cc
 800b100:	250c      	movcc	r5, #12
 800b102:	2d00      	cmp	r5, #0
 800b104:	4606      	mov	r6, r0
 800b106:	db01      	blt.n	800b10c <_malloc_r+0x1c>
 800b108:	42a9      	cmp	r1, r5
 800b10a:	d904      	bls.n	800b116 <_malloc_r+0x26>
 800b10c:	230c      	movs	r3, #12
 800b10e:	6033      	str	r3, [r6, #0]
 800b110:	2000      	movs	r0, #0
 800b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1ec <_malloc_r+0xfc>
 800b11a:	f000 f869 	bl	800b1f0 <__malloc_lock>
 800b11e:	f8d8 3000 	ldr.w	r3, [r8]
 800b122:	461c      	mov	r4, r3
 800b124:	bb44      	cbnz	r4, 800b178 <_malloc_r+0x88>
 800b126:	4629      	mov	r1, r5
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff ffbf 	bl	800b0ac <sbrk_aligned>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	4604      	mov	r4, r0
 800b132:	d158      	bne.n	800b1e6 <_malloc_r+0xf6>
 800b134:	f8d8 4000 	ldr.w	r4, [r8]
 800b138:	4627      	mov	r7, r4
 800b13a:	2f00      	cmp	r7, #0
 800b13c:	d143      	bne.n	800b1c6 <_malloc_r+0xd6>
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d04b      	beq.n	800b1da <_malloc_r+0xea>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	4639      	mov	r1, r7
 800b146:	4630      	mov	r0, r6
 800b148:	eb04 0903 	add.w	r9, r4, r3
 800b14c:	f000 fc2a 	bl	800b9a4 <_sbrk_r>
 800b150:	4581      	cmp	r9, r0
 800b152:	d142      	bne.n	800b1da <_malloc_r+0xea>
 800b154:	6821      	ldr	r1, [r4, #0]
 800b156:	1a6d      	subs	r5, r5, r1
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffa6 	bl	800b0ac <sbrk_aligned>
 800b160:	3001      	adds	r0, #1
 800b162:	d03a      	beq.n	800b1da <_malloc_r+0xea>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	442b      	add	r3, r5
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	f8d8 3000 	ldr.w	r3, [r8]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	bb62      	cbnz	r2, 800b1cc <_malloc_r+0xdc>
 800b172:	f8c8 7000 	str.w	r7, [r8]
 800b176:	e00f      	b.n	800b198 <_malloc_r+0xa8>
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	1b52      	subs	r2, r2, r5
 800b17c:	d420      	bmi.n	800b1c0 <_malloc_r+0xd0>
 800b17e:	2a0b      	cmp	r2, #11
 800b180:	d917      	bls.n	800b1b2 <_malloc_r+0xc2>
 800b182:	1961      	adds	r1, r4, r5
 800b184:	42a3      	cmp	r3, r4
 800b186:	6025      	str	r5, [r4, #0]
 800b188:	bf18      	it	ne
 800b18a:	6059      	strne	r1, [r3, #4]
 800b18c:	6863      	ldr	r3, [r4, #4]
 800b18e:	bf08      	it	eq
 800b190:	f8c8 1000 	streq.w	r1, [r8]
 800b194:	5162      	str	r2, [r4, r5]
 800b196:	604b      	str	r3, [r1, #4]
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 f82f 	bl	800b1fc <__malloc_unlock>
 800b19e:	f104 000b 	add.w	r0, r4, #11
 800b1a2:	1d23      	adds	r3, r4, #4
 800b1a4:	f020 0007 	bic.w	r0, r0, #7
 800b1a8:	1ac2      	subs	r2, r0, r3
 800b1aa:	bf1c      	itt	ne
 800b1ac:	1a1b      	subne	r3, r3, r0
 800b1ae:	50a3      	strne	r3, [r4, r2]
 800b1b0:	e7af      	b.n	800b112 <_malloc_r+0x22>
 800b1b2:	6862      	ldr	r2, [r4, #4]
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	bf0c      	ite	eq
 800b1b8:	f8c8 2000 	streq.w	r2, [r8]
 800b1bc:	605a      	strne	r2, [r3, #4]
 800b1be:	e7eb      	b.n	800b198 <_malloc_r+0xa8>
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	6864      	ldr	r4, [r4, #4]
 800b1c4:	e7ae      	b.n	800b124 <_malloc_r+0x34>
 800b1c6:	463c      	mov	r4, r7
 800b1c8:	687f      	ldr	r7, [r7, #4]
 800b1ca:	e7b6      	b.n	800b13a <_malloc_r+0x4a>
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d1fb      	bne.n	800b1cc <_malloc_r+0xdc>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6053      	str	r3, [r2, #4]
 800b1d8:	e7de      	b.n	800b198 <_malloc_r+0xa8>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 f80c 	bl	800b1fc <__malloc_unlock>
 800b1e4:	e794      	b.n	800b110 <_malloc_r+0x20>
 800b1e6:	6005      	str	r5, [r0, #0]
 800b1e8:	e7d6      	b.n	800b198 <_malloc_r+0xa8>
 800b1ea:	bf00      	nop
 800b1ec:	20001160 	.word	0x20001160

0800b1f0 <__malloc_lock>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	@ (800b1f8 <__malloc_lock+0x8>)
 800b1f2:	f000 bc24 	b.w	800ba3e <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	200012a4 	.word	0x200012a4

0800b1fc <__malloc_unlock>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <__malloc_unlock+0x8>)
 800b1fe:	f000 bc1f 	b.w	800ba40 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	200012a4 	.word	0x200012a4

0800b208 <_strtol_l.constprop.0>:
 800b208:	2b24      	cmp	r3, #36	@ 0x24
 800b20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b20e:	4686      	mov	lr, r0
 800b210:	4690      	mov	r8, r2
 800b212:	d801      	bhi.n	800b218 <_strtol_l.constprop.0+0x10>
 800b214:	2b01      	cmp	r3, #1
 800b216:	d106      	bne.n	800b226 <_strtol_l.constprop.0+0x1e>
 800b218:	f000 fbe6 	bl	800b9e8 <__errno>
 800b21c:	2316      	movs	r3, #22
 800b21e:	6003      	str	r3, [r0, #0]
 800b220:	2000      	movs	r0, #0
 800b222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b226:	4834      	ldr	r0, [pc, #208]	@ (800b2f8 <_strtol_l.constprop.0+0xf0>)
 800b228:	460d      	mov	r5, r1
 800b22a:	462a      	mov	r2, r5
 800b22c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b230:	5d06      	ldrb	r6, [r0, r4]
 800b232:	f016 0608 	ands.w	r6, r6, #8
 800b236:	d1f8      	bne.n	800b22a <_strtol_l.constprop.0+0x22>
 800b238:	2c2d      	cmp	r4, #45	@ 0x2d
 800b23a:	d12d      	bne.n	800b298 <_strtol_l.constprop.0+0x90>
 800b23c:	782c      	ldrb	r4, [r5, #0]
 800b23e:	2601      	movs	r6, #1
 800b240:	1c95      	adds	r5, r2, #2
 800b242:	f033 0210 	bics.w	r2, r3, #16
 800b246:	d109      	bne.n	800b25c <_strtol_l.constprop.0+0x54>
 800b248:	2c30      	cmp	r4, #48	@ 0x30
 800b24a:	d12a      	bne.n	800b2a2 <_strtol_l.constprop.0+0x9a>
 800b24c:	782a      	ldrb	r2, [r5, #0]
 800b24e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b252:	2a58      	cmp	r2, #88	@ 0x58
 800b254:	d125      	bne.n	800b2a2 <_strtol_l.constprop.0+0x9a>
 800b256:	786c      	ldrb	r4, [r5, #1]
 800b258:	2310      	movs	r3, #16
 800b25a:	3502      	adds	r5, #2
 800b25c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b260:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b264:	2200      	movs	r2, #0
 800b266:	fbbc f9f3 	udiv	r9, ip, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b270:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b274:	2f09      	cmp	r7, #9
 800b276:	d81b      	bhi.n	800b2b0 <_strtol_l.constprop.0+0xa8>
 800b278:	463c      	mov	r4, r7
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	dd27      	ble.n	800b2ce <_strtol_l.constprop.0+0xc6>
 800b27e:	1c57      	adds	r7, r2, #1
 800b280:	d007      	beq.n	800b292 <_strtol_l.constprop.0+0x8a>
 800b282:	4581      	cmp	r9, r0
 800b284:	d320      	bcc.n	800b2c8 <_strtol_l.constprop.0+0xc0>
 800b286:	d101      	bne.n	800b28c <_strtol_l.constprop.0+0x84>
 800b288:	45a2      	cmp	sl, r4
 800b28a:	db1d      	blt.n	800b2c8 <_strtol_l.constprop.0+0xc0>
 800b28c:	fb00 4003 	mla	r0, r0, r3, r4
 800b290:	2201      	movs	r2, #1
 800b292:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b296:	e7eb      	b.n	800b270 <_strtol_l.constprop.0+0x68>
 800b298:	2c2b      	cmp	r4, #43	@ 0x2b
 800b29a:	bf04      	itt	eq
 800b29c:	782c      	ldrbeq	r4, [r5, #0]
 800b29e:	1c95      	addeq	r5, r2, #2
 800b2a0:	e7cf      	b.n	800b242 <_strtol_l.constprop.0+0x3a>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1da      	bne.n	800b25c <_strtol_l.constprop.0+0x54>
 800b2a6:	2c30      	cmp	r4, #48	@ 0x30
 800b2a8:	bf0c      	ite	eq
 800b2aa:	2308      	moveq	r3, #8
 800b2ac:	230a      	movne	r3, #10
 800b2ae:	e7d5      	b.n	800b25c <_strtol_l.constprop.0+0x54>
 800b2b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2b4:	2f19      	cmp	r7, #25
 800b2b6:	d801      	bhi.n	800b2bc <_strtol_l.constprop.0+0xb4>
 800b2b8:	3c37      	subs	r4, #55	@ 0x37
 800b2ba:	e7de      	b.n	800b27a <_strtol_l.constprop.0+0x72>
 800b2bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2c0:	2f19      	cmp	r7, #25
 800b2c2:	d804      	bhi.n	800b2ce <_strtol_l.constprop.0+0xc6>
 800b2c4:	3c57      	subs	r4, #87	@ 0x57
 800b2c6:	e7d8      	b.n	800b27a <_strtol_l.constprop.0+0x72>
 800b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2cc:	e7e1      	b.n	800b292 <_strtol_l.constprop.0+0x8a>
 800b2ce:	1c53      	adds	r3, r2, #1
 800b2d0:	d108      	bne.n	800b2e4 <_strtol_l.constprop.0+0xdc>
 800b2d2:	2322      	movs	r3, #34	@ 0x22
 800b2d4:	f8ce 3000 	str.w	r3, [lr]
 800b2d8:	4660      	mov	r0, ip
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	d0a0      	beq.n	800b222 <_strtol_l.constprop.0+0x1a>
 800b2e0:	1e69      	subs	r1, r5, #1
 800b2e2:	e006      	b.n	800b2f2 <_strtol_l.constprop.0+0xea>
 800b2e4:	b106      	cbz	r6, 800b2e8 <_strtol_l.constprop.0+0xe0>
 800b2e6:	4240      	negs	r0, r0
 800b2e8:	f1b8 0f00 	cmp.w	r8, #0
 800b2ec:	d099      	beq.n	800b222 <_strtol_l.constprop.0+0x1a>
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	d1f6      	bne.n	800b2e0 <_strtol_l.constprop.0+0xd8>
 800b2f2:	f8c8 1000 	str.w	r1, [r8]
 800b2f6:	e794      	b.n	800b222 <_strtol_l.constprop.0+0x1a>
 800b2f8:	0800cb8b 	.word	0x0800cb8b

0800b2fc <strtol>:
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	460a      	mov	r2, r1
 800b300:	4601      	mov	r1, r0
 800b302:	4802      	ldr	r0, [pc, #8]	@ (800b30c <strtol+0x10>)
 800b304:	6800      	ldr	r0, [r0, #0]
 800b306:	f7ff bf7f 	b.w	800b208 <_strtol_l.constprop.0>
 800b30a:	bf00      	nop
 800b30c:	20000134 	.word	0x20000134

0800b310 <std>:
 800b310:	2300      	movs	r3, #0
 800b312:	b510      	push	{r4, lr}
 800b314:	4604      	mov	r4, r0
 800b316:	e9c0 3300 	strd	r3, r3, [r0]
 800b31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b31e:	6083      	str	r3, [r0, #8]
 800b320:	8181      	strh	r1, [r0, #12]
 800b322:	6643      	str	r3, [r0, #100]	@ 0x64
 800b324:	81c2      	strh	r2, [r0, #14]
 800b326:	6183      	str	r3, [r0, #24]
 800b328:	4619      	mov	r1, r3
 800b32a:	2208      	movs	r2, #8
 800b32c:	305c      	adds	r0, #92	@ 0x5c
 800b32e:	f000 fa65 	bl	800b7fc <memset>
 800b332:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <std+0x58>)
 800b334:	6263      	str	r3, [r4, #36]	@ 0x24
 800b336:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <std+0x5c>)
 800b338:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b33a:	4b0d      	ldr	r3, [pc, #52]	@ (800b370 <std+0x60>)
 800b33c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b33e:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <std+0x64>)
 800b340:	6323      	str	r3, [r4, #48]	@ 0x30
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <std+0x68>)
 800b344:	6224      	str	r4, [r4, #32]
 800b346:	429c      	cmp	r4, r3
 800b348:	d006      	beq.n	800b358 <std+0x48>
 800b34a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b34e:	4294      	cmp	r4, r2
 800b350:	d002      	beq.n	800b358 <std+0x48>
 800b352:	33d0      	adds	r3, #208	@ 0xd0
 800b354:	429c      	cmp	r4, r3
 800b356:	d105      	bne.n	800b364 <std+0x54>
 800b358:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b360:	f000 bb6c 	b.w	800ba3c <__retarget_lock_init_recursive>
 800b364:	bd10      	pop	{r4, pc}
 800b366:	bf00      	nop
 800b368:	0800b5dd 	.word	0x0800b5dd
 800b36c:	0800b5ff 	.word	0x0800b5ff
 800b370:	0800b637 	.word	0x0800b637
 800b374:	0800b65b 	.word	0x0800b65b
 800b378:	20001164 	.word	0x20001164

0800b37c <stdio_exit_handler>:
 800b37c:	4a02      	ldr	r2, [pc, #8]	@ (800b388 <stdio_exit_handler+0xc>)
 800b37e:	4903      	ldr	r1, [pc, #12]	@ (800b38c <stdio_exit_handler+0x10>)
 800b380:	4803      	ldr	r0, [pc, #12]	@ (800b390 <stdio_exit_handler+0x14>)
 800b382:	f000 b869 	b.w	800b458 <_fwalk_sglue>
 800b386:	bf00      	nop
 800b388:	20000128 	.word	0x20000128
 800b38c:	0800c489 	.word	0x0800c489
 800b390:	20000138 	.word	0x20000138

0800b394 <cleanup_stdio>:
 800b394:	6841      	ldr	r1, [r0, #4]
 800b396:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c8 <cleanup_stdio+0x34>)
 800b398:	4299      	cmp	r1, r3
 800b39a:	b510      	push	{r4, lr}
 800b39c:	4604      	mov	r4, r0
 800b39e:	d001      	beq.n	800b3a4 <cleanup_stdio+0x10>
 800b3a0:	f001 f872 	bl	800c488 <_fflush_r>
 800b3a4:	68a1      	ldr	r1, [r4, #8]
 800b3a6:	4b09      	ldr	r3, [pc, #36]	@ (800b3cc <cleanup_stdio+0x38>)
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	d002      	beq.n	800b3b2 <cleanup_stdio+0x1e>
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f001 f86b 	bl	800c488 <_fflush_r>
 800b3b2:	68e1      	ldr	r1, [r4, #12]
 800b3b4:	4b06      	ldr	r3, [pc, #24]	@ (800b3d0 <cleanup_stdio+0x3c>)
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	d004      	beq.n	800b3c4 <cleanup_stdio+0x30>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c0:	f001 b862 	b.w	800c488 <_fflush_r>
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20001164 	.word	0x20001164
 800b3cc:	200011cc 	.word	0x200011cc
 800b3d0:	20001234 	.word	0x20001234

0800b3d4 <global_stdio_init.part.0>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b404 <global_stdio_init.part.0+0x30>)
 800b3d8:	4c0b      	ldr	r4, [pc, #44]	@ (800b408 <global_stdio_init.part.0+0x34>)
 800b3da:	4a0c      	ldr	r2, [pc, #48]	@ (800b40c <global_stdio_init.part.0+0x38>)
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	f7ff ff94 	bl	800b310 <std>
 800b3e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2109      	movs	r1, #9
 800b3f0:	f7ff ff8e 	bl	800b310 <std>
 800b3f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fe:	2112      	movs	r1, #18
 800b400:	f7ff bf86 	b.w	800b310 <std>
 800b404:	2000129c 	.word	0x2000129c
 800b408:	20001164 	.word	0x20001164
 800b40c:	0800b37d 	.word	0x0800b37d

0800b410 <__sfp_lock_acquire>:
 800b410:	4801      	ldr	r0, [pc, #4]	@ (800b418 <__sfp_lock_acquire+0x8>)
 800b412:	f000 bb14 	b.w	800ba3e <__retarget_lock_acquire_recursive>
 800b416:	bf00      	nop
 800b418:	200012a5 	.word	0x200012a5

0800b41c <__sfp_lock_release>:
 800b41c:	4801      	ldr	r0, [pc, #4]	@ (800b424 <__sfp_lock_release+0x8>)
 800b41e:	f000 bb0f 	b.w	800ba40 <__retarget_lock_release_recursive>
 800b422:	bf00      	nop
 800b424:	200012a5 	.word	0x200012a5

0800b428 <__sinit>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	4604      	mov	r4, r0
 800b42c:	f7ff fff0 	bl	800b410 <__sfp_lock_acquire>
 800b430:	6a23      	ldr	r3, [r4, #32]
 800b432:	b11b      	cbz	r3, 800b43c <__sinit+0x14>
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f7ff bff0 	b.w	800b41c <__sfp_lock_release>
 800b43c:	4b04      	ldr	r3, [pc, #16]	@ (800b450 <__sinit+0x28>)
 800b43e:	6223      	str	r3, [r4, #32]
 800b440:	4b04      	ldr	r3, [pc, #16]	@ (800b454 <__sinit+0x2c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1f5      	bne.n	800b434 <__sinit+0xc>
 800b448:	f7ff ffc4 	bl	800b3d4 <global_stdio_init.part.0>
 800b44c:	e7f2      	b.n	800b434 <__sinit+0xc>
 800b44e:	bf00      	nop
 800b450:	0800b395 	.word	0x0800b395
 800b454:	2000129c 	.word	0x2000129c

0800b458 <_fwalk_sglue>:
 800b458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b45c:	4607      	mov	r7, r0
 800b45e:	4688      	mov	r8, r1
 800b460:	4614      	mov	r4, r2
 800b462:	2600      	movs	r6, #0
 800b464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b468:	f1b9 0901 	subs.w	r9, r9, #1
 800b46c:	d505      	bpl.n	800b47a <_fwalk_sglue+0x22>
 800b46e:	6824      	ldr	r4, [r4, #0]
 800b470:	2c00      	cmp	r4, #0
 800b472:	d1f7      	bne.n	800b464 <_fwalk_sglue+0xc>
 800b474:	4630      	mov	r0, r6
 800b476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47a:	89ab      	ldrh	r3, [r5, #12]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d907      	bls.n	800b490 <_fwalk_sglue+0x38>
 800b480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b484:	3301      	adds	r3, #1
 800b486:	d003      	beq.n	800b490 <_fwalk_sglue+0x38>
 800b488:	4629      	mov	r1, r5
 800b48a:	4638      	mov	r0, r7
 800b48c:	47c0      	blx	r8
 800b48e:	4306      	orrs	r6, r0
 800b490:	3568      	adds	r5, #104	@ 0x68
 800b492:	e7e9      	b.n	800b468 <_fwalk_sglue+0x10>

0800b494 <iprintf>:
 800b494:	b40f      	push	{r0, r1, r2, r3}
 800b496:	b507      	push	{r0, r1, r2, lr}
 800b498:	4906      	ldr	r1, [pc, #24]	@ (800b4b4 <iprintf+0x20>)
 800b49a:	ab04      	add	r3, sp, #16
 800b49c:	6808      	ldr	r0, [r1, #0]
 800b49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a2:	6881      	ldr	r1, [r0, #8]
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	f000 fcc5 	bl	800be34 <_vfiprintf_r>
 800b4aa:	b003      	add	sp, #12
 800b4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b0:	b004      	add	sp, #16
 800b4b2:	4770      	bx	lr
 800b4b4:	20000134 	.word	0x20000134

0800b4b8 <_puts_r>:
 800b4b8:	6a03      	ldr	r3, [r0, #32]
 800b4ba:	b570      	push	{r4, r5, r6, lr}
 800b4bc:	6884      	ldr	r4, [r0, #8]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	460e      	mov	r6, r1
 800b4c2:	b90b      	cbnz	r3, 800b4c8 <_puts_r+0x10>
 800b4c4:	f7ff ffb0 	bl	800b428 <__sinit>
 800b4c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4ca:	07db      	lsls	r3, r3, #31
 800b4cc:	d405      	bmi.n	800b4da <_puts_r+0x22>
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	0598      	lsls	r0, r3, #22
 800b4d2:	d402      	bmi.n	800b4da <_puts_r+0x22>
 800b4d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4d6:	f000 fab2 	bl	800ba3e <__retarget_lock_acquire_recursive>
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	0719      	lsls	r1, r3, #28
 800b4de:	d502      	bpl.n	800b4e6 <_puts_r+0x2e>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d135      	bne.n	800b552 <_puts_r+0x9a>
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f000 f931 	bl	800b750 <__swsetup_r>
 800b4ee:	b380      	cbz	r0, 800b552 <_puts_r+0x9a>
 800b4f0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4f6:	07da      	lsls	r2, r3, #31
 800b4f8:	d405      	bmi.n	800b506 <_puts_r+0x4e>
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	059b      	lsls	r3, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_puts_r+0x4e>
 800b500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b502:	f000 fa9d 	bl	800ba40 <__retarget_lock_release_recursive>
 800b506:	4628      	mov	r0, r5
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	da04      	bge.n	800b518 <_puts_r+0x60>
 800b50e:	69a2      	ldr	r2, [r4, #24]
 800b510:	429a      	cmp	r2, r3
 800b512:	dc17      	bgt.n	800b544 <_puts_r+0x8c>
 800b514:	290a      	cmp	r1, #10
 800b516:	d015      	beq.n	800b544 <_puts_r+0x8c>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	6022      	str	r2, [r4, #0]
 800b51e:	7019      	strb	r1, [r3, #0]
 800b520:	68a3      	ldr	r3, [r4, #8]
 800b522:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b526:	3b01      	subs	r3, #1
 800b528:	60a3      	str	r3, [r4, #8]
 800b52a:	2900      	cmp	r1, #0
 800b52c:	d1ed      	bne.n	800b50a <_puts_r+0x52>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	da11      	bge.n	800b556 <_puts_r+0x9e>
 800b532:	4622      	mov	r2, r4
 800b534:	210a      	movs	r1, #10
 800b536:	4628      	mov	r0, r5
 800b538:	f000 f8cc 	bl	800b6d4 <__swbuf_r>
 800b53c:	3001      	adds	r0, #1
 800b53e:	d0d7      	beq.n	800b4f0 <_puts_r+0x38>
 800b540:	250a      	movs	r5, #10
 800b542:	e7d7      	b.n	800b4f4 <_puts_r+0x3c>
 800b544:	4622      	mov	r2, r4
 800b546:	4628      	mov	r0, r5
 800b548:	f000 f8c4 	bl	800b6d4 <__swbuf_r>
 800b54c:	3001      	adds	r0, #1
 800b54e:	d1e7      	bne.n	800b520 <_puts_r+0x68>
 800b550:	e7ce      	b.n	800b4f0 <_puts_r+0x38>
 800b552:	3e01      	subs	r6, #1
 800b554:	e7e4      	b.n	800b520 <_puts_r+0x68>
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	1c5a      	adds	r2, r3, #1
 800b55a:	6022      	str	r2, [r4, #0]
 800b55c:	220a      	movs	r2, #10
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e7ee      	b.n	800b540 <_puts_r+0x88>
	...

0800b564 <puts>:
 800b564:	4b02      	ldr	r3, [pc, #8]	@ (800b570 <puts+0xc>)
 800b566:	4601      	mov	r1, r0
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	f7ff bfa5 	b.w	800b4b8 <_puts_r>
 800b56e:	bf00      	nop
 800b570:	20000134 	.word	0x20000134

0800b574 <sniprintf>:
 800b574:	b40c      	push	{r2, r3}
 800b576:	b530      	push	{r4, r5, lr}
 800b578:	4b17      	ldr	r3, [pc, #92]	@ (800b5d8 <sniprintf+0x64>)
 800b57a:	1e0c      	subs	r4, r1, #0
 800b57c:	681d      	ldr	r5, [r3, #0]
 800b57e:	b09d      	sub	sp, #116	@ 0x74
 800b580:	da08      	bge.n	800b594 <sniprintf+0x20>
 800b582:	238b      	movs	r3, #139	@ 0x8b
 800b584:	602b      	str	r3, [r5, #0]
 800b586:	f04f 30ff 	mov.w	r0, #4294967295
 800b58a:	b01d      	add	sp, #116	@ 0x74
 800b58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b590:	b002      	add	sp, #8
 800b592:	4770      	bx	lr
 800b594:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b59c:	bf14      	ite	ne
 800b59e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5a2:	4623      	moveq	r3, r4
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5ac:	9002      	str	r0, [sp, #8]
 800b5ae:	9006      	str	r0, [sp, #24]
 800b5b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b5b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b5b6:	ab21      	add	r3, sp, #132	@ 0x84
 800b5b8:	a902      	add	r1, sp, #8
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	f000 fb13 	bl	800bbe8 <_svfiprintf_r>
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	bfbc      	itt	lt
 800b5c6:	238b      	movlt	r3, #139	@ 0x8b
 800b5c8:	602b      	strlt	r3, [r5, #0]
 800b5ca:	2c00      	cmp	r4, #0
 800b5cc:	d0dd      	beq.n	800b58a <sniprintf+0x16>
 800b5ce:	9b02      	ldr	r3, [sp, #8]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	e7d9      	b.n	800b58a <sniprintf+0x16>
 800b5d6:	bf00      	nop
 800b5d8:	20000134 	.word	0x20000134

0800b5dc <__sread>:
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	460c      	mov	r4, r1
 800b5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e4:	f000 f9cc 	bl	800b980 <_read_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	bfab      	itete	ge
 800b5ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f0:	181b      	addge	r3, r3, r0
 800b5f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5f6:	bfac      	ite	ge
 800b5f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5fa:	81a3      	strhlt	r3, [r4, #12]
 800b5fc:	bd10      	pop	{r4, pc}

0800b5fe <__swrite>:
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	461f      	mov	r7, r3
 800b604:	898b      	ldrh	r3, [r1, #12]
 800b606:	05db      	lsls	r3, r3, #23
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	4616      	mov	r6, r2
 800b60e:	d505      	bpl.n	800b61c <__swrite+0x1e>
 800b610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b614:	2302      	movs	r3, #2
 800b616:	2200      	movs	r2, #0
 800b618:	f000 f9a0 	bl	800b95c <_lseek_r>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	4632      	mov	r2, r6
 800b62a:	463b      	mov	r3, r7
 800b62c:	4628      	mov	r0, r5
 800b62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b632:	f000 b9c7 	b.w	800b9c4 <_write_r>

0800b636 <__sseek>:
 800b636:	b510      	push	{r4, lr}
 800b638:	460c      	mov	r4, r1
 800b63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63e:	f000 f98d 	bl	800b95c <_lseek_r>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	bf15      	itete	ne
 800b648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b64a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b64e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b652:	81a3      	strheq	r3, [r4, #12]
 800b654:	bf18      	it	ne
 800b656:	81a3      	strhne	r3, [r4, #12]
 800b658:	bd10      	pop	{r4, pc}

0800b65a <__sclose>:
 800b65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65e:	f000 b96d 	b.w	800b93c <_close_r>

0800b662 <_vsniprintf_r>:
 800b662:	b530      	push	{r4, r5, lr}
 800b664:	4614      	mov	r4, r2
 800b666:	2c00      	cmp	r4, #0
 800b668:	b09b      	sub	sp, #108	@ 0x6c
 800b66a:	4605      	mov	r5, r0
 800b66c:	461a      	mov	r2, r3
 800b66e:	da05      	bge.n	800b67c <_vsniprintf_r+0x1a>
 800b670:	238b      	movs	r3, #139	@ 0x8b
 800b672:	6003      	str	r3, [r0, #0]
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	b01b      	add	sp, #108	@ 0x6c
 800b67a:	bd30      	pop	{r4, r5, pc}
 800b67c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b680:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b684:	bf14      	ite	ne
 800b686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b68a:	4623      	moveq	r3, r4
 800b68c:	9302      	str	r3, [sp, #8]
 800b68e:	9305      	str	r3, [sp, #20]
 800b690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b694:	9100      	str	r1, [sp, #0]
 800b696:	9104      	str	r1, [sp, #16]
 800b698:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b69c:	4669      	mov	r1, sp
 800b69e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b6a0:	f000 faa2 	bl	800bbe8 <_svfiprintf_r>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	bfbc      	itt	lt
 800b6a8:	238b      	movlt	r3, #139	@ 0x8b
 800b6aa:	602b      	strlt	r3, [r5, #0]
 800b6ac:	2c00      	cmp	r4, #0
 800b6ae:	d0e3      	beq.n	800b678 <_vsniprintf_r+0x16>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	e7df      	b.n	800b678 <_vsniprintf_r+0x16>

0800b6b8 <vsniprintf>:
 800b6b8:	b507      	push	{r0, r1, r2, lr}
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	460a      	mov	r2, r1
 800b6c0:	4601      	mov	r1, r0
 800b6c2:	4803      	ldr	r0, [pc, #12]	@ (800b6d0 <vsniprintf+0x18>)
 800b6c4:	6800      	ldr	r0, [r0, #0]
 800b6c6:	f7ff ffcc 	bl	800b662 <_vsniprintf_r>
 800b6ca:	b003      	add	sp, #12
 800b6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6d0:	20000134 	.word	0x20000134

0800b6d4 <__swbuf_r>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	460e      	mov	r6, r1
 800b6d8:	4614      	mov	r4, r2
 800b6da:	4605      	mov	r5, r0
 800b6dc:	b118      	cbz	r0, 800b6e6 <__swbuf_r+0x12>
 800b6de:	6a03      	ldr	r3, [r0, #32]
 800b6e0:	b90b      	cbnz	r3, 800b6e6 <__swbuf_r+0x12>
 800b6e2:	f7ff fea1 	bl	800b428 <__sinit>
 800b6e6:	69a3      	ldr	r3, [r4, #24]
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	071a      	lsls	r2, r3, #28
 800b6ee:	d501      	bpl.n	800b6f4 <__swbuf_r+0x20>
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	b943      	cbnz	r3, 800b706 <__swbuf_r+0x32>
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 f82a 	bl	800b750 <__swsetup_r>
 800b6fc:	b118      	cbz	r0, 800b706 <__swbuf_r+0x32>
 800b6fe:	f04f 37ff 	mov.w	r7, #4294967295
 800b702:	4638      	mov	r0, r7
 800b704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	1a98      	subs	r0, r3, r2
 800b70c:	6963      	ldr	r3, [r4, #20]
 800b70e:	b2f6      	uxtb	r6, r6
 800b710:	4283      	cmp	r3, r0
 800b712:	4637      	mov	r7, r6
 800b714:	dc05      	bgt.n	800b722 <__swbuf_r+0x4e>
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f000 feb5 	bl	800c488 <_fflush_r>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1ed      	bne.n	800b6fe <__swbuf_r+0x2a>
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	3b01      	subs	r3, #1
 800b726:	60a3      	str	r3, [r4, #8]
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	6022      	str	r2, [r4, #0]
 800b72e:	701e      	strb	r6, [r3, #0]
 800b730:	6962      	ldr	r2, [r4, #20]
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	429a      	cmp	r2, r3
 800b736:	d004      	beq.n	800b742 <__swbuf_r+0x6e>
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	07db      	lsls	r3, r3, #31
 800b73c:	d5e1      	bpl.n	800b702 <__swbuf_r+0x2e>
 800b73e:	2e0a      	cmp	r6, #10
 800b740:	d1df      	bne.n	800b702 <__swbuf_r+0x2e>
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f000 fe9f 	bl	800c488 <_fflush_r>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0d9      	beq.n	800b702 <__swbuf_r+0x2e>
 800b74e:	e7d6      	b.n	800b6fe <__swbuf_r+0x2a>

0800b750 <__swsetup_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4b29      	ldr	r3, [pc, #164]	@ (800b7f8 <__swsetup_r+0xa8>)
 800b754:	4605      	mov	r5, r0
 800b756:	6818      	ldr	r0, [r3, #0]
 800b758:	460c      	mov	r4, r1
 800b75a:	b118      	cbz	r0, 800b764 <__swsetup_r+0x14>
 800b75c:	6a03      	ldr	r3, [r0, #32]
 800b75e:	b90b      	cbnz	r3, 800b764 <__swsetup_r+0x14>
 800b760:	f7ff fe62 	bl	800b428 <__sinit>
 800b764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b768:	0719      	lsls	r1, r3, #28
 800b76a:	d422      	bmi.n	800b7b2 <__swsetup_r+0x62>
 800b76c:	06da      	lsls	r2, r3, #27
 800b76e:	d407      	bmi.n	800b780 <__swsetup_r+0x30>
 800b770:	2209      	movs	r2, #9
 800b772:	602a      	str	r2, [r5, #0]
 800b774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b778:	81a3      	strh	r3, [r4, #12]
 800b77a:	f04f 30ff 	mov.w	r0, #4294967295
 800b77e:	e033      	b.n	800b7e8 <__swsetup_r+0x98>
 800b780:	0758      	lsls	r0, r3, #29
 800b782:	d512      	bpl.n	800b7aa <__swsetup_r+0x5a>
 800b784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b786:	b141      	cbz	r1, 800b79a <__swsetup_r+0x4a>
 800b788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b78c:	4299      	cmp	r1, r3
 800b78e:	d002      	beq.n	800b796 <__swsetup_r+0x46>
 800b790:	4628      	mov	r0, r5
 800b792:	f000 f983 	bl	800ba9c <_free_r>
 800b796:	2300      	movs	r3, #0
 800b798:	6363      	str	r3, [r4, #52]	@ 0x34
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	6063      	str	r3, [r4, #4]
 800b7a6:	6923      	ldr	r3, [r4, #16]
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	f043 0308 	orr.w	r3, r3, #8
 800b7b0:	81a3      	strh	r3, [r4, #12]
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	b94b      	cbnz	r3, 800b7ca <__swsetup_r+0x7a>
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c0:	d003      	beq.n	800b7ca <__swsetup_r+0x7a>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f000 febf 	bl	800c548 <__smakebuf_r>
 800b7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ce:	f013 0201 	ands.w	r2, r3, #1
 800b7d2:	d00a      	beq.n	800b7ea <__swsetup_r+0x9a>
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	60a2      	str	r2, [r4, #8]
 800b7d8:	6962      	ldr	r2, [r4, #20]
 800b7da:	4252      	negs	r2, r2
 800b7dc:	61a2      	str	r2, [r4, #24]
 800b7de:	6922      	ldr	r2, [r4, #16]
 800b7e0:	b942      	cbnz	r2, 800b7f4 <__swsetup_r+0xa4>
 800b7e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7e6:	d1c5      	bne.n	800b774 <__swsetup_r+0x24>
 800b7e8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ea:	0799      	lsls	r1, r3, #30
 800b7ec:	bf58      	it	pl
 800b7ee:	6962      	ldrpl	r2, [r4, #20]
 800b7f0:	60a2      	str	r2, [r4, #8]
 800b7f2:	e7f4      	b.n	800b7de <__swsetup_r+0x8e>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7f7      	b.n	800b7e8 <__swsetup_r+0x98>
 800b7f8:	20000134 	.word	0x20000134

0800b7fc <memset>:
 800b7fc:	4402      	add	r2, r0
 800b7fe:	4603      	mov	r3, r0
 800b800:	4293      	cmp	r3, r2
 800b802:	d100      	bne.n	800b806 <memset+0xa>
 800b804:	4770      	bx	lr
 800b806:	f803 1b01 	strb.w	r1, [r3], #1
 800b80a:	e7f9      	b.n	800b800 <memset+0x4>

0800b80c <strchr>:
 800b80c:	b2c9      	uxtb	r1, r1
 800b80e:	4603      	mov	r3, r0
 800b810:	4618      	mov	r0, r3
 800b812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b816:	b112      	cbz	r2, 800b81e <strchr+0x12>
 800b818:	428a      	cmp	r2, r1
 800b81a:	d1f9      	bne.n	800b810 <strchr+0x4>
 800b81c:	4770      	bx	lr
 800b81e:	2900      	cmp	r1, #0
 800b820:	bf18      	it	ne
 800b822:	2000      	movne	r0, #0
 800b824:	4770      	bx	lr
	...

0800b828 <strdup>:
 800b828:	4b02      	ldr	r3, [pc, #8]	@ (800b834 <strdup+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f000 b803 	b.w	800b838 <_strdup_r>
 800b832:	bf00      	nop
 800b834:	20000134 	.word	0x20000134

0800b838 <_strdup_r>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	4604      	mov	r4, r0
 800b83c:	4608      	mov	r0, r1
 800b83e:	460d      	mov	r5, r1
 800b840:	f7f4 fcd8 	bl	80001f4 <strlen>
 800b844:	1c46      	adds	r6, r0, #1
 800b846:	4631      	mov	r1, r6
 800b848:	4620      	mov	r0, r4
 800b84a:	f7ff fc51 	bl	800b0f0 <_malloc_r>
 800b84e:	4604      	mov	r4, r0
 800b850:	b118      	cbz	r0, 800b85a <_strdup_r+0x22>
 800b852:	4632      	mov	r2, r6
 800b854:	4629      	mov	r1, r5
 800b856:	f000 f8f4 	bl	800ba42 <memcpy>
 800b85a:	4620      	mov	r0, r4
 800b85c:	bd70      	pop	{r4, r5, r6, pc}

0800b85e <strncmp>:
 800b85e:	b510      	push	{r4, lr}
 800b860:	b16a      	cbz	r2, 800b87e <strncmp+0x20>
 800b862:	3901      	subs	r1, #1
 800b864:	1884      	adds	r4, r0, r2
 800b866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b86a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b86e:	429a      	cmp	r2, r3
 800b870:	d103      	bne.n	800b87a <strncmp+0x1c>
 800b872:	42a0      	cmp	r0, r4
 800b874:	d001      	beq.n	800b87a <strncmp+0x1c>
 800b876:	2a00      	cmp	r2, #0
 800b878:	d1f5      	bne.n	800b866 <strncmp+0x8>
 800b87a:	1ad0      	subs	r0, r2, r3
 800b87c:	bd10      	pop	{r4, pc}
 800b87e:	4610      	mov	r0, r2
 800b880:	e7fc      	b.n	800b87c <strncmp+0x1e>
	...

0800b884 <strtok>:
 800b884:	4b16      	ldr	r3, [pc, #88]	@ (800b8e0 <strtok+0x5c>)
 800b886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88a:	681f      	ldr	r7, [r3, #0]
 800b88c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b88e:	4605      	mov	r5, r0
 800b890:	460e      	mov	r6, r1
 800b892:	b9ec      	cbnz	r4, 800b8d0 <strtok+0x4c>
 800b894:	2050      	movs	r0, #80	@ 0x50
 800b896:	f7ff fbf9 	bl	800b08c <malloc>
 800b89a:	4602      	mov	r2, r0
 800b89c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b89e:	b920      	cbnz	r0, 800b8aa <strtok+0x26>
 800b8a0:	4b10      	ldr	r3, [pc, #64]	@ (800b8e4 <strtok+0x60>)
 800b8a2:	4811      	ldr	r0, [pc, #68]	@ (800b8e8 <strtok+0x64>)
 800b8a4:	215b      	movs	r1, #91	@ 0x5b
 800b8a6:	f000 f8db 	bl	800ba60 <__assert_func>
 800b8aa:	e9c0 4400 	strd	r4, r4, [r0]
 800b8ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b8b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b8b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b8ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b8be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b8c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b8c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b8ca:	6184      	str	r4, [r0, #24]
 800b8cc:	7704      	strb	r4, [r0, #28]
 800b8ce:	6244      	str	r4, [r0, #36]	@ 0x24
 800b8d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8dc:	f000 b806 	b.w	800b8ec <__strtok_r>
 800b8e0:	20000134 	.word	0x20000134
 800b8e4:	0800cc8b 	.word	0x0800cc8b
 800b8e8:	0800cca2 	.word	0x0800cca2

0800b8ec <__strtok_r>:
 800b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	b908      	cbnz	r0, 800b8f6 <__strtok_r+0xa>
 800b8f2:	6814      	ldr	r4, [r2, #0]
 800b8f4:	b144      	cbz	r4, 800b908 <__strtok_r+0x1c>
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b902:	b91e      	cbnz	r6, 800b90c <__strtok_r+0x20>
 800b904:	b965      	cbnz	r5, 800b920 <__strtok_r+0x34>
 800b906:	6015      	str	r5, [r2, #0]
 800b908:	2000      	movs	r0, #0
 800b90a:	e005      	b.n	800b918 <__strtok_r+0x2c>
 800b90c:	42b5      	cmp	r5, r6
 800b90e:	d1f6      	bne.n	800b8fe <__strtok_r+0x12>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1f0      	bne.n	800b8f6 <__strtok_r+0xa>
 800b914:	6014      	str	r4, [r2, #0]
 800b916:	7003      	strb	r3, [r0, #0]
 800b918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b91a:	461c      	mov	r4, r3
 800b91c:	e00c      	b.n	800b938 <__strtok_r+0x4c>
 800b91e:	b915      	cbnz	r5, 800b926 <__strtok_r+0x3a>
 800b920:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b924:	460e      	mov	r6, r1
 800b926:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b92a:	42ab      	cmp	r3, r5
 800b92c:	d1f7      	bne.n	800b91e <__strtok_r+0x32>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0f3      	beq.n	800b91a <__strtok_r+0x2e>
 800b932:	2300      	movs	r3, #0
 800b934:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b938:	6014      	str	r4, [r2, #0]
 800b93a:	e7ed      	b.n	800b918 <__strtok_r+0x2c>

0800b93c <_close_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d06      	ldr	r5, [pc, #24]	@ (800b958 <_close_r+0x1c>)
 800b940:	2300      	movs	r3, #0
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	602b      	str	r3, [r5, #0]
 800b948:	f7f5 fcee 	bl	8001328 <_close>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_close_r+0x1a>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_close_r+0x1a>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	200012a0 	.word	0x200012a0

0800b95c <_lseek_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	@ (800b97c <_lseek_r+0x20>)
 800b960:	4604      	mov	r4, r0
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f5 fd03 	bl	8001376 <_lseek>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_lseek_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_lseek_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	200012a0 	.word	0x200012a0

0800b980 <_read_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d07      	ldr	r5, [pc, #28]	@ (800b9a0 <_read_r+0x20>)
 800b984:	4604      	mov	r4, r0
 800b986:	4608      	mov	r0, r1
 800b988:	4611      	mov	r1, r2
 800b98a:	2200      	movs	r2, #0
 800b98c:	602a      	str	r2, [r5, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	f7f5 fc91 	bl	80012b6 <_read>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_read_r+0x1e>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_read_r+0x1e>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	200012a0 	.word	0x200012a0

0800b9a4 <_sbrk_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d06      	ldr	r5, [pc, #24]	@ (800b9c0 <_sbrk_r+0x1c>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	f7f5 fcee 	bl	8001390 <_sbrk>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_sbrk_r+0x1a>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_sbrk_r+0x1a>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	200012a0 	.word	0x200012a0

0800b9c4 <_write_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	@ (800b9e4 <_write_r+0x20>)
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	602a      	str	r2, [r5, #0]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f7f5 fc8c 	bl	80012f0 <_write>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_write_r+0x1e>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_write_r+0x1e>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	200012a0 	.word	0x200012a0

0800b9e8 <__errno>:
 800b9e8:	4b01      	ldr	r3, [pc, #4]	@ (800b9f0 <__errno+0x8>)
 800b9ea:	6818      	ldr	r0, [r3, #0]
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20000134 	.word	0x20000134

0800b9f4 <__libc_init_array>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	4d0d      	ldr	r5, [pc, #52]	@ (800ba2c <__libc_init_array+0x38>)
 800b9f8:	4c0d      	ldr	r4, [pc, #52]	@ (800ba30 <__libc_init_array+0x3c>)
 800b9fa:	1b64      	subs	r4, r4, r5
 800b9fc:	10a4      	asrs	r4, r4, #2
 800b9fe:	2600      	movs	r6, #0
 800ba00:	42a6      	cmp	r6, r4
 800ba02:	d109      	bne.n	800ba18 <__libc_init_array+0x24>
 800ba04:	4d0b      	ldr	r5, [pc, #44]	@ (800ba34 <__libc_init_array+0x40>)
 800ba06:	4c0c      	ldr	r4, [pc, #48]	@ (800ba38 <__libc_init_array+0x44>)
 800ba08:	f000 fe98 	bl	800c73c <_init>
 800ba0c:	1b64      	subs	r4, r4, r5
 800ba0e:	10a4      	asrs	r4, r4, #2
 800ba10:	2600      	movs	r6, #0
 800ba12:	42a6      	cmp	r6, r4
 800ba14:	d105      	bne.n	800ba22 <__libc_init_array+0x2e>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba1c:	4798      	blx	r3
 800ba1e:	3601      	adds	r6, #1
 800ba20:	e7ee      	b.n	800ba00 <__libc_init_array+0xc>
 800ba22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba26:	4798      	blx	r3
 800ba28:	3601      	adds	r6, #1
 800ba2a:	e7f2      	b.n	800ba12 <__libc_init_array+0x1e>
 800ba2c:	0800cd74 	.word	0x0800cd74
 800ba30:	0800cd74 	.word	0x0800cd74
 800ba34:	0800cd74 	.word	0x0800cd74
 800ba38:	0800cd78 	.word	0x0800cd78

0800ba3c <__retarget_lock_init_recursive>:
 800ba3c:	4770      	bx	lr

0800ba3e <__retarget_lock_acquire_recursive>:
 800ba3e:	4770      	bx	lr

0800ba40 <__retarget_lock_release_recursive>:
 800ba40:	4770      	bx	lr

0800ba42 <memcpy>:
 800ba42:	440a      	add	r2, r1
 800ba44:	4291      	cmp	r1, r2
 800ba46:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba4a:	d100      	bne.n	800ba4e <memcpy+0xc>
 800ba4c:	4770      	bx	lr
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba58:	4291      	cmp	r1, r2
 800ba5a:	d1f9      	bne.n	800ba50 <memcpy+0xe>
 800ba5c:	bd10      	pop	{r4, pc}
	...

0800ba60 <__assert_func>:
 800ba60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba62:	4614      	mov	r4, r2
 800ba64:	461a      	mov	r2, r3
 800ba66:	4b09      	ldr	r3, [pc, #36]	@ (800ba8c <__assert_func+0x2c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	68d8      	ldr	r0, [r3, #12]
 800ba6e:	b954      	cbnz	r4, 800ba86 <__assert_func+0x26>
 800ba70:	4b07      	ldr	r3, [pc, #28]	@ (800ba90 <__assert_func+0x30>)
 800ba72:	461c      	mov	r4, r3
 800ba74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba78:	9100      	str	r1, [sp, #0]
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	4905      	ldr	r1, [pc, #20]	@ (800ba94 <__assert_func+0x34>)
 800ba7e:	f000 fd2b 	bl	800c4d8 <fiprintf>
 800ba82:	f000 fdd9 	bl	800c638 <abort>
 800ba86:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <__assert_func+0x38>)
 800ba88:	e7f4      	b.n	800ba74 <__assert_func+0x14>
 800ba8a:	bf00      	nop
 800ba8c:	20000134 	.word	0x20000134
 800ba90:	0800cd37 	.word	0x0800cd37
 800ba94:	0800cd09 	.word	0x0800cd09
 800ba98:	0800ccfc 	.word	0x0800ccfc

0800ba9c <_free_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4605      	mov	r5, r0
 800baa0:	2900      	cmp	r1, #0
 800baa2:	d041      	beq.n	800bb28 <_free_r+0x8c>
 800baa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa8:	1f0c      	subs	r4, r1, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bfb8      	it	lt
 800baae:	18e4      	addlt	r4, r4, r3
 800bab0:	f7ff fb9e 	bl	800b1f0 <__malloc_lock>
 800bab4:	4a1d      	ldr	r2, [pc, #116]	@ (800bb2c <_free_r+0x90>)
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	b933      	cbnz	r3, 800bac8 <_free_r+0x2c>
 800baba:	6063      	str	r3, [r4, #4]
 800babc:	6014      	str	r4, [r2, #0]
 800babe:	4628      	mov	r0, r5
 800bac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bac4:	f7ff bb9a 	b.w	800b1fc <__malloc_unlock>
 800bac8:	42a3      	cmp	r3, r4
 800baca:	d908      	bls.n	800bade <_free_r+0x42>
 800bacc:	6820      	ldr	r0, [r4, #0]
 800bace:	1821      	adds	r1, r4, r0
 800bad0:	428b      	cmp	r3, r1
 800bad2:	bf01      	itttt	eq
 800bad4:	6819      	ldreq	r1, [r3, #0]
 800bad6:	685b      	ldreq	r3, [r3, #4]
 800bad8:	1809      	addeq	r1, r1, r0
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	e7ed      	b.n	800baba <_free_r+0x1e>
 800bade:	461a      	mov	r2, r3
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	b10b      	cbz	r3, 800bae8 <_free_r+0x4c>
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d9fa      	bls.n	800bade <_free_r+0x42>
 800bae8:	6811      	ldr	r1, [r2, #0]
 800baea:	1850      	adds	r0, r2, r1
 800baec:	42a0      	cmp	r0, r4
 800baee:	d10b      	bne.n	800bb08 <_free_r+0x6c>
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	4401      	add	r1, r0
 800baf4:	1850      	adds	r0, r2, r1
 800baf6:	4283      	cmp	r3, r0
 800baf8:	6011      	str	r1, [r2, #0]
 800bafa:	d1e0      	bne.n	800babe <_free_r+0x22>
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	6053      	str	r3, [r2, #4]
 800bb02:	4408      	add	r0, r1
 800bb04:	6010      	str	r0, [r2, #0]
 800bb06:	e7da      	b.n	800babe <_free_r+0x22>
 800bb08:	d902      	bls.n	800bb10 <_free_r+0x74>
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	e7d6      	b.n	800babe <_free_r+0x22>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	1821      	adds	r1, r4, r0
 800bb14:	428b      	cmp	r3, r1
 800bb16:	bf04      	itt	eq
 800bb18:	6819      	ldreq	r1, [r3, #0]
 800bb1a:	685b      	ldreq	r3, [r3, #4]
 800bb1c:	6063      	str	r3, [r4, #4]
 800bb1e:	bf04      	itt	eq
 800bb20:	1809      	addeq	r1, r1, r0
 800bb22:	6021      	streq	r1, [r4, #0]
 800bb24:	6054      	str	r4, [r2, #4]
 800bb26:	e7ca      	b.n	800babe <_free_r+0x22>
 800bb28:	bd38      	pop	{r3, r4, r5, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20001160 	.word	0x20001160

0800bb30 <__ssputs_r>:
 800bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	688e      	ldr	r6, [r1, #8]
 800bb36:	461f      	mov	r7, r3
 800bb38:	42be      	cmp	r6, r7
 800bb3a:	680b      	ldr	r3, [r1, #0]
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	460c      	mov	r4, r1
 800bb40:	4690      	mov	r8, r2
 800bb42:	d82d      	bhi.n	800bba0 <__ssputs_r+0x70>
 800bb44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb4c:	d026      	beq.n	800bb9c <__ssputs_r+0x6c>
 800bb4e:	6965      	ldr	r5, [r4, #20]
 800bb50:	6909      	ldr	r1, [r1, #16]
 800bb52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb56:	eba3 0901 	sub.w	r9, r3, r1
 800bb5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb5e:	1c7b      	adds	r3, r7, #1
 800bb60:	444b      	add	r3, r9
 800bb62:	106d      	asrs	r5, r5, #1
 800bb64:	429d      	cmp	r5, r3
 800bb66:	bf38      	it	cc
 800bb68:	461d      	movcc	r5, r3
 800bb6a:	0553      	lsls	r3, r2, #21
 800bb6c:	d527      	bpl.n	800bbbe <__ssputs_r+0x8e>
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7ff fabe 	bl	800b0f0 <_malloc_r>
 800bb74:	4606      	mov	r6, r0
 800bb76:	b360      	cbz	r0, 800bbd2 <__ssputs_r+0xa2>
 800bb78:	6921      	ldr	r1, [r4, #16]
 800bb7a:	464a      	mov	r2, r9
 800bb7c:	f7ff ff61 	bl	800ba42 <memcpy>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	6126      	str	r6, [r4, #16]
 800bb8e:	6165      	str	r5, [r4, #20]
 800bb90:	444e      	add	r6, r9
 800bb92:	eba5 0509 	sub.w	r5, r5, r9
 800bb96:	6026      	str	r6, [r4, #0]
 800bb98:	60a5      	str	r5, [r4, #8]
 800bb9a:	463e      	mov	r6, r7
 800bb9c:	42be      	cmp	r6, r7
 800bb9e:	d900      	bls.n	800bba2 <__ssputs_r+0x72>
 800bba0:	463e      	mov	r6, r7
 800bba2:	6820      	ldr	r0, [r4, #0]
 800bba4:	4632      	mov	r2, r6
 800bba6:	4641      	mov	r1, r8
 800bba8:	f000 fd0a 	bl	800c5c0 <memmove>
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	1b9b      	subs	r3, r3, r6
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	4433      	add	r3, r6
 800bbb6:	6023      	str	r3, [r4, #0]
 800bbb8:	2000      	movs	r0, #0
 800bbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbbe:	462a      	mov	r2, r5
 800bbc0:	f000 fd41 	bl	800c646 <_realloc_r>
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d1e0      	bne.n	800bb8c <__ssputs_r+0x5c>
 800bbca:	6921      	ldr	r1, [r4, #16]
 800bbcc:	4650      	mov	r0, sl
 800bbce:	f7ff ff65 	bl	800ba9c <_free_r>
 800bbd2:	230c      	movs	r3, #12
 800bbd4:	f8ca 3000 	str.w	r3, [sl]
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbde:	81a3      	strh	r3, [r4, #12]
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe4:	e7e9      	b.n	800bbba <__ssputs_r+0x8a>
	...

0800bbe8 <_svfiprintf_r>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	4698      	mov	r8, r3
 800bbee:	898b      	ldrh	r3, [r1, #12]
 800bbf0:	061b      	lsls	r3, r3, #24
 800bbf2:	b09d      	sub	sp, #116	@ 0x74
 800bbf4:	4607      	mov	r7, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	4614      	mov	r4, r2
 800bbfa:	d510      	bpl.n	800bc1e <_svfiprintf_r+0x36>
 800bbfc:	690b      	ldr	r3, [r1, #16]
 800bbfe:	b973      	cbnz	r3, 800bc1e <_svfiprintf_r+0x36>
 800bc00:	2140      	movs	r1, #64	@ 0x40
 800bc02:	f7ff fa75 	bl	800b0f0 <_malloc_r>
 800bc06:	6028      	str	r0, [r5, #0]
 800bc08:	6128      	str	r0, [r5, #16]
 800bc0a:	b930      	cbnz	r0, 800bc1a <_svfiprintf_r+0x32>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	b01d      	add	sp, #116	@ 0x74
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	2340      	movs	r3, #64	@ 0x40
 800bc1c:	616b      	str	r3, [r5, #20]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc22:	2320      	movs	r3, #32
 800bc24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc28:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc2c:	2330      	movs	r3, #48	@ 0x30
 800bc2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bdcc <_svfiprintf_r+0x1e4>
 800bc32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc36:	f04f 0901 	mov.w	r9, #1
 800bc3a:	4623      	mov	r3, r4
 800bc3c:	469a      	mov	sl, r3
 800bc3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc42:	b10a      	cbz	r2, 800bc48 <_svfiprintf_r+0x60>
 800bc44:	2a25      	cmp	r2, #37	@ 0x25
 800bc46:	d1f9      	bne.n	800bc3c <_svfiprintf_r+0x54>
 800bc48:	ebba 0b04 	subs.w	fp, sl, r4
 800bc4c:	d00b      	beq.n	800bc66 <_svfiprintf_r+0x7e>
 800bc4e:	465b      	mov	r3, fp
 800bc50:	4622      	mov	r2, r4
 800bc52:	4629      	mov	r1, r5
 800bc54:	4638      	mov	r0, r7
 800bc56:	f7ff ff6b 	bl	800bb30 <__ssputs_r>
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	f000 80a7 	beq.w	800bdae <_svfiprintf_r+0x1c6>
 800bc60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc62:	445a      	add	r2, fp
 800bc64:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc66:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f000 809f 	beq.w	800bdae <_svfiprintf_r+0x1c6>
 800bc70:	2300      	movs	r3, #0
 800bc72:	f04f 32ff 	mov.w	r2, #4294967295
 800bc76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc7a:	f10a 0a01 	add.w	sl, sl, #1
 800bc7e:	9304      	str	r3, [sp, #16]
 800bc80:	9307      	str	r3, [sp, #28]
 800bc82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc86:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc88:	4654      	mov	r4, sl
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc90:	484e      	ldr	r0, [pc, #312]	@ (800bdcc <_svfiprintf_r+0x1e4>)
 800bc92:	f7f4 fabd 	bl	8000210 <memchr>
 800bc96:	9a04      	ldr	r2, [sp, #16]
 800bc98:	b9d8      	cbnz	r0, 800bcd2 <_svfiprintf_r+0xea>
 800bc9a:	06d0      	lsls	r0, r2, #27
 800bc9c:	bf44      	itt	mi
 800bc9e:	2320      	movmi	r3, #32
 800bca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bca4:	0711      	lsls	r1, r2, #28
 800bca6:	bf44      	itt	mi
 800bca8:	232b      	movmi	r3, #43	@ 0x2b
 800bcaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcae:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb4:	d015      	beq.n	800bce2 <_svfiprintf_r+0xfa>
 800bcb6:	9a07      	ldr	r2, [sp, #28]
 800bcb8:	4654      	mov	r4, sl
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f04f 0c0a 	mov.w	ip, #10
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc6:	3b30      	subs	r3, #48	@ 0x30
 800bcc8:	2b09      	cmp	r3, #9
 800bcca:	d94b      	bls.n	800bd64 <_svfiprintf_r+0x17c>
 800bccc:	b1b0      	cbz	r0, 800bcfc <_svfiprintf_r+0x114>
 800bcce:	9207      	str	r2, [sp, #28]
 800bcd0:	e014      	b.n	800bcfc <_svfiprintf_r+0x114>
 800bcd2:	eba0 0308 	sub.w	r3, r0, r8
 800bcd6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	46a2      	mov	sl, r4
 800bce0:	e7d2      	b.n	800bc88 <_svfiprintf_r+0xa0>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	1d19      	adds	r1, r3, #4
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	9103      	str	r1, [sp, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	bfbb      	ittet	lt
 800bcee:	425b      	neglt	r3, r3
 800bcf0:	f042 0202 	orrlt.w	r2, r2, #2
 800bcf4:	9307      	strge	r3, [sp, #28]
 800bcf6:	9307      	strlt	r3, [sp, #28]
 800bcf8:	bfb8      	it	lt
 800bcfa:	9204      	strlt	r2, [sp, #16]
 800bcfc:	7823      	ldrb	r3, [r4, #0]
 800bcfe:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd00:	d10a      	bne.n	800bd18 <_svfiprintf_r+0x130>
 800bd02:	7863      	ldrb	r3, [r4, #1]
 800bd04:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd06:	d132      	bne.n	800bd6e <_svfiprintf_r+0x186>
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	1d1a      	adds	r2, r3, #4
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	9203      	str	r2, [sp, #12]
 800bd10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd14:	3402      	adds	r4, #2
 800bd16:	9305      	str	r3, [sp, #20]
 800bd18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bddc <_svfiprintf_r+0x1f4>
 800bd1c:	7821      	ldrb	r1, [r4, #0]
 800bd1e:	2203      	movs	r2, #3
 800bd20:	4650      	mov	r0, sl
 800bd22:	f7f4 fa75 	bl	8000210 <memchr>
 800bd26:	b138      	cbz	r0, 800bd38 <_svfiprintf_r+0x150>
 800bd28:	9b04      	ldr	r3, [sp, #16]
 800bd2a:	eba0 000a 	sub.w	r0, r0, sl
 800bd2e:	2240      	movs	r2, #64	@ 0x40
 800bd30:	4082      	lsls	r2, r0
 800bd32:	4313      	orrs	r3, r2
 800bd34:	3401      	adds	r4, #1
 800bd36:	9304      	str	r3, [sp, #16]
 800bd38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd3c:	4824      	ldr	r0, [pc, #144]	@ (800bdd0 <_svfiprintf_r+0x1e8>)
 800bd3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd42:	2206      	movs	r2, #6
 800bd44:	f7f4 fa64 	bl	8000210 <memchr>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d036      	beq.n	800bdba <_svfiprintf_r+0x1d2>
 800bd4c:	4b21      	ldr	r3, [pc, #132]	@ (800bdd4 <_svfiprintf_r+0x1ec>)
 800bd4e:	bb1b      	cbnz	r3, 800bd98 <_svfiprintf_r+0x1b0>
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	3307      	adds	r3, #7
 800bd54:	f023 0307 	bic.w	r3, r3, #7
 800bd58:	3308      	adds	r3, #8
 800bd5a:	9303      	str	r3, [sp, #12]
 800bd5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5e:	4433      	add	r3, r6
 800bd60:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd62:	e76a      	b.n	800bc3a <_svfiprintf_r+0x52>
 800bd64:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd68:	460c      	mov	r4, r1
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	e7a8      	b.n	800bcc0 <_svfiprintf_r+0xd8>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	3401      	adds	r4, #1
 800bd72:	9305      	str	r3, [sp, #20]
 800bd74:	4619      	mov	r1, r3
 800bd76:	f04f 0c0a 	mov.w	ip, #10
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd80:	3a30      	subs	r2, #48	@ 0x30
 800bd82:	2a09      	cmp	r2, #9
 800bd84:	d903      	bls.n	800bd8e <_svfiprintf_r+0x1a6>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0c6      	beq.n	800bd18 <_svfiprintf_r+0x130>
 800bd8a:	9105      	str	r1, [sp, #20]
 800bd8c:	e7c4      	b.n	800bd18 <_svfiprintf_r+0x130>
 800bd8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd92:	4604      	mov	r4, r0
 800bd94:	2301      	movs	r3, #1
 800bd96:	e7f0      	b.n	800bd7a <_svfiprintf_r+0x192>
 800bd98:	ab03      	add	r3, sp, #12
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd8 <_svfiprintf_r+0x1f0>)
 800bda0:	a904      	add	r1, sp, #16
 800bda2:	4638      	mov	r0, r7
 800bda4:	f3af 8000 	nop.w
 800bda8:	1c42      	adds	r2, r0, #1
 800bdaa:	4606      	mov	r6, r0
 800bdac:	d1d6      	bne.n	800bd5c <_svfiprintf_r+0x174>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	065b      	lsls	r3, r3, #25
 800bdb2:	f53f af2d 	bmi.w	800bc10 <_svfiprintf_r+0x28>
 800bdb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdb8:	e72c      	b.n	800bc14 <_svfiprintf_r+0x2c>
 800bdba:	ab03      	add	r3, sp, #12
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	462a      	mov	r2, r5
 800bdc0:	4b05      	ldr	r3, [pc, #20]	@ (800bdd8 <_svfiprintf_r+0x1f0>)
 800bdc2:	a904      	add	r1, sp, #16
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f000 f9bb 	bl	800c140 <_printf_i>
 800bdca:	e7ed      	b.n	800bda8 <_svfiprintf_r+0x1c0>
 800bdcc:	0800cd38 	.word	0x0800cd38
 800bdd0:	0800cd42 	.word	0x0800cd42
 800bdd4:	00000000 	.word	0x00000000
 800bdd8:	0800bb31 	.word	0x0800bb31
 800bddc:	0800cd3e 	.word	0x0800cd3e

0800bde0 <__sfputc_r>:
 800bde0:	6893      	ldr	r3, [r2, #8]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	b410      	push	{r4}
 800bde8:	6093      	str	r3, [r2, #8]
 800bdea:	da08      	bge.n	800bdfe <__sfputc_r+0x1e>
 800bdec:	6994      	ldr	r4, [r2, #24]
 800bdee:	42a3      	cmp	r3, r4
 800bdf0:	db01      	blt.n	800bdf6 <__sfputc_r+0x16>
 800bdf2:	290a      	cmp	r1, #10
 800bdf4:	d103      	bne.n	800bdfe <__sfputc_r+0x1e>
 800bdf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdfa:	f7ff bc6b 	b.w	800b6d4 <__swbuf_r>
 800bdfe:	6813      	ldr	r3, [r2, #0]
 800be00:	1c58      	adds	r0, r3, #1
 800be02:	6010      	str	r0, [r2, #0]
 800be04:	7019      	strb	r1, [r3, #0]
 800be06:	4608      	mov	r0, r1
 800be08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <__sfputs_r>:
 800be0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be10:	4606      	mov	r6, r0
 800be12:	460f      	mov	r7, r1
 800be14:	4614      	mov	r4, r2
 800be16:	18d5      	adds	r5, r2, r3
 800be18:	42ac      	cmp	r4, r5
 800be1a:	d101      	bne.n	800be20 <__sfputs_r+0x12>
 800be1c:	2000      	movs	r0, #0
 800be1e:	e007      	b.n	800be30 <__sfputs_r+0x22>
 800be20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be24:	463a      	mov	r2, r7
 800be26:	4630      	mov	r0, r6
 800be28:	f7ff ffda 	bl	800bde0 <__sfputc_r>
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	d1f3      	bne.n	800be18 <__sfputs_r+0xa>
 800be30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be34 <_vfiprintf_r>:
 800be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	460d      	mov	r5, r1
 800be3a:	b09d      	sub	sp, #116	@ 0x74
 800be3c:	4614      	mov	r4, r2
 800be3e:	4698      	mov	r8, r3
 800be40:	4606      	mov	r6, r0
 800be42:	b118      	cbz	r0, 800be4c <_vfiprintf_r+0x18>
 800be44:	6a03      	ldr	r3, [r0, #32]
 800be46:	b90b      	cbnz	r3, 800be4c <_vfiprintf_r+0x18>
 800be48:	f7ff faee 	bl	800b428 <__sinit>
 800be4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be4e:	07d9      	lsls	r1, r3, #31
 800be50:	d405      	bmi.n	800be5e <_vfiprintf_r+0x2a>
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	059a      	lsls	r2, r3, #22
 800be56:	d402      	bmi.n	800be5e <_vfiprintf_r+0x2a>
 800be58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be5a:	f7ff fdf0 	bl	800ba3e <__retarget_lock_acquire_recursive>
 800be5e:	89ab      	ldrh	r3, [r5, #12]
 800be60:	071b      	lsls	r3, r3, #28
 800be62:	d501      	bpl.n	800be68 <_vfiprintf_r+0x34>
 800be64:	692b      	ldr	r3, [r5, #16]
 800be66:	b99b      	cbnz	r3, 800be90 <_vfiprintf_r+0x5c>
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff fc70 	bl	800b750 <__swsetup_r>
 800be70:	b170      	cbz	r0, 800be90 <_vfiprintf_r+0x5c>
 800be72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be74:	07dc      	lsls	r4, r3, #31
 800be76:	d504      	bpl.n	800be82 <_vfiprintf_r+0x4e>
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	b01d      	add	sp, #116	@ 0x74
 800be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	0598      	lsls	r0, r3, #22
 800be86:	d4f7      	bmi.n	800be78 <_vfiprintf_r+0x44>
 800be88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be8a:	f7ff fdd9 	bl	800ba40 <__retarget_lock_release_recursive>
 800be8e:	e7f3      	b.n	800be78 <_vfiprintf_r+0x44>
 800be90:	2300      	movs	r3, #0
 800be92:	9309      	str	r3, [sp, #36]	@ 0x24
 800be94:	2320      	movs	r3, #32
 800be96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be9e:	2330      	movs	r3, #48	@ 0x30
 800bea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c050 <_vfiprintf_r+0x21c>
 800bea4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bea8:	f04f 0901 	mov.w	r9, #1
 800beac:	4623      	mov	r3, r4
 800beae:	469a      	mov	sl, r3
 800beb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb4:	b10a      	cbz	r2, 800beba <_vfiprintf_r+0x86>
 800beb6:	2a25      	cmp	r2, #37	@ 0x25
 800beb8:	d1f9      	bne.n	800beae <_vfiprintf_r+0x7a>
 800beba:	ebba 0b04 	subs.w	fp, sl, r4
 800bebe:	d00b      	beq.n	800bed8 <_vfiprintf_r+0xa4>
 800bec0:	465b      	mov	r3, fp
 800bec2:	4622      	mov	r2, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	4630      	mov	r0, r6
 800bec8:	f7ff ffa1 	bl	800be0e <__sfputs_r>
 800becc:	3001      	adds	r0, #1
 800bece:	f000 80a7 	beq.w	800c020 <_vfiprintf_r+0x1ec>
 800bed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed4:	445a      	add	r2, fp
 800bed6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bed8:	f89a 3000 	ldrb.w	r3, [sl]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 809f 	beq.w	800c020 <_vfiprintf_r+0x1ec>
 800bee2:	2300      	movs	r3, #0
 800bee4:	f04f 32ff 	mov.w	r2, #4294967295
 800bee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beec:	f10a 0a01 	add.w	sl, sl, #1
 800bef0:	9304      	str	r3, [sp, #16]
 800bef2:	9307      	str	r3, [sp, #28]
 800bef4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bef8:	931a      	str	r3, [sp, #104]	@ 0x68
 800befa:	4654      	mov	r4, sl
 800befc:	2205      	movs	r2, #5
 800befe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf02:	4853      	ldr	r0, [pc, #332]	@ (800c050 <_vfiprintf_r+0x21c>)
 800bf04:	f7f4 f984 	bl	8000210 <memchr>
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	b9d8      	cbnz	r0, 800bf44 <_vfiprintf_r+0x110>
 800bf0c:	06d1      	lsls	r1, r2, #27
 800bf0e:	bf44      	itt	mi
 800bf10:	2320      	movmi	r3, #32
 800bf12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf16:	0713      	lsls	r3, r2, #28
 800bf18:	bf44      	itt	mi
 800bf1a:	232b      	movmi	r3, #43	@ 0x2b
 800bf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf20:	f89a 3000 	ldrb.w	r3, [sl]
 800bf24:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf26:	d015      	beq.n	800bf54 <_vfiprintf_r+0x120>
 800bf28:	9a07      	ldr	r2, [sp, #28]
 800bf2a:	4654      	mov	r4, sl
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	f04f 0c0a 	mov.w	ip, #10
 800bf32:	4621      	mov	r1, r4
 800bf34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf38:	3b30      	subs	r3, #48	@ 0x30
 800bf3a:	2b09      	cmp	r3, #9
 800bf3c:	d94b      	bls.n	800bfd6 <_vfiprintf_r+0x1a2>
 800bf3e:	b1b0      	cbz	r0, 800bf6e <_vfiprintf_r+0x13a>
 800bf40:	9207      	str	r2, [sp, #28]
 800bf42:	e014      	b.n	800bf6e <_vfiprintf_r+0x13a>
 800bf44:	eba0 0308 	sub.w	r3, r0, r8
 800bf48:	fa09 f303 	lsl.w	r3, r9, r3
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	9304      	str	r3, [sp, #16]
 800bf50:	46a2      	mov	sl, r4
 800bf52:	e7d2      	b.n	800befa <_vfiprintf_r+0xc6>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	1d19      	adds	r1, r3, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	9103      	str	r1, [sp, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bfbb      	ittet	lt
 800bf60:	425b      	neglt	r3, r3
 800bf62:	f042 0202 	orrlt.w	r2, r2, #2
 800bf66:	9307      	strge	r3, [sp, #28]
 800bf68:	9307      	strlt	r3, [sp, #28]
 800bf6a:	bfb8      	it	lt
 800bf6c:	9204      	strlt	r2, [sp, #16]
 800bf6e:	7823      	ldrb	r3, [r4, #0]
 800bf70:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf72:	d10a      	bne.n	800bf8a <_vfiprintf_r+0x156>
 800bf74:	7863      	ldrb	r3, [r4, #1]
 800bf76:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf78:	d132      	bne.n	800bfe0 <_vfiprintf_r+0x1ac>
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	1d1a      	adds	r2, r3, #4
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	9203      	str	r2, [sp, #12]
 800bf82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf86:	3402      	adds	r4, #2
 800bf88:	9305      	str	r3, [sp, #20]
 800bf8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c060 <_vfiprintf_r+0x22c>
 800bf8e:	7821      	ldrb	r1, [r4, #0]
 800bf90:	2203      	movs	r2, #3
 800bf92:	4650      	mov	r0, sl
 800bf94:	f7f4 f93c 	bl	8000210 <memchr>
 800bf98:	b138      	cbz	r0, 800bfaa <_vfiprintf_r+0x176>
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	eba0 000a 	sub.w	r0, r0, sl
 800bfa0:	2240      	movs	r2, #64	@ 0x40
 800bfa2:	4082      	lsls	r2, r0
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	3401      	adds	r4, #1
 800bfa8:	9304      	str	r3, [sp, #16]
 800bfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfae:	4829      	ldr	r0, [pc, #164]	@ (800c054 <_vfiprintf_r+0x220>)
 800bfb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfb4:	2206      	movs	r2, #6
 800bfb6:	f7f4 f92b 	bl	8000210 <memchr>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d03f      	beq.n	800c03e <_vfiprintf_r+0x20a>
 800bfbe:	4b26      	ldr	r3, [pc, #152]	@ (800c058 <_vfiprintf_r+0x224>)
 800bfc0:	bb1b      	cbnz	r3, 800c00a <_vfiprintf_r+0x1d6>
 800bfc2:	9b03      	ldr	r3, [sp, #12]
 800bfc4:	3307      	adds	r3, #7
 800bfc6:	f023 0307 	bic.w	r3, r3, #7
 800bfca:	3308      	adds	r3, #8
 800bfcc:	9303      	str	r3, [sp, #12]
 800bfce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd0:	443b      	add	r3, r7
 800bfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfd4:	e76a      	b.n	800beac <_vfiprintf_r+0x78>
 800bfd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfda:	460c      	mov	r4, r1
 800bfdc:	2001      	movs	r0, #1
 800bfde:	e7a8      	b.n	800bf32 <_vfiprintf_r+0xfe>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	3401      	adds	r4, #1
 800bfe4:	9305      	str	r3, [sp, #20]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	f04f 0c0a 	mov.w	ip, #10
 800bfec:	4620      	mov	r0, r4
 800bfee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bff2:	3a30      	subs	r2, #48	@ 0x30
 800bff4:	2a09      	cmp	r2, #9
 800bff6:	d903      	bls.n	800c000 <_vfiprintf_r+0x1cc>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d0c6      	beq.n	800bf8a <_vfiprintf_r+0x156>
 800bffc:	9105      	str	r1, [sp, #20]
 800bffe:	e7c4      	b.n	800bf8a <_vfiprintf_r+0x156>
 800c000:	fb0c 2101 	mla	r1, ip, r1, r2
 800c004:	4604      	mov	r4, r0
 800c006:	2301      	movs	r3, #1
 800c008:	e7f0      	b.n	800bfec <_vfiprintf_r+0x1b8>
 800c00a:	ab03      	add	r3, sp, #12
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	462a      	mov	r2, r5
 800c010:	4b12      	ldr	r3, [pc, #72]	@ (800c05c <_vfiprintf_r+0x228>)
 800c012:	a904      	add	r1, sp, #16
 800c014:	4630      	mov	r0, r6
 800c016:	f3af 8000 	nop.w
 800c01a:	4607      	mov	r7, r0
 800c01c:	1c78      	adds	r0, r7, #1
 800c01e:	d1d6      	bne.n	800bfce <_vfiprintf_r+0x19a>
 800c020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c022:	07d9      	lsls	r1, r3, #31
 800c024:	d405      	bmi.n	800c032 <_vfiprintf_r+0x1fe>
 800c026:	89ab      	ldrh	r3, [r5, #12]
 800c028:	059a      	lsls	r2, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_vfiprintf_r+0x1fe>
 800c02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c02e:	f7ff fd07 	bl	800ba40 <__retarget_lock_release_recursive>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	065b      	lsls	r3, r3, #25
 800c036:	f53f af1f 	bmi.w	800be78 <_vfiprintf_r+0x44>
 800c03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c03c:	e71e      	b.n	800be7c <_vfiprintf_r+0x48>
 800c03e:	ab03      	add	r3, sp, #12
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	462a      	mov	r2, r5
 800c044:	4b05      	ldr	r3, [pc, #20]	@ (800c05c <_vfiprintf_r+0x228>)
 800c046:	a904      	add	r1, sp, #16
 800c048:	4630      	mov	r0, r6
 800c04a:	f000 f879 	bl	800c140 <_printf_i>
 800c04e:	e7e4      	b.n	800c01a <_vfiprintf_r+0x1e6>
 800c050:	0800cd38 	.word	0x0800cd38
 800c054:	0800cd42 	.word	0x0800cd42
 800c058:	00000000 	.word	0x00000000
 800c05c:	0800be0f 	.word	0x0800be0f
 800c060:	0800cd3e 	.word	0x0800cd3e

0800c064 <_printf_common>:
 800c064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c068:	4616      	mov	r6, r2
 800c06a:	4698      	mov	r8, r3
 800c06c:	688a      	ldr	r2, [r1, #8]
 800c06e:	690b      	ldr	r3, [r1, #16]
 800c070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c074:	4293      	cmp	r3, r2
 800c076:	bfb8      	it	lt
 800c078:	4613      	movlt	r3, r2
 800c07a:	6033      	str	r3, [r6, #0]
 800c07c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c080:	4607      	mov	r7, r0
 800c082:	460c      	mov	r4, r1
 800c084:	b10a      	cbz	r2, 800c08a <_printf_common+0x26>
 800c086:	3301      	adds	r3, #1
 800c088:	6033      	str	r3, [r6, #0]
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	0699      	lsls	r1, r3, #26
 800c08e:	bf42      	ittt	mi
 800c090:	6833      	ldrmi	r3, [r6, #0]
 800c092:	3302      	addmi	r3, #2
 800c094:	6033      	strmi	r3, [r6, #0]
 800c096:	6825      	ldr	r5, [r4, #0]
 800c098:	f015 0506 	ands.w	r5, r5, #6
 800c09c:	d106      	bne.n	800c0ac <_printf_common+0x48>
 800c09e:	f104 0a19 	add.w	sl, r4, #25
 800c0a2:	68e3      	ldr	r3, [r4, #12]
 800c0a4:	6832      	ldr	r2, [r6, #0]
 800c0a6:	1a9b      	subs	r3, r3, r2
 800c0a8:	42ab      	cmp	r3, r5
 800c0aa:	dc26      	bgt.n	800c0fa <_printf_common+0x96>
 800c0ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0b0:	6822      	ldr	r2, [r4, #0]
 800c0b2:	3b00      	subs	r3, #0
 800c0b4:	bf18      	it	ne
 800c0b6:	2301      	movne	r3, #1
 800c0b8:	0692      	lsls	r2, r2, #26
 800c0ba:	d42b      	bmi.n	800c114 <_printf_common+0xb0>
 800c0bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	47c8      	blx	r9
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	d01e      	beq.n	800c108 <_printf_common+0xa4>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	6922      	ldr	r2, [r4, #16]
 800c0ce:	f003 0306 	and.w	r3, r3, #6
 800c0d2:	2b04      	cmp	r3, #4
 800c0d4:	bf02      	ittt	eq
 800c0d6:	68e5      	ldreq	r5, [r4, #12]
 800c0d8:	6833      	ldreq	r3, [r6, #0]
 800c0da:	1aed      	subeq	r5, r5, r3
 800c0dc:	68a3      	ldr	r3, [r4, #8]
 800c0de:	bf0c      	ite	eq
 800c0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0e4:	2500      	movne	r5, #0
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	bfc4      	itt	gt
 800c0ea:	1a9b      	subgt	r3, r3, r2
 800c0ec:	18ed      	addgt	r5, r5, r3
 800c0ee:	2600      	movs	r6, #0
 800c0f0:	341a      	adds	r4, #26
 800c0f2:	42b5      	cmp	r5, r6
 800c0f4:	d11a      	bne.n	800c12c <_printf_common+0xc8>
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	e008      	b.n	800c10c <_printf_common+0xa8>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	4652      	mov	r2, sl
 800c0fe:	4641      	mov	r1, r8
 800c100:	4638      	mov	r0, r7
 800c102:	47c8      	blx	r9
 800c104:	3001      	adds	r0, #1
 800c106:	d103      	bne.n	800c110 <_printf_common+0xac>
 800c108:	f04f 30ff 	mov.w	r0, #4294967295
 800c10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c110:	3501      	adds	r5, #1
 800c112:	e7c6      	b.n	800c0a2 <_printf_common+0x3e>
 800c114:	18e1      	adds	r1, r4, r3
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	2030      	movs	r0, #48	@ 0x30
 800c11a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c11e:	4422      	add	r2, r4
 800c120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c128:	3302      	adds	r3, #2
 800c12a:	e7c7      	b.n	800c0bc <_printf_common+0x58>
 800c12c:	2301      	movs	r3, #1
 800c12e:	4622      	mov	r2, r4
 800c130:	4641      	mov	r1, r8
 800c132:	4638      	mov	r0, r7
 800c134:	47c8      	blx	r9
 800c136:	3001      	adds	r0, #1
 800c138:	d0e6      	beq.n	800c108 <_printf_common+0xa4>
 800c13a:	3601      	adds	r6, #1
 800c13c:	e7d9      	b.n	800c0f2 <_printf_common+0x8e>
	...

0800c140 <_printf_i>:
 800c140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c144:	7e0f      	ldrb	r7, [r1, #24]
 800c146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c148:	2f78      	cmp	r7, #120	@ 0x78
 800c14a:	4691      	mov	r9, r2
 800c14c:	4680      	mov	r8, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	469a      	mov	sl, r3
 800c152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c156:	d807      	bhi.n	800c168 <_printf_i+0x28>
 800c158:	2f62      	cmp	r7, #98	@ 0x62
 800c15a:	d80a      	bhi.n	800c172 <_printf_i+0x32>
 800c15c:	2f00      	cmp	r7, #0
 800c15e:	f000 80d2 	beq.w	800c306 <_printf_i+0x1c6>
 800c162:	2f58      	cmp	r7, #88	@ 0x58
 800c164:	f000 80b9 	beq.w	800c2da <_printf_i+0x19a>
 800c168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c16c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c170:	e03a      	b.n	800c1e8 <_printf_i+0xa8>
 800c172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c176:	2b15      	cmp	r3, #21
 800c178:	d8f6      	bhi.n	800c168 <_printf_i+0x28>
 800c17a:	a101      	add	r1, pc, #4	@ (adr r1, 800c180 <_printf_i+0x40>)
 800c17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c180:	0800c1d9 	.word	0x0800c1d9
 800c184:	0800c1ed 	.word	0x0800c1ed
 800c188:	0800c169 	.word	0x0800c169
 800c18c:	0800c169 	.word	0x0800c169
 800c190:	0800c169 	.word	0x0800c169
 800c194:	0800c169 	.word	0x0800c169
 800c198:	0800c1ed 	.word	0x0800c1ed
 800c19c:	0800c169 	.word	0x0800c169
 800c1a0:	0800c169 	.word	0x0800c169
 800c1a4:	0800c169 	.word	0x0800c169
 800c1a8:	0800c169 	.word	0x0800c169
 800c1ac:	0800c2ed 	.word	0x0800c2ed
 800c1b0:	0800c217 	.word	0x0800c217
 800c1b4:	0800c2a7 	.word	0x0800c2a7
 800c1b8:	0800c169 	.word	0x0800c169
 800c1bc:	0800c169 	.word	0x0800c169
 800c1c0:	0800c30f 	.word	0x0800c30f
 800c1c4:	0800c169 	.word	0x0800c169
 800c1c8:	0800c217 	.word	0x0800c217
 800c1cc:	0800c169 	.word	0x0800c169
 800c1d0:	0800c169 	.word	0x0800c169
 800c1d4:	0800c2af 	.word	0x0800c2af
 800c1d8:	6833      	ldr	r3, [r6, #0]
 800c1da:	1d1a      	adds	r2, r3, #4
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6032      	str	r2, [r6, #0]
 800c1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e09d      	b.n	800c328 <_printf_i+0x1e8>
 800c1ec:	6833      	ldr	r3, [r6, #0]
 800c1ee:	6820      	ldr	r0, [r4, #0]
 800c1f0:	1d19      	adds	r1, r3, #4
 800c1f2:	6031      	str	r1, [r6, #0]
 800c1f4:	0606      	lsls	r6, r0, #24
 800c1f6:	d501      	bpl.n	800c1fc <_printf_i+0xbc>
 800c1f8:	681d      	ldr	r5, [r3, #0]
 800c1fa:	e003      	b.n	800c204 <_printf_i+0xc4>
 800c1fc:	0645      	lsls	r5, r0, #25
 800c1fe:	d5fb      	bpl.n	800c1f8 <_printf_i+0xb8>
 800c200:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c204:	2d00      	cmp	r5, #0
 800c206:	da03      	bge.n	800c210 <_printf_i+0xd0>
 800c208:	232d      	movs	r3, #45	@ 0x2d
 800c20a:	426d      	negs	r5, r5
 800c20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c210:	4859      	ldr	r0, [pc, #356]	@ (800c378 <_printf_i+0x238>)
 800c212:	230a      	movs	r3, #10
 800c214:	e011      	b.n	800c23a <_printf_i+0xfa>
 800c216:	6821      	ldr	r1, [r4, #0]
 800c218:	6833      	ldr	r3, [r6, #0]
 800c21a:	0608      	lsls	r0, r1, #24
 800c21c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c220:	d402      	bmi.n	800c228 <_printf_i+0xe8>
 800c222:	0649      	lsls	r1, r1, #25
 800c224:	bf48      	it	mi
 800c226:	b2ad      	uxthmi	r5, r5
 800c228:	2f6f      	cmp	r7, #111	@ 0x6f
 800c22a:	4853      	ldr	r0, [pc, #332]	@ (800c378 <_printf_i+0x238>)
 800c22c:	6033      	str	r3, [r6, #0]
 800c22e:	bf14      	ite	ne
 800c230:	230a      	movne	r3, #10
 800c232:	2308      	moveq	r3, #8
 800c234:	2100      	movs	r1, #0
 800c236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c23a:	6866      	ldr	r6, [r4, #4]
 800c23c:	60a6      	str	r6, [r4, #8]
 800c23e:	2e00      	cmp	r6, #0
 800c240:	bfa2      	ittt	ge
 800c242:	6821      	ldrge	r1, [r4, #0]
 800c244:	f021 0104 	bicge.w	r1, r1, #4
 800c248:	6021      	strge	r1, [r4, #0]
 800c24a:	b90d      	cbnz	r5, 800c250 <_printf_i+0x110>
 800c24c:	2e00      	cmp	r6, #0
 800c24e:	d04b      	beq.n	800c2e8 <_printf_i+0x1a8>
 800c250:	4616      	mov	r6, r2
 800c252:	fbb5 f1f3 	udiv	r1, r5, r3
 800c256:	fb03 5711 	mls	r7, r3, r1, r5
 800c25a:	5dc7      	ldrb	r7, [r0, r7]
 800c25c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c260:	462f      	mov	r7, r5
 800c262:	42bb      	cmp	r3, r7
 800c264:	460d      	mov	r5, r1
 800c266:	d9f4      	bls.n	800c252 <_printf_i+0x112>
 800c268:	2b08      	cmp	r3, #8
 800c26a:	d10b      	bne.n	800c284 <_printf_i+0x144>
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	07df      	lsls	r7, r3, #31
 800c270:	d508      	bpl.n	800c284 <_printf_i+0x144>
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	6861      	ldr	r1, [r4, #4]
 800c276:	4299      	cmp	r1, r3
 800c278:	bfde      	ittt	le
 800c27a:	2330      	movle	r3, #48	@ 0x30
 800c27c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c280:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c284:	1b92      	subs	r2, r2, r6
 800c286:	6122      	str	r2, [r4, #16]
 800c288:	f8cd a000 	str.w	sl, [sp]
 800c28c:	464b      	mov	r3, r9
 800c28e:	aa03      	add	r2, sp, #12
 800c290:	4621      	mov	r1, r4
 800c292:	4640      	mov	r0, r8
 800c294:	f7ff fee6 	bl	800c064 <_printf_common>
 800c298:	3001      	adds	r0, #1
 800c29a:	d14a      	bne.n	800c332 <_printf_i+0x1f2>
 800c29c:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a0:	b004      	add	sp, #16
 800c2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	f043 0320 	orr.w	r3, r3, #32
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	4833      	ldr	r0, [pc, #204]	@ (800c37c <_printf_i+0x23c>)
 800c2b0:	2778      	movs	r7, #120	@ 0x78
 800c2b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	6831      	ldr	r1, [r6, #0]
 800c2ba:	061f      	lsls	r7, r3, #24
 800c2bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2c0:	d402      	bmi.n	800c2c8 <_printf_i+0x188>
 800c2c2:	065f      	lsls	r7, r3, #25
 800c2c4:	bf48      	it	mi
 800c2c6:	b2ad      	uxthmi	r5, r5
 800c2c8:	6031      	str	r1, [r6, #0]
 800c2ca:	07d9      	lsls	r1, r3, #31
 800c2cc:	bf44      	itt	mi
 800c2ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c2d2:	6023      	strmi	r3, [r4, #0]
 800c2d4:	b11d      	cbz	r5, 800c2de <_printf_i+0x19e>
 800c2d6:	2310      	movs	r3, #16
 800c2d8:	e7ac      	b.n	800c234 <_printf_i+0xf4>
 800c2da:	4827      	ldr	r0, [pc, #156]	@ (800c378 <_printf_i+0x238>)
 800c2dc:	e7e9      	b.n	800c2b2 <_printf_i+0x172>
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	f023 0320 	bic.w	r3, r3, #32
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	e7f6      	b.n	800c2d6 <_printf_i+0x196>
 800c2e8:	4616      	mov	r6, r2
 800c2ea:	e7bd      	b.n	800c268 <_printf_i+0x128>
 800c2ec:	6833      	ldr	r3, [r6, #0]
 800c2ee:	6825      	ldr	r5, [r4, #0]
 800c2f0:	6961      	ldr	r1, [r4, #20]
 800c2f2:	1d18      	adds	r0, r3, #4
 800c2f4:	6030      	str	r0, [r6, #0]
 800c2f6:	062e      	lsls	r6, r5, #24
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	d501      	bpl.n	800c300 <_printf_i+0x1c0>
 800c2fc:	6019      	str	r1, [r3, #0]
 800c2fe:	e002      	b.n	800c306 <_printf_i+0x1c6>
 800c300:	0668      	lsls	r0, r5, #25
 800c302:	d5fb      	bpl.n	800c2fc <_printf_i+0x1bc>
 800c304:	8019      	strh	r1, [r3, #0]
 800c306:	2300      	movs	r3, #0
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	4616      	mov	r6, r2
 800c30c:	e7bc      	b.n	800c288 <_printf_i+0x148>
 800c30e:	6833      	ldr	r3, [r6, #0]
 800c310:	1d1a      	adds	r2, r3, #4
 800c312:	6032      	str	r2, [r6, #0]
 800c314:	681e      	ldr	r6, [r3, #0]
 800c316:	6862      	ldr	r2, [r4, #4]
 800c318:	2100      	movs	r1, #0
 800c31a:	4630      	mov	r0, r6
 800c31c:	f7f3 ff78 	bl	8000210 <memchr>
 800c320:	b108      	cbz	r0, 800c326 <_printf_i+0x1e6>
 800c322:	1b80      	subs	r0, r0, r6
 800c324:	6060      	str	r0, [r4, #4]
 800c326:	6863      	ldr	r3, [r4, #4]
 800c328:	6123      	str	r3, [r4, #16]
 800c32a:	2300      	movs	r3, #0
 800c32c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c330:	e7aa      	b.n	800c288 <_printf_i+0x148>
 800c332:	6923      	ldr	r3, [r4, #16]
 800c334:	4632      	mov	r2, r6
 800c336:	4649      	mov	r1, r9
 800c338:	4640      	mov	r0, r8
 800c33a:	47d0      	blx	sl
 800c33c:	3001      	adds	r0, #1
 800c33e:	d0ad      	beq.n	800c29c <_printf_i+0x15c>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	079b      	lsls	r3, r3, #30
 800c344:	d413      	bmi.n	800c36e <_printf_i+0x22e>
 800c346:	68e0      	ldr	r0, [r4, #12]
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	4298      	cmp	r0, r3
 800c34c:	bfb8      	it	lt
 800c34e:	4618      	movlt	r0, r3
 800c350:	e7a6      	b.n	800c2a0 <_printf_i+0x160>
 800c352:	2301      	movs	r3, #1
 800c354:	4632      	mov	r2, r6
 800c356:	4649      	mov	r1, r9
 800c358:	4640      	mov	r0, r8
 800c35a:	47d0      	blx	sl
 800c35c:	3001      	adds	r0, #1
 800c35e:	d09d      	beq.n	800c29c <_printf_i+0x15c>
 800c360:	3501      	adds	r5, #1
 800c362:	68e3      	ldr	r3, [r4, #12]
 800c364:	9903      	ldr	r1, [sp, #12]
 800c366:	1a5b      	subs	r3, r3, r1
 800c368:	42ab      	cmp	r3, r5
 800c36a:	dcf2      	bgt.n	800c352 <_printf_i+0x212>
 800c36c:	e7eb      	b.n	800c346 <_printf_i+0x206>
 800c36e:	2500      	movs	r5, #0
 800c370:	f104 0619 	add.w	r6, r4, #25
 800c374:	e7f5      	b.n	800c362 <_printf_i+0x222>
 800c376:	bf00      	nop
 800c378:	0800cd49 	.word	0x0800cd49
 800c37c:	0800cd5a 	.word	0x0800cd5a

0800c380 <__sflush_r>:
 800c380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c388:	0716      	lsls	r6, r2, #28
 800c38a:	4605      	mov	r5, r0
 800c38c:	460c      	mov	r4, r1
 800c38e:	d454      	bmi.n	800c43a <__sflush_r+0xba>
 800c390:	684b      	ldr	r3, [r1, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	dc02      	bgt.n	800c39c <__sflush_r+0x1c>
 800c396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	dd48      	ble.n	800c42e <__sflush_r+0xae>
 800c39c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d045      	beq.n	800c42e <__sflush_r+0xae>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3a8:	682f      	ldr	r7, [r5, #0]
 800c3aa:	6a21      	ldr	r1, [r4, #32]
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	d030      	beq.n	800c412 <__sflush_r+0x92>
 800c3b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	0759      	lsls	r1, r3, #29
 800c3b6:	d505      	bpl.n	800c3c4 <__sflush_r+0x44>
 800c3b8:	6863      	ldr	r3, [r4, #4]
 800c3ba:	1ad2      	subs	r2, r2, r3
 800c3bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3be:	b10b      	cbz	r3, 800c3c4 <__sflush_r+0x44>
 800c3c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3c2:	1ad2      	subs	r2, r2, r3
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3c8:	6a21      	ldr	r1, [r4, #32]
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	47b0      	blx	r6
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	d106      	bne.n	800c3e2 <__sflush_r+0x62>
 800c3d4:	6829      	ldr	r1, [r5, #0]
 800c3d6:	291d      	cmp	r1, #29
 800c3d8:	d82b      	bhi.n	800c432 <__sflush_r+0xb2>
 800c3da:	4a2a      	ldr	r2, [pc, #168]	@ (800c484 <__sflush_r+0x104>)
 800c3dc:	410a      	asrs	r2, r1
 800c3de:	07d6      	lsls	r6, r2, #31
 800c3e0:	d427      	bmi.n	800c432 <__sflush_r+0xb2>
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	6062      	str	r2, [r4, #4]
 800c3e6:	04d9      	lsls	r1, r3, #19
 800c3e8:	6922      	ldr	r2, [r4, #16]
 800c3ea:	6022      	str	r2, [r4, #0]
 800c3ec:	d504      	bpl.n	800c3f8 <__sflush_r+0x78>
 800c3ee:	1c42      	adds	r2, r0, #1
 800c3f0:	d101      	bne.n	800c3f6 <__sflush_r+0x76>
 800c3f2:	682b      	ldr	r3, [r5, #0]
 800c3f4:	b903      	cbnz	r3, 800c3f8 <__sflush_r+0x78>
 800c3f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3fa:	602f      	str	r7, [r5, #0]
 800c3fc:	b1b9      	cbz	r1, 800c42e <__sflush_r+0xae>
 800c3fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c402:	4299      	cmp	r1, r3
 800c404:	d002      	beq.n	800c40c <__sflush_r+0x8c>
 800c406:	4628      	mov	r0, r5
 800c408:	f7ff fb48 	bl	800ba9c <_free_r>
 800c40c:	2300      	movs	r3, #0
 800c40e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c410:	e00d      	b.n	800c42e <__sflush_r+0xae>
 800c412:	2301      	movs	r3, #1
 800c414:	4628      	mov	r0, r5
 800c416:	47b0      	blx	r6
 800c418:	4602      	mov	r2, r0
 800c41a:	1c50      	adds	r0, r2, #1
 800c41c:	d1c9      	bne.n	800c3b2 <__sflush_r+0x32>
 800c41e:	682b      	ldr	r3, [r5, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0c6      	beq.n	800c3b2 <__sflush_r+0x32>
 800c424:	2b1d      	cmp	r3, #29
 800c426:	d001      	beq.n	800c42c <__sflush_r+0xac>
 800c428:	2b16      	cmp	r3, #22
 800c42a:	d11e      	bne.n	800c46a <__sflush_r+0xea>
 800c42c:	602f      	str	r7, [r5, #0]
 800c42e:	2000      	movs	r0, #0
 800c430:	e022      	b.n	800c478 <__sflush_r+0xf8>
 800c432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c436:	b21b      	sxth	r3, r3
 800c438:	e01b      	b.n	800c472 <__sflush_r+0xf2>
 800c43a:	690f      	ldr	r7, [r1, #16]
 800c43c:	2f00      	cmp	r7, #0
 800c43e:	d0f6      	beq.n	800c42e <__sflush_r+0xae>
 800c440:	0793      	lsls	r3, r2, #30
 800c442:	680e      	ldr	r6, [r1, #0]
 800c444:	bf08      	it	eq
 800c446:	694b      	ldreq	r3, [r1, #20]
 800c448:	600f      	str	r7, [r1, #0]
 800c44a:	bf18      	it	ne
 800c44c:	2300      	movne	r3, #0
 800c44e:	eba6 0807 	sub.w	r8, r6, r7
 800c452:	608b      	str	r3, [r1, #8]
 800c454:	f1b8 0f00 	cmp.w	r8, #0
 800c458:	dde9      	ble.n	800c42e <__sflush_r+0xae>
 800c45a:	6a21      	ldr	r1, [r4, #32]
 800c45c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c45e:	4643      	mov	r3, r8
 800c460:	463a      	mov	r2, r7
 800c462:	4628      	mov	r0, r5
 800c464:	47b0      	blx	r6
 800c466:	2800      	cmp	r0, #0
 800c468:	dc08      	bgt.n	800c47c <__sflush_r+0xfc>
 800c46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	f04f 30ff 	mov.w	r0, #4294967295
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c47c:	4407      	add	r7, r0
 800c47e:	eba8 0800 	sub.w	r8, r8, r0
 800c482:	e7e7      	b.n	800c454 <__sflush_r+0xd4>
 800c484:	dfbffffe 	.word	0xdfbffffe

0800c488 <_fflush_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	690b      	ldr	r3, [r1, #16]
 800c48c:	4605      	mov	r5, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b913      	cbnz	r3, 800c498 <_fflush_r+0x10>
 800c492:	2500      	movs	r5, #0
 800c494:	4628      	mov	r0, r5
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	b118      	cbz	r0, 800c4a2 <_fflush_r+0x1a>
 800c49a:	6a03      	ldr	r3, [r0, #32]
 800c49c:	b90b      	cbnz	r3, 800c4a2 <_fflush_r+0x1a>
 800c49e:	f7fe ffc3 	bl	800b428 <__sinit>
 800c4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0f3      	beq.n	800c492 <_fflush_r+0xa>
 800c4aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4ac:	07d0      	lsls	r0, r2, #31
 800c4ae:	d404      	bmi.n	800c4ba <_fflush_r+0x32>
 800c4b0:	0599      	lsls	r1, r3, #22
 800c4b2:	d402      	bmi.n	800c4ba <_fflush_r+0x32>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4b6:	f7ff fac2 	bl	800ba3e <__retarget_lock_acquire_recursive>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f7ff ff5f 	bl	800c380 <__sflush_r>
 800c4c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4c4:	07da      	lsls	r2, r3, #31
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	d4e4      	bmi.n	800c494 <_fflush_r+0xc>
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	059b      	lsls	r3, r3, #22
 800c4ce:	d4e1      	bmi.n	800c494 <_fflush_r+0xc>
 800c4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4d2:	f7ff fab5 	bl	800ba40 <__retarget_lock_release_recursive>
 800c4d6:	e7dd      	b.n	800c494 <_fflush_r+0xc>

0800c4d8 <fiprintf>:
 800c4d8:	b40e      	push	{r1, r2, r3}
 800c4da:	b503      	push	{r0, r1, lr}
 800c4dc:	4601      	mov	r1, r0
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	4805      	ldr	r0, [pc, #20]	@ (800c4f8 <fiprintf+0x20>)
 800c4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e6:	6800      	ldr	r0, [r0, #0]
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	f7ff fca3 	bl	800be34 <_vfiprintf_r>
 800c4ee:	b002      	add	sp, #8
 800c4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f4:	b003      	add	sp, #12
 800c4f6:	4770      	bx	lr
 800c4f8:	20000134 	.word	0x20000134

0800c4fc <__swhatbuf_r>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	460c      	mov	r4, r1
 800c500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c504:	2900      	cmp	r1, #0
 800c506:	b096      	sub	sp, #88	@ 0x58
 800c508:	4615      	mov	r5, r2
 800c50a:	461e      	mov	r6, r3
 800c50c:	da0d      	bge.n	800c52a <__swhatbuf_r+0x2e>
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c514:	f04f 0100 	mov.w	r1, #0
 800c518:	bf14      	ite	ne
 800c51a:	2340      	movne	r3, #64	@ 0x40
 800c51c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c520:	2000      	movs	r0, #0
 800c522:	6031      	str	r1, [r6, #0]
 800c524:	602b      	str	r3, [r5, #0]
 800c526:	b016      	add	sp, #88	@ 0x58
 800c528:	bd70      	pop	{r4, r5, r6, pc}
 800c52a:	466a      	mov	r2, sp
 800c52c:	f000 f862 	bl	800c5f4 <_fstat_r>
 800c530:	2800      	cmp	r0, #0
 800c532:	dbec      	blt.n	800c50e <__swhatbuf_r+0x12>
 800c534:	9901      	ldr	r1, [sp, #4]
 800c536:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c53a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c53e:	4259      	negs	r1, r3
 800c540:	4159      	adcs	r1, r3
 800c542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c546:	e7eb      	b.n	800c520 <__swhatbuf_r+0x24>

0800c548 <__smakebuf_r>:
 800c548:	898b      	ldrh	r3, [r1, #12]
 800c54a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c54c:	079d      	lsls	r5, r3, #30
 800c54e:	4606      	mov	r6, r0
 800c550:	460c      	mov	r4, r1
 800c552:	d507      	bpl.n	800c564 <__smakebuf_r+0x1c>
 800c554:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	2301      	movs	r3, #1
 800c55e:	6163      	str	r3, [r4, #20]
 800c560:	b003      	add	sp, #12
 800c562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c564:	ab01      	add	r3, sp, #4
 800c566:	466a      	mov	r2, sp
 800c568:	f7ff ffc8 	bl	800c4fc <__swhatbuf_r>
 800c56c:	9f00      	ldr	r7, [sp, #0]
 800c56e:	4605      	mov	r5, r0
 800c570:	4639      	mov	r1, r7
 800c572:	4630      	mov	r0, r6
 800c574:	f7fe fdbc 	bl	800b0f0 <_malloc_r>
 800c578:	b948      	cbnz	r0, 800c58e <__smakebuf_r+0x46>
 800c57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57e:	059a      	lsls	r2, r3, #22
 800c580:	d4ee      	bmi.n	800c560 <__smakebuf_r+0x18>
 800c582:	f023 0303 	bic.w	r3, r3, #3
 800c586:	f043 0302 	orr.w	r3, r3, #2
 800c58a:	81a3      	strh	r3, [r4, #12]
 800c58c:	e7e2      	b.n	800c554 <__smakebuf_r+0xc>
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	6020      	str	r0, [r4, #0]
 800c592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c59e:	b15b      	cbz	r3, 800c5b8 <__smakebuf_r+0x70>
 800c5a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f000 f837 	bl	800c618 <_isatty_r>
 800c5aa:	b128      	cbz	r0, 800c5b8 <__smakebuf_r+0x70>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	f043 0301 	orr.w	r3, r3, #1
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	431d      	orrs	r5, r3
 800c5bc:	81a5      	strh	r5, [r4, #12]
 800c5be:	e7cf      	b.n	800c560 <__smakebuf_r+0x18>

0800c5c0 <memmove>:
 800c5c0:	4288      	cmp	r0, r1
 800c5c2:	b510      	push	{r4, lr}
 800c5c4:	eb01 0402 	add.w	r4, r1, r2
 800c5c8:	d902      	bls.n	800c5d0 <memmove+0x10>
 800c5ca:	4284      	cmp	r4, r0
 800c5cc:	4623      	mov	r3, r4
 800c5ce:	d807      	bhi.n	800c5e0 <memmove+0x20>
 800c5d0:	1e43      	subs	r3, r0, #1
 800c5d2:	42a1      	cmp	r1, r4
 800c5d4:	d008      	beq.n	800c5e8 <memmove+0x28>
 800c5d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5de:	e7f8      	b.n	800c5d2 <memmove+0x12>
 800c5e0:	4402      	add	r2, r0
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	428a      	cmp	r2, r1
 800c5e6:	d100      	bne.n	800c5ea <memmove+0x2a>
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5f2:	e7f7      	b.n	800c5e4 <memmove+0x24>

0800c5f4 <_fstat_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4d07      	ldr	r5, [pc, #28]	@ (800c614 <_fstat_r+0x20>)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f4 fe9d 	bl	8001340 <_fstat>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d102      	bne.n	800c610 <_fstat_r+0x1c>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	b103      	cbz	r3, 800c610 <_fstat_r+0x1c>
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	200012a0 	.word	0x200012a0

0800c618 <_isatty_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d06      	ldr	r5, [pc, #24]	@ (800c634 <_isatty_r+0x1c>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f4 fe9c 	bl	8001360 <_isatty>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_isatty_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_isatty_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	200012a0 	.word	0x200012a0

0800c638 <abort>:
 800c638:	b508      	push	{r3, lr}
 800c63a:	2006      	movs	r0, #6
 800c63c:	f000 f85a 	bl	800c6f4 <raise>
 800c640:	2001      	movs	r0, #1
 800c642:	f7f4 fe2d 	bl	80012a0 <_exit>

0800c646 <_realloc_r>:
 800c646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c64a:	4680      	mov	r8, r0
 800c64c:	4615      	mov	r5, r2
 800c64e:	460c      	mov	r4, r1
 800c650:	b921      	cbnz	r1, 800c65c <_realloc_r+0x16>
 800c652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c656:	4611      	mov	r1, r2
 800c658:	f7fe bd4a 	b.w	800b0f0 <_malloc_r>
 800c65c:	b92a      	cbnz	r2, 800c66a <_realloc_r+0x24>
 800c65e:	f7ff fa1d 	bl	800ba9c <_free_r>
 800c662:	2400      	movs	r4, #0
 800c664:	4620      	mov	r0, r4
 800c666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c66a:	f000 f85f 	bl	800c72c <_malloc_usable_size_r>
 800c66e:	4285      	cmp	r5, r0
 800c670:	4606      	mov	r6, r0
 800c672:	d802      	bhi.n	800c67a <_realloc_r+0x34>
 800c674:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c678:	d8f4      	bhi.n	800c664 <_realloc_r+0x1e>
 800c67a:	4629      	mov	r1, r5
 800c67c:	4640      	mov	r0, r8
 800c67e:	f7fe fd37 	bl	800b0f0 <_malloc_r>
 800c682:	4607      	mov	r7, r0
 800c684:	2800      	cmp	r0, #0
 800c686:	d0ec      	beq.n	800c662 <_realloc_r+0x1c>
 800c688:	42b5      	cmp	r5, r6
 800c68a:	462a      	mov	r2, r5
 800c68c:	4621      	mov	r1, r4
 800c68e:	bf28      	it	cs
 800c690:	4632      	movcs	r2, r6
 800c692:	f7ff f9d6 	bl	800ba42 <memcpy>
 800c696:	4621      	mov	r1, r4
 800c698:	4640      	mov	r0, r8
 800c69a:	f7ff f9ff 	bl	800ba9c <_free_r>
 800c69e:	463c      	mov	r4, r7
 800c6a0:	e7e0      	b.n	800c664 <_realloc_r+0x1e>

0800c6a2 <_raise_r>:
 800c6a2:	291f      	cmp	r1, #31
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	d904      	bls.n	800c6b6 <_raise_r+0x14>
 800c6ac:	2316      	movs	r3, #22
 800c6ae:	6003      	str	r3, [r0, #0]
 800c6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6b8:	b112      	cbz	r2, 800c6c0 <_raise_r+0x1e>
 800c6ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6be:	b94b      	cbnz	r3, 800c6d4 <_raise_r+0x32>
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f000 f831 	bl	800c728 <_getpid_r>
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	4601      	mov	r1, r0
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6d0:	f000 b818 	b.w	800c704 <_kill_r>
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d00a      	beq.n	800c6ee <_raise_r+0x4c>
 800c6d8:	1c59      	adds	r1, r3, #1
 800c6da:	d103      	bne.n	800c6e4 <_raise_r+0x42>
 800c6dc:	2316      	movs	r3, #22
 800c6de:	6003      	str	r3, [r0, #0]
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	e7e7      	b.n	800c6b4 <_raise_r+0x12>
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4798      	blx	r3
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e7e0      	b.n	800c6b4 <_raise_r+0x12>
	...

0800c6f4 <raise>:
 800c6f4:	4b02      	ldr	r3, [pc, #8]	@ (800c700 <raise+0xc>)
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	f7ff bfd2 	b.w	800c6a2 <_raise_r>
 800c6fe:	bf00      	nop
 800c700:	20000134 	.word	0x20000134

0800c704 <_kill_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4d07      	ldr	r5, [pc, #28]	@ (800c724 <_kill_r+0x20>)
 800c708:	2300      	movs	r3, #0
 800c70a:	4604      	mov	r4, r0
 800c70c:	4608      	mov	r0, r1
 800c70e:	4611      	mov	r1, r2
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	f7f4 fdb5 	bl	8001280 <_kill>
 800c716:	1c43      	adds	r3, r0, #1
 800c718:	d102      	bne.n	800c720 <_kill_r+0x1c>
 800c71a:	682b      	ldr	r3, [r5, #0]
 800c71c:	b103      	cbz	r3, 800c720 <_kill_r+0x1c>
 800c71e:	6023      	str	r3, [r4, #0]
 800c720:	bd38      	pop	{r3, r4, r5, pc}
 800c722:	bf00      	nop
 800c724:	200012a0 	.word	0x200012a0

0800c728 <_getpid_r>:
 800c728:	f7f4 bda2 	b.w	8001270 <_getpid>

0800c72c <_malloc_usable_size_r>:
 800c72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c730:	1f18      	subs	r0, r3, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfbc      	itt	lt
 800c736:	580b      	ldrlt	r3, [r1, r0]
 800c738:	18c0      	addlt	r0, r0, r3
 800c73a:	4770      	bx	lr

0800c73c <_init>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	bf00      	nop
 800c740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c742:	bc08      	pop	{r3}
 800c744:	469e      	mov	lr, r3
 800c746:	4770      	bx	lr

0800c748 <_fini>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	bf00      	nop
 800c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74e:	bc08      	pop	{r3}
 800c750:	469e      	mov	lr, r3
 800c752:	4770      	bx	lr
